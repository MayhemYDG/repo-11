name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
#   test:
#     if: ${{ github.event_name != 'workflow_dispatch' }}
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v3
#       with:
#         dotnet-version: 7.0.x

#     - name: Run device simulator
#       run: docker run --rm --name device-simulator -d -p 4403:4403 meshtastic/device-simulator
        
#     - name: Run tests
#       run: dotnet test --collect:"XPlat Code Coverage" --settings ./Meshtastic.Test/coverlet.runsettings

#     - name: Move files up
#       run: mv ./Meshtastic.Test/TestResults/**/coverage.info ./Meshtastic.Test/TestResults

#     # For diagnostics
#     - name: Show test results
#       run: ls -lR

#     - name: Upload coverage to Coveralls
#       uses: coverallsapp/github-action@master
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         path-to-lcov: ./Meshtastic.Test/TestResults/coverage.info

  release:
    if: ${{ github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x

    - name: Cache python libs
      uses: actions/cache@v3
      id: cache-pip # needed in if test
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip

    - name: Upgrade python tools
      shell: bash
      run: |
        python -m pip install --upgrade pip

    - name: Get release version string
      run: echo "version=$(./scripts/buildinfo.py short)" >> $GITHUB_OUTPUT
      id: version

    - name: Restore dependencies
      run: dotnet restore
    - name: Build solution and generate NuGet package
      run: | 
        dotnet build -c Release -p:AssemblyVersion=${{ steps.version.outputs.version }} -p:Version=${{ steps.version.outputs.version }} -p:NuGetVersion=${{ steps.version.outputs.version }}
        dotnet pack -c Release -p:AssemblyVersion=${{ steps.version.outputs.version }} -p:Version=${{ steps.version.outputs.version }} -p:NuGetVersion=${{ steps.version.outputs.version }}
          
    - name: Publish package to nuget
      run: dotnet nuget push ./**/Tak.Client.*.nupkg --skip-duplicate --api-key ${{secrets.GITHUB_TOKEN}} --source "github"


    - name: Create release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: true
        prerelease: true
        release_name: Tak.Client ${{ steps.version.outputs.version }}
        tag_name: v${{ steps.version.outputs.version }}
        body: |
          Autogenerated by github action, developer should edit as required before publishing...
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Bump version.properties
      run: >-
        scripts/bump_version.py
        
    - name: Create version.properties pull request
      uses: peter-evans/create-pull-request@v3
      with:
        add-paths: |
          version.properties
