// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &CoreAccessPolicyDataSource{}
	_ datasource.DataSourceWithConfigure = &CoreAccessPolicyDataSource{}
)

func NewCoreAccessPolicyDataSource() datasource.DataSource {
	return &CoreAccessPolicyDataSource{}
}

// CoreAccessPolicyDataSource defines the data source implementation.
type CoreAccessPolicyDataSource struct{}

type CoreAccessPolicyDataSourceModel_Scope struct {
	Kind types.String `tfsdk:"kind"`
	Name types.String `tfsdk:"name"`
}

func (m CoreAccessPolicyDataSourceModel_Scope) MarshalJSON() ([]byte, error) {
	type jsonCoreAccessPolicyDataSourceModel_Scope struct {
		Kind string `json:"kind"`
		Name string `json:"name"`
	}

	m = m.ApplyDefaults()
	attr_kind := m.Kind.ValueString()
	attr_name := m.Name.ValueString()

	model := &jsonCoreAccessPolicyDataSourceModel_Scope{
		Kind: attr_kind,
		Name: attr_name,
	}
	return json.Marshal(model)
}

func (m CoreAccessPolicyDataSourceModel_Scope) ApplyDefaults() CoreAccessPolicyDataSourceModel_Scope {

	return m
}

type CoreAccessPolicyDataSourceModel_Rules struct {
	Kind   types.String `tfsdk:"kind"`
	Verb   types.String `tfsdk:"verb"`
	Target types.String `tfsdk:"target"`
}

func (m CoreAccessPolicyDataSourceModel_Rules) MarshalJSON() ([]byte, error) {
	type jsonCoreAccessPolicyDataSourceModel_Rules struct {
		Kind   string  `json:"kind"`
		Verb   string  `json:"verb"`
		Target *string `json:"target,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_kind := m.Kind.ValueString()
	attr_verb := m.Verb.ValueString()
	attr_target := m.Target.ValueString()

	model := &jsonCoreAccessPolicyDataSourceModel_Rules{
		Kind:   attr_kind,
		Verb:   attr_verb,
		Target: &attr_target,
	}
	return json.Marshal(model)
}

func (m CoreAccessPolicyDataSourceModel_Rules) ApplyDefaults() CoreAccessPolicyDataSourceModel_Rules {

	return m
}

type CoreAccessPolicyDataSourceModel struct {
	ToJSON types.String                            `tfsdk:"to_json"`
	Scope  *CoreAccessPolicyDataSourceModel_Scope  `tfsdk:"scope"`
	Rules  []CoreAccessPolicyDataSourceModel_Rules `tfsdk:"rules"`
}

func (m CoreAccessPolicyDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonCoreAccessPolicyDataSourceModel struct {
		Scope interface{}   `json:"scope,omitempty"`
		Rules []interface{} `json:"rules,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_scope interface{}
	if m.Scope != nil {
		attr_scope = m.Scope
	}
	attr_rules := []interface{}{}
	for _, v := range m.Rules {
		attr_rules = append(attr_rules, v)
	}

	model := &jsonCoreAccessPolicyDataSourceModel{
		Scope: attr_scope,
		Rules: attr_rules,
	}
	return json.Marshal(model)
}

func (m CoreAccessPolicyDataSourceModel) ApplyDefaults() CoreAccessPolicyDataSourceModel {

	return m
}

func (d *CoreAccessPolicyDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_core_access_policy"
}

func (d *CoreAccessPolicyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"scope": schema.SingleNestedAttribute{
				MarkdownDescription: `The scope where these policies should apply`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"kind": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"rules": schema.ListNestedAttribute{
				MarkdownDescription: `The set of rules to apply.  Note that * is required to modify
access policy rules, and that "none" will reject all actions`,
				Computed: false,
				Optional: true,
				Required: false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"kind": schema.StringAttribute{
							MarkdownDescription: `The kind this rule applies to (dashboars, alert, etc)`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"verb": schema.StringAttribute{
							MarkdownDescription: `READ, WRITE, CREATE, DELETE, ...
should move to k8s style verbs like: "get", "list", "watch", "create", "update", "patch", "delete"`,
							Computed: false,
							Optional: false,
							Required: true,
						},
						"target": schema.StringAttribute{
							MarkdownDescription: `Specific sub-elements like "alert.rules" or "dashboard.permissions"????`,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *CoreAccessPolicyDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *CoreAccessPolicyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data CoreAccessPolicyDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
