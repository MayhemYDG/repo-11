// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &CoreFolderDataSource{}
	_ datasource.DataSourceWithConfigure = &CoreFolderDataSource{}
)

func NewCoreFolderDataSource() datasource.DataSource {
	return &CoreFolderDataSource{}
}

// CoreFolderDataSource defines the data source implementation.
type CoreFolderDataSource struct{}

type CoreFolderDataSourceModel struct {
	ToJSON      types.String `tfsdk:"to_json"`
	Uid         types.String `tfsdk:"uid"`
	Title       types.String `tfsdk:"title"`
	Description types.String `tfsdk:"description"`
}

func (m CoreFolderDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonCoreFolderDataSourceModel struct {
		Uid         string  `json:"uid"`
		Title       string  `json:"title"`
		Description *string `json:"description,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_uid := m.Uid.ValueString()
	attr_title := m.Title.ValueString()
	attr_description := m.Description.ValueString()

	model := &jsonCoreFolderDataSourceModel{
		Uid:         attr_uid,
		Title:       attr_title,
		Description: &attr_description,
	}
	return json.Marshal(model)
}

func (m CoreFolderDataSourceModel) ApplyDefaults() CoreFolderDataSourceModel {

	return m
}

func (d *CoreFolderDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_core_folder"
}

func (d *CoreFolderDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"uid": schema.StringAttribute{
				MarkdownDescription: `Unique folder id. (will be k8s name)`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Folder title`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description of the folder.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *CoreFolderDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *CoreFolderDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data CoreFolderDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
