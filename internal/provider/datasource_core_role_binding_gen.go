// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &CoreRoleBindingDataSource{}
	_ datasource.DataSourceWithConfigure = &CoreRoleBindingDataSource{}
)

func NewCoreRoleBindingDataSource() datasource.DataSource {
	return &CoreRoleBindingDataSource{}
}

// CoreRoleBindingDataSource defines the data source implementation.
type CoreRoleBindingDataSource struct{}

type CoreRoleBindingDataSourceModel_Role_BuiltinRoleRef struct {
	Kind types.String `tfsdk:"kind"`
	Name types.String `tfsdk:"name"`
}

func (m CoreRoleBindingDataSourceModel_Role_BuiltinRoleRef) MarshalJSON() ([]byte, error) {
	type jsonCoreRoleBindingDataSourceModel_Role_BuiltinRoleRef struct {
		Kind string `json:"kind"`
		Name string `json:"name"`
	}

	m = m.ApplyDefaults()
	attr_kind := m.Kind.ValueString()
	attr_name := m.Name.ValueString()

	model := &jsonCoreRoleBindingDataSourceModel_Role_BuiltinRoleRef{
		Kind: attr_kind,
		Name: attr_name,
	}
	return json.Marshal(model)
}

func (m CoreRoleBindingDataSourceModel_Role_BuiltinRoleRef) ApplyDefaults() CoreRoleBindingDataSourceModel_Role_BuiltinRoleRef {

	return m
}

type CoreRoleBindingDataSourceModel_Role_CustomRoleRef struct {
	Kind types.String `tfsdk:"kind"`
	Name types.String `tfsdk:"name"`
}

func (m CoreRoleBindingDataSourceModel_Role_CustomRoleRef) MarshalJSON() ([]byte, error) {
	type jsonCoreRoleBindingDataSourceModel_Role_CustomRoleRef struct {
		Kind string `json:"kind"`
		Name string `json:"name"`
	}

	m = m.ApplyDefaults()
	attr_kind := m.Kind.ValueString()
	attr_name := m.Name.ValueString()

	model := &jsonCoreRoleBindingDataSourceModel_Role_CustomRoleRef{
		Kind: attr_kind,
		Name: attr_name,
	}
	return json.Marshal(model)
}

func (m CoreRoleBindingDataSourceModel_Role_CustomRoleRef) ApplyDefaults() CoreRoleBindingDataSourceModel_Role_CustomRoleRef {

	return m
}

type CoreRoleBindingDataSourceModel_Role struct {
	BuiltinRoleRef *CoreRoleBindingDataSourceModel_Role_BuiltinRoleRef `tfsdk:"builtin_role_ref"`
	CustomRoleRef  *CoreRoleBindingDataSourceModel_Role_CustomRoleRef  `tfsdk:"custom_role_ref"`
}

func (m CoreRoleBindingDataSourceModel_Role) MarshalJSON() ([]byte, error) {
	var json_CoreRoleBindingDataSourceModel_Role interface{}
	m = m.ApplyDefaults()
	if m.BuiltinRoleRef != nil {
		json_CoreRoleBindingDataSourceModel_Role = m.BuiltinRoleRef
	}
	if m.CustomRoleRef != nil {
		json_CoreRoleBindingDataSourceModel_Role = m.CustomRoleRef
	}

	return json.Marshal(json_CoreRoleBindingDataSourceModel_Role)
}

func (m CoreRoleBindingDataSourceModel_Role) ApplyDefaults() CoreRoleBindingDataSourceModel_Role {

	return m
}

type CoreRoleBindingDataSourceModel_Subject struct {
	Kind types.String `tfsdk:"kind"`
	Name types.String `tfsdk:"name"`
}

func (m CoreRoleBindingDataSourceModel_Subject) MarshalJSON() ([]byte, error) {
	type jsonCoreRoleBindingDataSourceModel_Subject struct {
		Kind string `json:"kind"`
		Name string `json:"name"`
	}

	m = m.ApplyDefaults()
	attr_kind := m.Kind.ValueString()
	attr_name := m.Name.ValueString()

	model := &jsonCoreRoleBindingDataSourceModel_Subject{
		Kind: attr_kind,
		Name: attr_name,
	}
	return json.Marshal(model)
}

func (m CoreRoleBindingDataSourceModel_Subject) ApplyDefaults() CoreRoleBindingDataSourceModel_Subject {

	return m
}

type CoreRoleBindingDataSourceModel struct {
	ToJSON  types.String                            `tfsdk:"to_json"`
	Role    *CoreRoleBindingDataSourceModel_Role    `tfsdk:"role"`
	Subject *CoreRoleBindingDataSourceModel_Subject `tfsdk:"subject"`
}

func (m CoreRoleBindingDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonCoreRoleBindingDataSourceModel struct {
		Role    interface{} `json:"role,omitempty"`
		Subject interface{} `json:"subject,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_role interface{}
	if m.Role != nil {
		attr_role = m.Role
	}
	var attr_subject interface{}
	if m.Subject != nil {
		attr_subject = m.Subject
	}

	model := &jsonCoreRoleBindingDataSourceModel{
		Role:    attr_role,
		Subject: attr_subject,
	}
	return json.Marshal(model)
}

func (m CoreRoleBindingDataSourceModel) ApplyDefaults() CoreRoleBindingDataSourceModel {

	return m
}

func (d *CoreRoleBindingDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_core_role_binding"
}

func (d *CoreRoleBindingDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"role": schema.SingleNestedAttribute{
				MarkdownDescription: `The role we are discussing`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"builtin_role_ref": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"name": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},
					"custom_role_ref": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"name": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},
				},
			},
			"subject": schema.SingleNestedAttribute{
				MarkdownDescription: `The team or user that has the specified role`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"kind": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"name": schema.StringAttribute{
						MarkdownDescription: `The team/user identifier name`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *CoreRoleBindingDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *CoreRoleBindingDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data CoreRoleBindingDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
