// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &PanelTrendDataSource{}
	_ datasource.DataSourceWithConfigure = &PanelTrendDataSource{}
)

func NewPanelTrendDataSource() datasource.DataSource {
	return &PanelTrendDataSource{}
}

// PanelTrendDataSource defines the data source implementation.
type PanelTrendDataSource struct{}

type PanelTrendDataSourceModel_Datasource struct {
	Type types.String `tfsdk:"type"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelTrendDataSourceModel_Datasource) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Datasource struct {
		Type *string `json:"type,omitempty"`
		Uid  *string `json:"uid,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_type *string
	if !m.Type.IsNull() && !m.Type.IsUnknown() {
		tmp := m.Type.ValueString()
		attr_type = &tmp
	}
	var attr_uid *string
	if !m.Uid.IsNull() && !m.Uid.IsUnknown() {
		tmp := m.Uid.ValueString()
		attr_uid = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_Datasource{
		Type: attr_type,
		Uid:  attr_uid,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Datasource) ApplyDefaults() PanelTrendDataSourceModel_Datasource {

	return m
}

type PanelTrendDataSourceModel_GridPos struct {
	H      types.Int64 `tfsdk:"h"`
	W      types.Int64 `tfsdk:"w"`
	X      types.Int64 `tfsdk:"x"`
	Y      types.Int64 `tfsdk:"y"`
	Static types.Bool  `tfsdk:"static"`
}

func (m PanelTrendDataSourceModel_GridPos) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_GridPos struct {
		H      int64 `json:"h"`
		W      int64 `json:"w"`
		X      int64 `json:"x"`
		Y      int64 `json:"y"`
		Static *bool `json:"static,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_h := m.H.ValueInt64()
	attr_w := m.W.ValueInt64()
	attr_x := m.X.ValueInt64()
	attr_y := m.Y.ValueInt64()
	var attr_static *bool
	if !m.Static.IsNull() && !m.Static.IsUnknown() {
		tmp := m.Static.ValueBool()
		attr_static = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_GridPos{
		H:      attr_h,
		W:      attr_w,
		X:      attr_x,
		Y:      attr_y,
		Static: attr_static,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_GridPos) ApplyDefaults() PanelTrendDataSourceModel_GridPos {
	if m.H.IsNull() {
		m.H = types.Int64Value(9)
	}
	if m.W.IsNull() {
		m.W = types.Int64Value(12)
	}
	if m.X.IsNull() {
		m.X = types.Int64Value(0)
	}
	if m.Y.IsNull() {
		m.Y = types.Int64Value(0)
	}
	return m
}

type PanelTrendDataSourceModel_Links struct {
	Title       types.String `tfsdk:"title"`
	Type        types.String `tfsdk:"type"`
	Icon        types.String `tfsdk:"icon"`
	Tooltip     types.String `tfsdk:"tooltip"`
	Url         types.String `tfsdk:"url"`
	Tags        types.List   `tfsdk:"tags"`
	AsDropdown  types.Bool   `tfsdk:"as_dropdown"`
	TargetBlank types.Bool   `tfsdk:"target_blank"`
	IncludeVars types.Bool   `tfsdk:"include_vars"`
	KeepTime    types.Bool   `tfsdk:"keep_time"`
}

func (m PanelTrendDataSourceModel_Links) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Links struct {
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		Icon        string   `json:"icon"`
		Tooltip     string   `json:"tooltip"`
		Url         string   `json:"url"`
		Tags        []string `json:"tags,omitempty"`
		AsDropdown  bool     `json:"asDropdown"`
		TargetBlank bool     `json:"targetBlank"`
		IncludeVars bool     `json:"includeVars"`
		KeepTime    bool     `json:"keepTime"`
	}

	m = m.ApplyDefaults()
	attr_title := m.Title.ValueString()
	attr_type := m.Type.ValueString()
	attr_icon := m.Icon.ValueString()
	attr_tooltip := m.Tooltip.ValueString()
	attr_url := m.Url.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_asdropdown := m.AsDropdown.ValueBool()
	attr_targetblank := m.TargetBlank.ValueBool()
	attr_includevars := m.IncludeVars.ValueBool()
	attr_keeptime := m.KeepTime.ValueBool()

	model := &jsonPanelTrendDataSourceModel_Links{
		Title:       attr_title,
		Type:        attr_type,
		Icon:        attr_icon,
		Tooltip:     attr_tooltip,
		Url:         attr_url,
		Tags:        attr_tags,
		AsDropdown:  attr_asdropdown,
		TargetBlank: attr_targetblank,
		IncludeVars: attr_includevars,
		KeepTime:    attr_keeptime,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Links) ApplyDefaults() PanelTrendDataSourceModel_Links {
	if len(m.Tags.Elements()) == 0 {
		m.Tags, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if m.AsDropdown.IsNull() {
		m.AsDropdown = types.BoolValue(false)
	}
	if m.TargetBlank.IsNull() {
		m.TargetBlank = types.BoolValue(false)
	}
	if m.IncludeVars.IsNull() {
		m.IncludeVars = types.BoolValue(false)
	}
	if m.KeepTime.IsNull() {
		m.KeepTime = types.BoolValue(false)
	}
	return m
}

type PanelTrendDataSourceModel_Transformations_Filter struct {
}

func (m PanelTrendDataSourceModel_Transformations_Filter) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Transformations_Filter struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelTrendDataSourceModel_Transformations_Filter{}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Transformations_Filter) ApplyDefaults() PanelTrendDataSourceModel_Transformations_Filter {

	return m
}

type PanelTrendDataSourceModel_Transformations struct {
	Disabled types.Bool                                        `tfsdk:"disabled"`
	Filter   *PanelTrendDataSourceModel_Transformations_Filter `tfsdk:"filter"`
}

func (m PanelTrendDataSourceModel_Transformations) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Transformations struct {
		Disabled *bool       `json:"disabled,omitempty"`
		Filter   interface{} `json:"filter,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_disabled *bool
	if !m.Disabled.IsNull() && !m.Disabled.IsUnknown() {
		tmp := m.Disabled.ValueBool()
		attr_disabled = &tmp
	}
	var attr_filter interface{}
	if m.Filter != nil {
		attr_filter = m.Filter
	}

	model := &jsonPanelTrendDataSourceModel_Transformations{
		Disabled: attr_disabled,
		Filter:   attr_filter,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Transformations) ApplyDefaults() PanelTrendDataSourceModel_Transformations {

	return m
}

type PanelTrendDataSourceModel_LibraryPanel struct {
	Name types.String `tfsdk:"name"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelTrendDataSourceModel_LibraryPanel) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_LibraryPanel struct {
		Name string `json:"name"`
		Uid  string `json:"uid"`
	}

	m = m.ApplyDefaults()
	attr_name := m.Name.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelTrendDataSourceModel_LibraryPanel{
		Name: attr_name,
		Uid:  attr_uid,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_LibraryPanel) ApplyDefaults() PanelTrendDataSourceModel_LibraryPanel {

	return m
}

type PanelTrendDataSourceModel_Options_Legend struct {
	DisplayMode types.String  `tfsdk:"display_mode"`
	Placement   types.String  `tfsdk:"placement"`
	ShowLegend  types.Bool    `tfsdk:"show_legend"`
	AsTable     types.Bool    `tfsdk:"as_table"`
	IsVisible   types.Bool    `tfsdk:"is_visible"`
	SortBy      types.String  `tfsdk:"sort_by"`
	SortDesc    types.Bool    `tfsdk:"sort_desc"`
	Width       types.Float64 `tfsdk:"width"`
	Calcs       types.List    `tfsdk:"calcs"`
}

func (m PanelTrendDataSourceModel_Options_Legend) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Options_Legend struct {
		DisplayMode string   `json:"displayMode"`
		Placement   string   `json:"placement"`
		ShowLegend  bool     `json:"showLegend"`
		AsTable     *bool    `json:"asTable,omitempty"`
		IsVisible   *bool    `json:"isVisible,omitempty"`
		SortBy      *string  `json:"sortBy,omitempty"`
		SortDesc    *bool    `json:"sortDesc,omitempty"`
		Width       *float64 `json:"width,omitempty"`
		Calcs       []string `json:"calcs,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_displaymode := m.DisplayMode.ValueString()
	attr_placement := m.Placement.ValueString()
	attr_showlegend := m.ShowLegend.ValueBool()
	var attr_astable *bool
	if !m.AsTable.IsNull() && !m.AsTable.IsUnknown() {
		tmp := m.AsTable.ValueBool()
		attr_astable = &tmp
	}
	var attr_isvisible *bool
	if !m.IsVisible.IsNull() && !m.IsVisible.IsUnknown() {
		tmp := m.IsVisible.ValueBool()
		attr_isvisible = &tmp
	}
	var attr_sortby *string
	if !m.SortBy.IsNull() && !m.SortBy.IsUnknown() {
		tmp := m.SortBy.ValueString()
		attr_sortby = &tmp
	}
	var attr_sortdesc *bool
	if !m.SortDesc.IsNull() && !m.SortDesc.IsUnknown() {
		tmp := m.SortDesc.ValueBool()
		attr_sortdesc = &tmp
	}
	var attr_width *float64
	if !m.Width.IsNull() && !m.Width.IsUnknown() {
		tmp := m.Width.ValueFloat64()
		attr_width = &tmp
	}
	attr_calcs := []string{}
	for _, v := range m.Calcs.Elements() {
		attr_calcs = append(attr_calcs, v.(types.String).ValueString())
	}

	model := &jsonPanelTrendDataSourceModel_Options_Legend{
		DisplayMode: attr_displaymode,
		Placement:   attr_placement,
		ShowLegend:  attr_showlegend,
		AsTable:     attr_astable,
		IsVisible:   attr_isvisible,
		SortBy:      attr_sortby,
		SortDesc:    attr_sortdesc,
		Width:       attr_width,
		Calcs:       attr_calcs,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Options_Legend) ApplyDefaults() PanelTrendDataSourceModel_Options_Legend {
	if len(m.Calcs.Elements()) == 0 {
		m.Calcs, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	return m
}

type PanelTrendDataSourceModel_Options_Tooltip struct {
	Mode types.String `tfsdk:"mode"`
	Sort types.String `tfsdk:"sort"`
}

func (m PanelTrendDataSourceModel_Options_Tooltip) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Options_Tooltip struct {
		Mode string `json:"mode"`
		Sort string `json:"sort"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_sort := m.Sort.ValueString()

	model := &jsonPanelTrendDataSourceModel_Options_Tooltip{
		Mode: attr_mode,
		Sort: attr_sort,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Options_Tooltip) ApplyDefaults() PanelTrendDataSourceModel_Options_Tooltip {

	return m
}

type PanelTrendDataSourceModel_Options struct {
	Legend  *PanelTrendDataSourceModel_Options_Legend  `tfsdk:"legend"`
	Tooltip *PanelTrendDataSourceModel_Options_Tooltip `tfsdk:"tooltip"`
	XField  types.String                               `tfsdk:"x_field"`
}

func (m PanelTrendDataSourceModel_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_Options struct {
		Legend  interface{} `json:"legend,omitempty"`
		Tooltip interface{} `json:"tooltip,omitempty"`
		XField  *string     `json:"xField,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_legend interface{}
	if m.Legend != nil {
		attr_legend = m.Legend
	}
	var attr_tooltip interface{}
	if m.Tooltip != nil {
		attr_tooltip = m.Tooltip
	}
	var attr_xfield *string
	if !m.XField.IsNull() && !m.XField.IsUnknown() {
		tmp := m.XField.ValueString()
		attr_xfield = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_Options{
		Legend:  attr_legend,
		Tooltip: attr_tooltip,
		XField:  attr_xfield,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_Options) ApplyDefaults() PanelTrendDataSourceModel_Options {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options struct {
	Text  types.String `tfsdk:"text"`
	Color types.String `tfsdk:"color"`
	Icon  types.String `tfsdk:"icon"`
	Index types.Int64  `tfsdk:"index"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options struct {
		Text  *string `json:"text,omitempty"`
		Color *string `json:"color,omitempty"`
		Icon  *string `json:"icon,omitempty"`
		Index *int64  `json:"index,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_text *string
	if !m.Text.IsNull() && !m.Text.IsUnknown() {
		tmp := m.Text.ValueString()
		attr_text = &tmp
	}
	var attr_color *string
	if !m.Color.IsNull() && !m.Color.IsUnknown() {
		tmp := m.Color.ValueString()
		attr_color = &tmp
	}
	var attr_icon *string
	if !m.Icon.IsNull() && !m.Icon.IsUnknown() {
		tmp := m.Icon.ValueString()
		attr_icon = &tmp
	}
	var attr_index *int64
	if !m.Index.IsNull() && !m.Index.IsUnknown() {
		tmp := m.Index.ValueInt64()
		attr_index = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options{
		Text:  attr_text,
		Color: attr_color,
		Icon:  attr_icon,
		Index: attr_index,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap struct {
	Type    types.String                                                                         `tfsdk:"type"`
	Options *map[string]PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap_Options `tfsdk:"options"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap struct {
		Type    string      `json:"type"`
		Options interface{} `json:"options,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap{
		Type:    attr_type,
		Options: attr_options,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result struct {
	Text  types.String `tfsdk:"text"`
	Color types.String `tfsdk:"color"`
	Icon  types.String `tfsdk:"icon"`
	Index types.Int64  `tfsdk:"index"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result struct {
		Text  *string `json:"text,omitempty"`
		Color *string `json:"color,omitempty"`
		Icon  *string `json:"icon,omitempty"`
		Index *int64  `json:"index,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_text *string
	if !m.Text.IsNull() && !m.Text.IsUnknown() {
		tmp := m.Text.ValueString()
		attr_text = &tmp
	}
	var attr_color *string
	if !m.Color.IsNull() && !m.Color.IsUnknown() {
		tmp := m.Color.ValueString()
		attr_color = &tmp
	}
	var attr_icon *string
	if !m.Icon.IsNull() && !m.Icon.IsUnknown() {
		tmp := m.Icon.ValueString()
		attr_icon = &tmp
	}
	var attr_index *int64
	if !m.Index.IsNull() && !m.Index.IsUnknown() {
		tmp := m.Index.ValueInt64()
		attr_index = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result{
		Text:  attr_text,
		Color: attr_color,
		Icon:  attr_icon,
		Index: attr_index,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options struct {
	From   types.Float64                                                                    `tfsdk:"from"`
	To     types.Float64                                                                    `tfsdk:"to"`
	Result *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options_Result `tfsdk:"result"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options struct {
		From   float64     `json:"from"`
		To     float64     `json:"to"`
		Result interface{} `json:"result,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_from := m.From.ValueFloat64()
	attr_to := m.To.ValueFloat64()
	var attr_result interface{}
	if m.Result != nil {
		attr_result = m.Result
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options{
		From:   attr_from,
		To:     attr_to,
		Result: attr_result,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap struct {
	Type    types.String                                                              `tfsdk:"type"`
	Options *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap_Options `tfsdk:"options"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap struct {
		Type    string      `json:"type"`
		Options interface{} `json:"options,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap{
		Type:    attr_type,
		Options: attr_options,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result struct {
	Text  types.String `tfsdk:"text"`
	Color types.String `tfsdk:"color"`
	Icon  types.String `tfsdk:"icon"`
	Index types.Int64  `tfsdk:"index"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result struct {
		Text  *string `json:"text,omitempty"`
		Color *string `json:"color,omitempty"`
		Icon  *string `json:"icon,omitempty"`
		Index *int64  `json:"index,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_text *string
	if !m.Text.IsNull() && !m.Text.IsUnknown() {
		tmp := m.Text.ValueString()
		attr_text = &tmp
	}
	var attr_color *string
	if !m.Color.IsNull() && !m.Color.IsUnknown() {
		tmp := m.Color.ValueString()
		attr_color = &tmp
	}
	var attr_icon *string
	if !m.Icon.IsNull() && !m.Icon.IsUnknown() {
		tmp := m.Icon.ValueString()
		attr_icon = &tmp
	}
	var attr_index *int64
	if !m.Index.IsNull() && !m.Index.IsUnknown() {
		tmp := m.Index.ValueInt64()
		attr_index = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result{
		Text:  attr_text,
		Color: attr_color,
		Icon:  attr_icon,
		Index: attr_index,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options struct {
	Pattern types.String                                                                     `tfsdk:"pattern"`
	Result  *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options_Result `tfsdk:"result"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options struct {
		Pattern string      `json:"pattern"`
		Result  interface{} `json:"result,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pattern := m.Pattern.ValueString()
	var attr_result interface{}
	if m.Result != nil {
		attr_result = m.Result
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options{
		Pattern: attr_pattern,
		Result:  attr_result,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap struct {
	Type    types.String                                                              `tfsdk:"type"`
	Options *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap_Options `tfsdk:"options"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap struct {
		Type    string      `json:"type"`
		Options interface{} `json:"options,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap{
		Type:    attr_type,
		Options: attr_options,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result struct {
	Text  types.String `tfsdk:"text"`
	Color types.String `tfsdk:"color"`
	Icon  types.String `tfsdk:"icon"`
	Index types.Int64  `tfsdk:"index"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result struct {
		Text  *string `json:"text,omitempty"`
		Color *string `json:"color,omitempty"`
		Icon  *string `json:"icon,omitempty"`
		Index *int64  `json:"index,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_text *string
	if !m.Text.IsNull() && !m.Text.IsUnknown() {
		tmp := m.Text.ValueString()
		attr_text = &tmp
	}
	var attr_color *string
	if !m.Color.IsNull() && !m.Color.IsUnknown() {
		tmp := m.Color.ValueString()
		attr_color = &tmp
	}
	var attr_icon *string
	if !m.Icon.IsNull() && !m.Icon.IsUnknown() {
		tmp := m.Icon.ValueString()
		attr_icon = &tmp
	}
	var attr_index *int64
	if !m.Index.IsNull() && !m.Index.IsUnknown() {
		tmp := m.Index.ValueInt64()
		attr_index = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result{
		Text:  attr_text,
		Color: attr_color,
		Icon:  attr_icon,
		Index: attr_index,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options struct {
	Match   types.String                                                                            `tfsdk:"match"`
	Pattern types.String                                                                            `tfsdk:"pattern"`
	Result  *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options_Result `tfsdk:"result"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options struct {
		Match   string      `json:"match"`
		Pattern string      `json:"pattern"`
		Result  interface{} `json:"result,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_match := m.Match.ValueString()
	attr_pattern := m.Pattern.ValueString()
	var attr_result interface{}
	if m.Result != nil {
		attr_result = m.Result
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options{
		Match:   attr_match,
		Pattern: attr_pattern,
		Result:  attr_result,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap struct {
	Type    types.String                                                                     `tfsdk:"type"`
	Options *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap_Options `tfsdk:"options"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap struct {
		Type    string      `json:"type"`
		Options interface{} `json:"options,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap{
		Type:    attr_type,
		Options: attr_options,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings struct {
	ValueMap        *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_ValueMap        `tfsdk:"value_map"`
	RangeMap        *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RangeMap        `tfsdk:"range_map"`
	RegexMap        *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_RegexMap        `tfsdk:"regex_map"`
	SpecialValueMap *PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings_SpecialValueMap `tfsdk:"special_value_map"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings) MarshalJSON() ([]byte, error) {
	var json_PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings interface{}
	m = m.ApplyDefaults()
	if m.ValueMap != nil {
		json_PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings = m.ValueMap
	}
	if m.RangeMap != nil {
		json_PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings = m.RangeMap
	}
	if m.RegexMap != nil {
		json_PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings = m.RegexMap
	}
	if m.SpecialValueMap != nil {
		json_PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings = m.SpecialValueMap
	}

	return json.Marshal(json_PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
	Value types.Float64 `tfsdk:"value"`
	Color types.String  `tfsdk:"color"`
	Index types.Int64   `tfsdk:"index"`
	State types.String  `tfsdk:"state"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
		Value *float64 `json:"value,omitempty"`
		Color string   `json:"color"`
		Index *int64   `json:"index,omitempty"`
		State *string  `json:"state,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_value *float64
	if !m.Value.IsNull() && !m.Value.IsUnknown() {
		tmp := m.Value.ValueFloat64()
		attr_value = &tmp
	}
	attr_color := m.Color.ValueString()
	var attr_index *int64
	if !m.Index.IsNull() && !m.Index.IsUnknown() {
		tmp := m.Index.ValueInt64()
		attr_index = &tmp
	}
	var attr_state *string
	if !m.State.IsNull() && !m.State.IsUnknown() {
		tmp := m.State.ValueString()
		attr_state = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps{
		Value: attr_value,
		Color: attr_color,
		Index: attr_index,
		State: attr_state,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds struct {
	Mode  types.String                                                      `tfsdk:"mode"`
	Steps []PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds_Steps `tfsdk:"steps"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds struct {
		Mode  string        `json:"mode"`
		Steps []interface{} `json:"steps,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_steps := []interface{}{}
	for _, v := range m.Steps {
		attr_steps = append(attr_steps, v)
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds{
		Mode:  attr_mode,
		Steps: attr_steps,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Color struct {
	Mode       types.String `tfsdk:"mode"`
	FixedColor types.String `tfsdk:"fixed_color"`
	SeriesBy   types.String `tfsdk:"series_by"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Color) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Color struct {
		Mode       string  `json:"mode"`
		FixedColor *string `json:"fixedColor,omitempty"`
		SeriesBy   *string `json:"seriesBy,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	var attr_fixedcolor *string
	if !m.FixedColor.IsNull() && !m.FixedColor.IsUnknown() {
		tmp := m.FixedColor.ValueString()
		attr_fixedcolor = &tmp
	}
	var attr_seriesby *string
	if !m.SeriesBy.IsNull() && !m.SeriesBy.IsUnknown() {
		tmp := m.SeriesBy.ValueString()
		attr_seriesby = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Color{
		Mode:       attr_mode,
		FixedColor: attr_fixedcolor,
		SeriesBy:   attr_seriesby,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Color) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Color {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle struct {
	Mode types.String `tfsdk:"mode"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle struct {
		Mode string `json:"mode"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle{
		Mode: attr_mode,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle struct {
	Fill types.String `tfsdk:"fill"`
	Dash types.List   `tfsdk:"dash"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle struct {
		Fill *string   `json:"fill,omitempty"`
		Dash []float64 `json:"dash,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_fill *string
	if !m.Fill.IsNull() && !m.Fill.IsUnknown() {
		tmp := m.Fill.ValueString()
		attr_fill = &tmp
	}
	attr_dash := []float64{}
	for _, v := range m.Dash.Elements() {
		attr_dash = append(attr_dash, v.(types.Float64).ValueFloat64())
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle{
		Fill: attr_fill,
		Dash: attr_dash,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle {
	if len(m.Dash.Elements()) == 0 {
		m.Dash, _ = types.ListValue(types.Float64Type, []attr.Value{})
	}
	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution struct {
	Type            types.String  `tfsdk:"type"`
	Log             types.Float64 `tfsdk:"log"`
	LinearThreshold types.Float64 `tfsdk:"linear_threshold"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution struct {
		Type            string   `json:"type"`
		Log             *float64 `json:"log,omitempty"`
		LinearThreshold *float64 `json:"linearThreshold,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_log *float64
	if !m.Log.IsNull() && !m.Log.IsUnknown() {
		tmp := m.Log.ValueFloat64()
		attr_log = &tmp
	}
	var attr_linearthreshold *float64
	if !m.LinearThreshold.IsNull() && !m.LinearThreshold.IsUnknown() {
		tmp := m.LinearThreshold.ValueFloat64()
		attr_linearthreshold = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution{
		Type:            attr_type,
		Log:             attr_log,
		LinearThreshold: attr_linearthreshold,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking struct {
	Mode  types.String `tfsdk:"mode"`
	Group types.String `tfsdk:"group"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking struct {
		Mode  *string `json:"mode,omitempty"`
		Group *string `json:"group,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_mode *string
	if !m.Mode.IsNull() && !m.Mode.IsUnknown() {
		tmp := m.Mode.ValueString()
		attr_mode = &tmp
	}
	var attr_group *string
	if !m.Group.IsNull() && !m.Group.IsUnknown() {
		tmp := m.Group.ValueString()
		attr_group = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking{
		Mode:  attr_mode,
		Group: attr_group,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
	Tooltip types.Bool `tfsdk:"tooltip"`
	Legend  types.Bool `tfsdk:"legend"`
	Viz     types.Bool `tfsdk:"viz"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
		Tooltip bool `json:"tooltip"`
		Legend  bool `json:"legend"`
		Viz     bool `json:"viz"`
	}

	m = m.ApplyDefaults()
	attr_tooltip := m.Tooltip.ValueBool()
	attr_legend := m.Legend.ValueBool()
	attr_viz := m.Viz.ValueBool()

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom{
		Tooltip: attr_tooltip,
		Legend:  attr_legend,
		Viz:     attr_viz,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults_Custom struct {
	DrawStyle         types.String                                                             `tfsdk:"draw_style"`
	GradientMode      types.String                                                             `tfsdk:"gradient_mode"`
	ThresholdsStyle   *PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle   `tfsdk:"thresholds_style"`
	LineColor         types.String                                                             `tfsdk:"line_color"`
	LineWidth         types.Float64                                                            `tfsdk:"line_width"`
	LineInterpolation types.String                                                             `tfsdk:"line_interpolation"`
	LineStyle         *PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_LineStyle         `tfsdk:"line_style"`
	FillColor         types.String                                                             `tfsdk:"fill_color"`
	FillOpacity       types.Float64                                                            `tfsdk:"fill_opacity"`
	ShowPoints        types.String                                                             `tfsdk:"show_points"`
	PointSize         types.Float64                                                            `tfsdk:"point_size"`
	PointColor        types.String                                                             `tfsdk:"point_color"`
	AxisPlacement     types.String                                                             `tfsdk:"axis_placement"`
	AxisColorMode     types.String                                                             `tfsdk:"axis_color_mode"`
	AxisLabel         types.String                                                             `tfsdk:"axis_label"`
	AxisWidth         types.Float64                                                            `tfsdk:"axis_width"`
	AxisSoftMin       types.Float64                                                            `tfsdk:"axis_soft_min"`
	AxisSoftMax       types.Float64                                                            `tfsdk:"axis_soft_max"`
	AxisGridShow      types.Bool                                                               `tfsdk:"axis_grid_show"`
	ScaleDistribution *PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution `tfsdk:"scale_distribution"`
	BarAlignment      types.Int64                                                              `tfsdk:"bar_alignment"`
	BarWidthFactor    types.Float64                                                            `tfsdk:"bar_width_factor"`
	Stacking          *PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_Stacking          `tfsdk:"stacking"`
	HideFrom          *PanelTrendDataSourceModel_FieldConfig_Defaults_Custom_HideFrom          `tfsdk:"hide_from"`
	Transform         types.String                                                             `tfsdk:"transform"`
	SpanNulls         types.String                                                             `tfsdk:"span_nulls"`
	FillBelowTo       types.String                                                             `tfsdk:"fill_below_to"`
	PointSymbol       types.String                                                             `tfsdk:"point_symbol"`
	AxisCenteredZero  types.Bool                                                               `tfsdk:"axis_centered_zero"`
	BarMaxWidth       types.Float64                                                            `tfsdk:"bar_max_width"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom) GetAttrSpanNulls() interface{} {
	var attr interface{}
	var err error

	attr, err = strconv.ParseBool(m.SpanNulls.ValueString())
	if err == nil {
		return attr
	}
	attr, err = strconv.ParseFloat(m.SpanNulls.ValueString(), 64)
	if err == nil {
		return attr
	}

	return m.SpanNulls.ValueString()
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom struct {
		DrawStyle         *string     `json:"drawStyle,omitempty"`
		GradientMode      *string     `json:"gradientMode,omitempty"`
		ThresholdsStyle   interface{} `json:"thresholdsStyle,omitempty"`
		LineColor         *string     `json:"lineColor,omitempty"`
		LineWidth         *float64    `json:"lineWidth,omitempty"`
		LineInterpolation *string     `json:"lineInterpolation,omitempty"`
		LineStyle         interface{} `json:"lineStyle,omitempty"`
		FillColor         *string     `json:"fillColor,omitempty"`
		FillOpacity       *float64    `json:"fillOpacity,omitempty"`
		ShowPoints        *string     `json:"showPoints,omitempty"`
		PointSize         *float64    `json:"pointSize,omitempty"`
		PointColor        *string     `json:"pointColor,omitempty"`
		AxisPlacement     *string     `json:"axisPlacement,omitempty"`
		AxisColorMode     *string     `json:"axisColorMode,omitempty"`
		AxisLabel         *string     `json:"axisLabel,omitempty"`
		AxisWidth         *float64    `json:"axisWidth,omitempty"`
		AxisSoftMin       *float64    `json:"axisSoftMin,omitempty"`
		AxisSoftMax       *float64    `json:"axisSoftMax,omitempty"`
		AxisGridShow      *bool       `json:"axisGridShow,omitempty"`
		ScaleDistribution interface{} `json:"scaleDistribution,omitempty"`
		BarAlignment      *int64      `json:"barAlignment,omitempty"`
		BarWidthFactor    *float64    `json:"barWidthFactor,omitempty"`
		Stacking          interface{} `json:"stacking,omitempty"`
		HideFrom          interface{} `json:"hideFrom,omitempty"`
		Transform         *string     `json:"transform,omitempty"`
		SpanNulls         interface{} `json:"spanNulls,omitempty"`
		FillBelowTo       *string     `json:"fillBelowTo,omitempty"`
		PointSymbol       *string     `json:"pointSymbol,omitempty"`
		AxisCenteredZero  *bool       `json:"axisCenteredZero,omitempty"`
		BarMaxWidth       *float64    `json:"barMaxWidth,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_drawstyle *string
	if !m.DrawStyle.IsNull() && !m.DrawStyle.IsUnknown() {
		tmp := m.DrawStyle.ValueString()
		attr_drawstyle = &tmp
	}
	var attr_gradientmode *string
	if !m.GradientMode.IsNull() && !m.GradientMode.IsUnknown() {
		tmp := m.GradientMode.ValueString()
		attr_gradientmode = &tmp
	}
	var attr_thresholdsstyle interface{}
	if m.ThresholdsStyle != nil {
		attr_thresholdsstyle = m.ThresholdsStyle
	}
	var attr_linecolor *string
	if !m.LineColor.IsNull() && !m.LineColor.IsUnknown() {
		tmp := m.LineColor.ValueString()
		attr_linecolor = &tmp
	}
	var attr_linewidth *float64
	if !m.LineWidth.IsNull() && !m.LineWidth.IsUnknown() {
		tmp := m.LineWidth.ValueFloat64()
		attr_linewidth = &tmp
	}
	var attr_lineinterpolation *string
	if !m.LineInterpolation.IsNull() && !m.LineInterpolation.IsUnknown() {
		tmp := m.LineInterpolation.ValueString()
		attr_lineinterpolation = &tmp
	}
	var attr_linestyle interface{}
	if m.LineStyle != nil {
		attr_linestyle = m.LineStyle
	}
	var attr_fillcolor *string
	if !m.FillColor.IsNull() && !m.FillColor.IsUnknown() {
		tmp := m.FillColor.ValueString()
		attr_fillcolor = &tmp
	}
	var attr_fillopacity *float64
	if !m.FillOpacity.IsNull() && !m.FillOpacity.IsUnknown() {
		tmp := m.FillOpacity.ValueFloat64()
		attr_fillopacity = &tmp
	}
	var attr_showpoints *string
	if !m.ShowPoints.IsNull() && !m.ShowPoints.IsUnknown() {
		tmp := m.ShowPoints.ValueString()
		attr_showpoints = &tmp
	}
	var attr_pointsize *float64
	if !m.PointSize.IsNull() && !m.PointSize.IsUnknown() {
		tmp := m.PointSize.ValueFloat64()
		attr_pointsize = &tmp
	}
	var attr_pointcolor *string
	if !m.PointColor.IsNull() && !m.PointColor.IsUnknown() {
		tmp := m.PointColor.ValueString()
		attr_pointcolor = &tmp
	}
	var attr_axisplacement *string
	if !m.AxisPlacement.IsNull() && !m.AxisPlacement.IsUnknown() {
		tmp := m.AxisPlacement.ValueString()
		attr_axisplacement = &tmp
	}
	var attr_axiscolormode *string
	if !m.AxisColorMode.IsNull() && !m.AxisColorMode.IsUnknown() {
		tmp := m.AxisColorMode.ValueString()
		attr_axiscolormode = &tmp
	}
	var attr_axislabel *string
	if !m.AxisLabel.IsNull() && !m.AxisLabel.IsUnknown() {
		tmp := m.AxisLabel.ValueString()
		attr_axislabel = &tmp
	}
	var attr_axiswidth *float64
	if !m.AxisWidth.IsNull() && !m.AxisWidth.IsUnknown() {
		tmp := m.AxisWidth.ValueFloat64()
		attr_axiswidth = &tmp
	}
	var attr_axissoftmin *float64
	if !m.AxisSoftMin.IsNull() && !m.AxisSoftMin.IsUnknown() {
		tmp := m.AxisSoftMin.ValueFloat64()
		attr_axissoftmin = &tmp
	}
	var attr_axissoftmax *float64
	if !m.AxisSoftMax.IsNull() && !m.AxisSoftMax.IsUnknown() {
		tmp := m.AxisSoftMax.ValueFloat64()
		attr_axissoftmax = &tmp
	}
	var attr_axisgridshow *bool
	if !m.AxisGridShow.IsNull() && !m.AxisGridShow.IsUnknown() {
		tmp := m.AxisGridShow.ValueBool()
		attr_axisgridshow = &tmp
	}
	var attr_scaledistribution interface{}
	if m.ScaleDistribution != nil {
		attr_scaledistribution = m.ScaleDistribution
	}
	var attr_baralignment *int64
	if !m.BarAlignment.IsNull() && !m.BarAlignment.IsUnknown() {
		tmp := m.BarAlignment.ValueInt64()
		attr_baralignment = &tmp
	}
	var attr_barwidthfactor *float64
	if !m.BarWidthFactor.IsNull() && !m.BarWidthFactor.IsUnknown() {
		tmp := m.BarWidthFactor.ValueFloat64()
		attr_barwidthfactor = &tmp
	}
	var attr_stacking interface{}
	if m.Stacking != nil {
		attr_stacking = m.Stacking
	}
	var attr_hidefrom interface{}
	if m.HideFrom != nil {
		attr_hidefrom = m.HideFrom
	}
	var attr_transform *string
	if !m.Transform.IsNull() && !m.Transform.IsUnknown() {
		tmp := m.Transform.ValueString()
		attr_transform = &tmp
	}
	attr_spannulls := m.GetAttrSpanNulls()
	var attr_fillbelowto *string
	if !m.FillBelowTo.IsNull() && !m.FillBelowTo.IsUnknown() {
		tmp := m.FillBelowTo.ValueString()
		attr_fillbelowto = &tmp
	}
	var attr_pointsymbol *string
	if !m.PointSymbol.IsNull() && !m.PointSymbol.IsUnknown() {
		tmp := m.PointSymbol.ValueString()
		attr_pointsymbol = &tmp
	}
	var attr_axiscenteredzero *bool
	if !m.AxisCenteredZero.IsNull() && !m.AxisCenteredZero.IsUnknown() {
		tmp := m.AxisCenteredZero.ValueBool()
		attr_axiscenteredzero = &tmp
	}
	var attr_barmaxwidth *float64
	if !m.BarMaxWidth.IsNull() && !m.BarMaxWidth.IsUnknown() {
		tmp := m.BarMaxWidth.ValueFloat64()
		attr_barmaxwidth = &tmp
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults_Custom{
		DrawStyle:         attr_drawstyle,
		GradientMode:      attr_gradientmode,
		ThresholdsStyle:   attr_thresholdsstyle,
		LineColor:         attr_linecolor,
		LineWidth:         attr_linewidth,
		LineInterpolation: attr_lineinterpolation,
		LineStyle:         attr_linestyle,
		FillColor:         attr_fillcolor,
		FillOpacity:       attr_fillopacity,
		ShowPoints:        attr_showpoints,
		PointSize:         attr_pointsize,
		PointColor:        attr_pointcolor,
		AxisPlacement:     attr_axisplacement,
		AxisColorMode:     attr_axiscolormode,
		AxisLabel:         attr_axislabel,
		AxisWidth:         attr_axiswidth,
		AxisSoftMin:       attr_axissoftmin,
		AxisSoftMax:       attr_axissoftmax,
		AxisGridShow:      attr_axisgridshow,
		ScaleDistribution: attr_scaledistribution,
		BarAlignment:      attr_baralignment,
		BarWidthFactor:    attr_barwidthfactor,
		Stacking:          attr_stacking,
		HideFrom:          attr_hidefrom,
		Transform:         attr_transform,
		SpanNulls:         attr_spannulls,
		FillBelowTo:       attr_fillbelowto,
		PointSymbol:       attr_pointsymbol,
		AxisCenteredZero:  attr_axiscenteredzero,
		BarMaxWidth:       attr_barmaxwidth,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults_Custom) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults_Custom {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Defaults struct {
	DisplayName       types.String                                               `tfsdk:"display_name"`
	DisplayNameFromDS types.String                                               `tfsdk:"display_name_from_ds"`
	Description       types.String                                               `tfsdk:"description"`
	Path              types.String                                               `tfsdk:"path"`
	Writeable         types.Bool                                                 `tfsdk:"writeable"`
	Filterable        types.Bool                                                 `tfsdk:"filterable"`
	Unit              types.String                                               `tfsdk:"unit"`
	Decimals          types.Float64                                              `tfsdk:"decimals"`
	Min               types.Float64                                              `tfsdk:"min"`
	Max               types.Float64                                              `tfsdk:"max"`
	Mappings          []PanelTrendDataSourceModel_FieldConfig_Defaults_Mappings  `tfsdk:"mappings"`
	Thresholds        *PanelTrendDataSourceModel_FieldConfig_Defaults_Thresholds `tfsdk:"thresholds"`
	Color             *PanelTrendDataSourceModel_FieldConfig_Defaults_Color      `tfsdk:"color"`
	NoValue           types.String                                               `tfsdk:"no_value"`
	Custom            *PanelTrendDataSourceModel_FieldConfig_Defaults_Custom     `tfsdk:"custom"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Defaults struct {
		DisplayName       *string       `json:"displayName,omitempty"`
		DisplayNameFromDS *string       `json:"displayNameFromDS,omitempty"`
		Description       *string       `json:"description,omitempty"`
		Path              *string       `json:"path,omitempty"`
		Writeable         *bool         `json:"writeable,omitempty"`
		Filterable        *bool         `json:"filterable,omitempty"`
		Unit              *string       `json:"unit,omitempty"`
		Decimals          *float64      `json:"decimals,omitempty"`
		Min               *float64      `json:"min,omitempty"`
		Max               *float64      `json:"max,omitempty"`
		Mappings          []interface{} `json:"mappings,omitempty"`
		Thresholds        interface{}   `json:"thresholds,omitempty"`
		Color             interface{}   `json:"color,omitempty"`
		NoValue           *string       `json:"noValue,omitempty"`
		Custom            interface{}   `json:"custom,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_displayname *string
	if !m.DisplayName.IsNull() && !m.DisplayName.IsUnknown() {
		tmp := m.DisplayName.ValueString()
		attr_displayname = &tmp
	}
	var attr_displaynamefromds *string
	if !m.DisplayNameFromDS.IsNull() && !m.DisplayNameFromDS.IsUnknown() {
		tmp := m.DisplayNameFromDS.ValueString()
		attr_displaynamefromds = &tmp
	}
	var attr_description *string
	if !m.Description.IsNull() && !m.Description.IsUnknown() {
		tmp := m.Description.ValueString()
		attr_description = &tmp
	}
	var attr_path *string
	if !m.Path.IsNull() && !m.Path.IsUnknown() {
		tmp := m.Path.ValueString()
		attr_path = &tmp
	}
	var attr_writeable *bool
	if !m.Writeable.IsNull() && !m.Writeable.IsUnknown() {
		tmp := m.Writeable.ValueBool()
		attr_writeable = &tmp
	}
	var attr_filterable *bool
	if !m.Filterable.IsNull() && !m.Filterable.IsUnknown() {
		tmp := m.Filterable.ValueBool()
		attr_filterable = &tmp
	}
	var attr_unit *string
	if !m.Unit.IsNull() && !m.Unit.IsUnknown() {
		tmp := m.Unit.ValueString()
		attr_unit = &tmp
	}
	var attr_decimals *float64
	if !m.Decimals.IsNull() && !m.Decimals.IsUnknown() {
		tmp := m.Decimals.ValueFloat64()
		attr_decimals = &tmp
	}
	var attr_min *float64
	if !m.Min.IsNull() && !m.Min.IsUnknown() {
		tmp := m.Min.ValueFloat64()
		attr_min = &tmp
	}
	var attr_max *float64
	if !m.Max.IsNull() && !m.Max.IsUnknown() {
		tmp := m.Max.ValueFloat64()
		attr_max = &tmp
	}
	attr_mappings := []interface{}{}
	for _, v := range m.Mappings {
		attr_mappings = append(attr_mappings, v)
	}
	var attr_thresholds interface{}
	if m.Thresholds != nil {
		attr_thresholds = m.Thresholds
	}
	var attr_color interface{}
	if m.Color != nil {
		attr_color = m.Color
	}
	var attr_novalue *string
	if !m.NoValue.IsNull() && !m.NoValue.IsUnknown() {
		tmp := m.NoValue.ValueString()
		attr_novalue = &tmp
	}
	var attr_custom interface{}
	if m.Custom != nil {
		attr_custom = m.Custom
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Defaults{
		DisplayName:       attr_displayname,
		DisplayNameFromDS: attr_displaynamefromds,
		Description:       attr_description,
		Path:              attr_path,
		Writeable:         attr_writeable,
		Filterable:        attr_filterable,
		Unit:              attr_unit,
		Decimals:          attr_decimals,
		Min:               attr_min,
		Max:               attr_max,
		Mappings:          attr_mappings,
		Thresholds:        attr_thresholds,
		Color:             attr_color,
		NoValue:           attr_novalue,
		Custom:            attr_custom,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Defaults) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Defaults {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Overrides_Matcher struct {
}

func (m PanelTrendDataSourceModel_FieldConfig_Overrides_Matcher) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Overrides_Matcher struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Overrides_Matcher{}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Overrides_Matcher) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Overrides_Matcher {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Overrides_Properties struct {
}

func (m PanelTrendDataSourceModel_FieldConfig_Overrides_Properties) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Overrides_Properties struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Overrides_Properties{}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Overrides_Properties) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Overrides_Properties {

	return m
}

type PanelTrendDataSourceModel_FieldConfig_Overrides struct {
	Matcher    *PanelTrendDataSourceModel_FieldConfig_Overrides_Matcher     `tfsdk:"matcher"`
	Properties []PanelTrendDataSourceModel_FieldConfig_Overrides_Properties `tfsdk:"properties"`
}

func (m PanelTrendDataSourceModel_FieldConfig_Overrides) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig_Overrides struct {
		Matcher    interface{}   `json:"matcher,omitempty"`
		Properties []interface{} `json:"properties,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_matcher interface{}
	if m.Matcher != nil {
		attr_matcher = m.Matcher
	}
	attr_properties := []interface{}{}
	for _, v := range m.Properties {
		attr_properties = append(attr_properties, v)
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig_Overrides{
		Matcher:    attr_matcher,
		Properties: attr_properties,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig_Overrides) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig_Overrides {

	return m
}

type PanelTrendDataSourceModel_FieldConfig struct {
	Defaults  *PanelTrendDataSourceModel_FieldConfig_Defaults   `tfsdk:"defaults"`
	Overrides []PanelTrendDataSourceModel_FieldConfig_Overrides `tfsdk:"overrides"`
}

func (m PanelTrendDataSourceModel_FieldConfig) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel_FieldConfig struct {
		Defaults  interface{}   `json:"defaults,omitempty"`
		Overrides []interface{} `json:"overrides,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_defaults interface{}
	if m.Defaults != nil {
		attr_defaults = m.Defaults
	}
	attr_overrides := []interface{}{}
	for _, v := range m.Overrides {
		attr_overrides = append(attr_overrides, v)
	}

	model := &jsonPanelTrendDataSourceModel_FieldConfig{
		Defaults:  attr_defaults,
		Overrides: attr_overrides,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel_FieldConfig) ApplyDefaults() PanelTrendDataSourceModel_FieldConfig {

	return m
}

type PanelTrendDataSourceModel struct {
	RenderedJSON    types.String                                `tfsdk:"rendered_json"`
	Type            types.String                                `tfsdk:"type"`
	PluginVersion   types.String                                `tfsdk:"plugin_version"`
	Tags            types.List                                  `tfsdk:"tags"`
	Targets         types.List                                  `tfsdk:"targets"`
	Title           types.String                                `tfsdk:"title"`
	Description     types.String                                `tfsdk:"description"`
	Transparent     types.Bool                                  `tfsdk:"transparent"`
	Datasource      *PanelTrendDataSourceModel_Datasource       `tfsdk:"datasource"`
	GridPos         *PanelTrendDataSourceModel_GridPos          `tfsdk:"grid_pos"`
	Links           []PanelTrendDataSourceModel_Links           `tfsdk:"links"`
	Repeat          types.String                                `tfsdk:"repeat"`
	RepeatDirection types.String                                `tfsdk:"repeat_direction"`
	RepeatPanelId   types.Int64                                 `tfsdk:"repeat_panel_id"`
	MaxDataPoints   types.Float64                               `tfsdk:"max_data_points"`
	Transformations []PanelTrendDataSourceModel_Transformations `tfsdk:"transformations"`
	Interval        types.String                                `tfsdk:"interval"`
	TimeFrom        types.String                                `tfsdk:"time_from"`
	TimeShift       types.String                                `tfsdk:"time_shift"`
	LibraryPanel    *PanelTrendDataSourceModel_LibraryPanel     `tfsdk:"library_panel"`
	Options         *PanelTrendDataSourceModel_Options          `tfsdk:"options"`
	FieldConfig     *PanelTrendDataSourceModel_FieldConfig      `tfsdk:"field_config"`
}

func (m PanelTrendDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonPanelTrendDataSourceModel struct {
		Type            string        `json:"type"`
		PluginVersion   *string       `json:"pluginVersion,omitempty"`
		Tags            []string      `json:"tags,omitempty"`
		Targets         []string      `json:"targets,omitempty"`
		Title           *string       `json:"title,omitempty"`
		Description     *string       `json:"description,omitempty"`
		Transparent     bool          `json:"transparent"`
		Datasource      interface{}   `json:"datasource,omitempty"`
		GridPos         interface{}   `json:"gridPos,omitempty"`
		Links           []interface{} `json:"links,omitempty"`
		Repeat          *string       `json:"repeat,omitempty"`
		RepeatDirection string        `json:"repeatDirection"`
		RepeatPanelId   *int64        `json:"repeatPanelId,omitempty"`
		MaxDataPoints   *float64      `json:"maxDataPoints,omitempty"`
		Transformations []interface{} `json:"transformations,omitempty"`
		Interval        *string       `json:"interval,omitempty"`
		TimeFrom        *string       `json:"timeFrom,omitempty"`
		TimeShift       *string       `json:"timeShift,omitempty"`
		LibraryPanel    interface{}   `json:"libraryPanel,omitempty"`
		Options         interface{}   `json:"options,omitempty"`
		FieldConfig     interface{}   `json:"fieldConfig,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_pluginversion *string
	if !m.PluginVersion.IsNull() && !m.PluginVersion.IsUnknown() {
		tmp := m.PluginVersion.ValueString()
		attr_pluginversion = &tmp
	}
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_targets := []string{}
	for _, v := range m.Targets.Elements() {
		attr_targets = append(attr_targets, v.(types.String).ValueString())
	}
	var attr_title *string
	if !m.Title.IsNull() && !m.Title.IsUnknown() {
		tmp := m.Title.ValueString()
		attr_title = &tmp
	}
	var attr_description *string
	if !m.Description.IsNull() && !m.Description.IsUnknown() {
		tmp := m.Description.ValueString()
		attr_description = &tmp
	}
	attr_transparent := m.Transparent.ValueBool()
	var attr_datasource interface{}
	if m.Datasource != nil {
		attr_datasource = m.Datasource
	}
	var attr_gridpos interface{}
	if m.GridPos != nil {
		attr_gridpos = m.GridPos
	}
	attr_links := []interface{}{}
	for _, v := range m.Links {
		attr_links = append(attr_links, v)
	}
	var attr_repeat *string
	if !m.Repeat.IsNull() && !m.Repeat.IsUnknown() {
		tmp := m.Repeat.ValueString()
		attr_repeat = &tmp
	}
	attr_repeatdirection := m.RepeatDirection.ValueString()
	var attr_repeatpanelid *int64
	if !m.RepeatPanelId.IsNull() && !m.RepeatPanelId.IsUnknown() {
		tmp := m.RepeatPanelId.ValueInt64()
		attr_repeatpanelid = &tmp
	}
	var attr_maxdatapoints *float64
	if !m.MaxDataPoints.IsNull() && !m.MaxDataPoints.IsUnknown() {
		tmp := m.MaxDataPoints.ValueFloat64()
		attr_maxdatapoints = &tmp
	}
	attr_transformations := []interface{}{}
	for _, v := range m.Transformations {
		attr_transformations = append(attr_transformations, v)
	}
	var attr_interval *string
	if !m.Interval.IsNull() && !m.Interval.IsUnknown() {
		tmp := m.Interval.ValueString()
		attr_interval = &tmp
	}
	var attr_timefrom *string
	if !m.TimeFrom.IsNull() && !m.TimeFrom.IsUnknown() {
		tmp := m.TimeFrom.ValueString()
		attr_timefrom = &tmp
	}
	var attr_timeshift *string
	if !m.TimeShift.IsNull() && !m.TimeShift.IsUnknown() {
		tmp := m.TimeShift.ValueString()
		attr_timeshift = &tmp
	}
	var attr_librarypanel interface{}
	if m.LibraryPanel != nil {
		attr_librarypanel = m.LibraryPanel
	}
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}
	var attr_fieldconfig interface{}
	if m.FieldConfig != nil {
		attr_fieldconfig = m.FieldConfig
	}

	model := &jsonPanelTrendDataSourceModel{
		Type:            attr_type,
		PluginVersion:   attr_pluginversion,
		Tags:            attr_tags,
		Targets:         attr_targets,
		Title:           attr_title,
		Description:     attr_description,
		Transparent:     attr_transparent,
		Datasource:      attr_datasource,
		GridPos:         attr_gridpos,
		Links:           attr_links,
		Repeat:          attr_repeat,
		RepeatDirection: attr_repeatdirection,
		RepeatPanelId:   attr_repeatpanelid,
		MaxDataPoints:   attr_maxdatapoints,
		Transformations: attr_transformations,
		Interval:        attr_interval,
		TimeFrom:        attr_timefrom,
		TimeShift:       attr_timeshift,
		LibraryPanel:    attr_librarypanel,
		Options:         attr_options,
		FieldConfig:     attr_fieldconfig,
	}
	return json.Marshal(model)
}

func (m PanelTrendDataSourceModel) ApplyDefaults() PanelTrendDataSourceModel {
	if m.Type.IsNull() {
		m.Type = types.StringValue(`trend`)
	}
	if len(m.Tags.Elements()) == 0 {
		m.Tags, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if len(m.Targets.Elements()) == 0 {
		m.Targets, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if m.Transparent.IsNull() {
		m.Transparent = types.BoolValue(false)
	}
	if m.RepeatDirection.IsNull() {
		m.RepeatDirection = types.StringValue(`h`)
	}
	return m
}

func (d *PanelTrendDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_panel_trend"
}

func (d *PanelTrendDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"type": schema.StringAttribute{
				MarkdownDescription: `The panel plugin type id. May not be empty. Defaults to "trend".`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"plugin_version": schema.StringAttribute{
				MarkdownDescription: `FIXME this almost certainly has to be changed in favor of scuemata versions`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"targets": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Panel title.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transparent": schema.BoolAttribute{
				MarkdownDescription: `Whether to display the panel without a background. Defaults to false.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"datasource": schema.SingleNestedAttribute{
				MarkdownDescription: `The datasource used in all targets.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"grid_pos": schema.SingleNestedAttribute{
				MarkdownDescription: `Grid position.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"h": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 9.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"w": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 12.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"x": schema.Int64Attribute{
						MarkdownDescription: `Panel x. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"y": schema.Int64Attribute{
						MarkdownDescription: `Panel y. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"static": schema.BoolAttribute{
						MarkdownDescription: `Whether the panel is fixed within the grid`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"links": schema.ListNestedAttribute{
				MarkdownDescription: `Panel links.
TODO fill this out - seems there are a couple variants?`,
				Computed: false,
				Optional: true,
				Required: false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							MarkdownDescription: `Title to display with the link`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: `Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"icon": schema.StringAttribute{
							MarkdownDescription: `Icon name to be displayed with the link`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tooltip": schema.StringAttribute{
							MarkdownDescription: `Tooltip to display when the user hovers their mouse over it`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"url": schema.StringAttribute{
							MarkdownDescription: `Link URL. Only required/valid if the type is link`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tags": schema.ListAttribute{
							MarkdownDescription: `List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards`,
							Computed:            false,
							Optional:            true,
							Required:            false,
							ElementType:         types.StringType,
						},
						"as_dropdown": schema.BoolAttribute{
							MarkdownDescription: `If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards. Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"target_blank": schema.BoolAttribute{
							MarkdownDescription: `If true, the link will be opened in a new tab. Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"include_vars": schema.BoolAttribute{
							MarkdownDescription: `If true, includes current template variables values in the link as query params. Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"keep_time": schema.BoolAttribute{
							MarkdownDescription: `If true, includes current time range in the link as query params. Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"repeat": schema.StringAttribute{
				MarkdownDescription: `Name of template variable to repeat for.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"repeat_direction": schema.StringAttribute{
				MarkdownDescription: `Direction to repeat in if 'repeat' is set.
"h" for horizontal, "v" for vertical.
TODO this is probably optional. Defaults to "h".`,
				Computed: true,
				Optional: true,
				Required: false,
			},
			"repeat_panel_id": schema.Int64Attribute{
				MarkdownDescription: `Id of the repeating panel.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"max_data_points": schema.Float64Attribute{
				MarkdownDescription: `The maximum number of data points that the panel queries are retrieving.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transformations": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"disabled": schema.BoolAttribute{
							MarkdownDescription: `Disabled transformations are skipped`,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"filter": schema.SingleNestedAttribute{
							MarkdownDescription: `Optional frame matcher.  When missing it will be applied to all results`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"interval": schema.StringAttribute{
				MarkdownDescription: `The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.
This value must be formatted as a number followed by a valid time
identifier like: "40s", "3d", etc.
See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_from": schema.StringAttribute{
				MarkdownDescription: `Overrides the relative time range for individual panels,
which causes them to be different than what is selected in
the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different
time periods or days on the same dashboard.
The value is formatted as time operation like: now-5m (Last 5 minutes), now/d (the day so far),
now-5d/d(Last 5 days), now/w (This week so far), now-2y/y (Last 2 years).
Note: Panel time overrides have no effect when the dashboard’s time range is absolute.
See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_shift": schema.StringAttribute{
				MarkdownDescription: `Overrides the time range for individual panels by shifting its start and end relative to the time picker.
For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting 2h.
Note: Panel time overrides have no effect when the dashboard’s time range is absolute.
See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"library_panel": schema.SingleNestedAttribute{
				MarkdownDescription: `Dynamically load the panel`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"options": schema.SingleNestedAttribute{
				MarkdownDescription: `Identical to timeseries... except it does not have timezone settings`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"legend": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"display_mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"placement": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"show_legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"as_table": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"is_visible": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"sort_by": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"sort_desc": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"width": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"calcs": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.StringType,
							},
						},
					},
					"tooltip": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"sort": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},
					"x_field": schema.StringAttribute{
						MarkdownDescription: `Name of the x field to use (defaults to first number)`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"defaults": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								MarkdownDescription: `The display value for this field.  This supports template variables blank is auto`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"display_name_from_ds": schema.StringAttribute{
								MarkdownDescription: `This can be used by data sources that return and explicit naming structure for values and labels
When this property is configured, this value is used rather than the default naming strategy.`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"description": schema.StringAttribute{
								MarkdownDescription: `Human readable field metadata`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"path": schema.StringAttribute{
								MarkdownDescription: `An explicit path to the field in the datasource.  When the frame meta includes a path,
This will default to ${frame.meta.path}/${field.name}

When defined, this value can be used as an identifier within the datasource scope, and
may be used to update the results`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"writeable": schema.BoolAttribute{
								MarkdownDescription: `True if data source can write a value to the path.  Auth/authz are supported separately`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"filterable": schema.BoolAttribute{
								MarkdownDescription: `True if data source field supports ad-hoc filters`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"unit": schema.StringAttribute{
								MarkdownDescription: `Numeric Options`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"decimals": schema.Float64Attribute{
								MarkdownDescription: `Significant digits (for display)`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"min": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"max": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"mappings": schema.ListNestedAttribute{
								MarkdownDescription: `Convert input values into a display string`,
								Computed:            false,
								Optional:            true,
								Required:            false,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"value_map": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"type": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"options": schema.MapNestedAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"text": schema.StringAttribute{
																MarkdownDescription: ``,
																Computed:            false,
																Optional:            true,
																Required:            false,
															},
															"color": schema.StringAttribute{
																MarkdownDescription: ``,
																Computed:            false,
																Optional:            true,
																Required:            false,
															},
															"icon": schema.StringAttribute{
																MarkdownDescription: ``,
																Computed:            false,
																Optional:            true,
																Required:            false,
															},
															"index": schema.Int64Attribute{
																MarkdownDescription: ``,
																Computed:            false,
																Optional:            true,
																Required:            false,
															},
														},
													},
												},
											},
										},
										"range_map": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"type": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"options": schema.SingleNestedAttribute{
													MarkdownDescription: ``,
													Computed:            true,
													Optional:            true,
													Required:            false,
													Attributes: map[string]schema.Attribute{
														"from": schema.Float64Attribute{
															MarkdownDescription: `to and from are number | null in current ts, really not sure what to do`,
															Computed:            false,
															Optional:            false,
															Required:            true,
														},
														"to": schema.Float64Attribute{
															MarkdownDescription: ``,
															Computed:            false,
															Optional:            false,
															Required:            true,
														},
														"result": schema.SingleNestedAttribute{
															MarkdownDescription: ``,
															Computed:            true,
															Optional:            true,
															Required:            false,
															Attributes: map[string]schema.Attribute{
																"text": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"color": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"icon": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"index": schema.Int64Attribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
															},
														},
													},
												},
											},
										},
										"regex_map": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"type": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"options": schema.SingleNestedAttribute{
													MarkdownDescription: ``,
													Computed:            true,
													Optional:            true,
													Required:            false,
													Attributes: map[string]schema.Attribute{
														"pattern": schema.StringAttribute{
															MarkdownDescription: ``,
															Computed:            false,
															Optional:            false,
															Required:            true,
														},
														"result": schema.SingleNestedAttribute{
															MarkdownDescription: ``,
															Computed:            true,
															Optional:            true,
															Required:            false,
															Attributes: map[string]schema.Attribute{
																"text": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"color": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"icon": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"index": schema.Int64Attribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
															},
														},
													},
												},
											},
										},
										"special_value_map": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"type": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"options": schema.SingleNestedAttribute{
													MarkdownDescription: ``,
													Computed:            true,
													Optional:            true,
													Required:            false,
													Attributes: map[string]schema.Attribute{
														"match": schema.StringAttribute{
															MarkdownDescription: ``,
															Computed:            false,
															Optional:            false,
															Required:            true,
														},
														"pattern": schema.StringAttribute{
															MarkdownDescription: ``,
															Computed:            false,
															Optional:            false,
															Required:            true,
														},
														"result": schema.SingleNestedAttribute{
															MarkdownDescription: ``,
															Computed:            true,
															Optional:            true,
															Required:            false,
															Attributes: map[string]schema.Attribute{
																"text": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"color": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"icon": schema.StringAttribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
																"index": schema.Int64Attribute{
																	MarkdownDescription: ``,
																	Computed:            false,
																	Optional:            true,
																	Required:            false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"thresholds": schema.SingleNestedAttribute{
								MarkdownDescription: `Map numeric values to states`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"steps": schema.ListNestedAttribute{
										MarkdownDescription: `Must be sorted by 'value', first value is always -Infinity`,
										Computed:            false,
										Optional:            true,
										Required:            false,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"value": schema.Float64Attribute{
													MarkdownDescription: `Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.
FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON`,
													Computed: false,
													Optional: true,
													Required: false,
												},
												"color": schema.StringAttribute{
													MarkdownDescription: `Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded.`,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"index": schema.Int64Attribute{
													MarkdownDescription: `Threshold index, an old property that is not needed an should only appear in older dashboards`,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"state": schema.StringAttribute{
													MarkdownDescription: `TODO docs
TODO are the values here enumerable into a disjunction?
Some seem to be listed in typescript comment`,
													Computed: false,
													Optional: true,
													Required: false,
												},
											},
										},
									},
								},
							},
							"color": schema.SingleNestedAttribute{
								MarkdownDescription: `Map values to a display color`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: `The main color scheme mode`,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"fixed_color": schema.StringAttribute{
										MarkdownDescription: `Stores the fixed color value if mode is fixed`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"series_by": schema.StringAttribute{
										MarkdownDescription: `Some visualizations need to know how to assign a series color from by value color schemes`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
							"no_value": schema.StringAttribute{
								MarkdownDescription: `Alternative to empty string`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"custom": schema.SingleNestedAttribute{
								MarkdownDescription: ``,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"draw_style": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"gradient_mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"thresholds_style": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"mode": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
										},
									},
									"line_color": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"line_width": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"line_interpolation": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"line_style": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"fill": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
											"dash": schema.ListAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
												ElementType:         types.Float64Type,
											},
										},
									},
									"fill_color": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"fill_opacity": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"show_points": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"point_size": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"point_color": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_placement": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_color_mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_label": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_width": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_soft_min": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_soft_max": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_grid_show": schema.BoolAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"scale_distribution": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"type": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"log": schema.Float64Attribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
											"linear_threshold": schema.Float64Attribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
										},
									},
									"bar_alignment": schema.Int64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"bar_width_factor": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"stacking": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"mode": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
											"group": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
										},
									},
									"hide_from": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"tooltip": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"legend": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"viz": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
										},
									},
									"transform": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"span_nulls": schema.StringAttribute{
										MarkdownDescription: `Indicate if null values should be treated as gaps or connected.
When the value is a number, it represents the maximum delta in the
X axis that should be considered connected.  For timeseries, this is milliseconds`,
										Computed: false,
										Optional: true,
										Required: false,
									},
									"fill_below_to": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"point_symbol": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_centered_zero": schema.BoolAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"bar_max_width": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
						},
					},
					"overrides": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"matcher": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"properties": schema.ListNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},

			"rendered_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *PanelTrendDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *PanelTrendDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data PanelTrendDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// fix up the targets Attribute
	// Read into a map[string]interface{} and then marshal it back to JSON
	// This is a workaround for the fact that the targets attribute should be a list of maps but is a list of json strings
	dataMap := make(map[string]interface{})
	err = json.Unmarshal(JSONConfig, &dataMap)
	if err != nil {
		resp.Diagnostics.AddError("error unmarshalling config into Go map", err.Error())
		return
	}
	targets := data.Targets.Elements()
	targetsMaps := make([]map[string]interface{}, len(targets))
	for i, target := range targets {
		targetMap := make(map[string]interface{})
		err = json.Unmarshal([]byte(target.(types.String).ValueString()), &targetMap)
		if err != nil {
			resp.Diagnostics.AddError("error unmarshalling target into go map", err.Error())
			return
		}
		targetsMaps[i] = targetMap
	}

	dataMap["targets"] = targetsMaps
	JSONConfig, err = json.MarshalIndent(dataMap, "", "  ")
	if err != nil {
		resp.Diagnostics.AddError("error marshalling go map into json", err.Error())
		return
	}

	// Not sure about that
	data.RenderedJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
