// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &QueryElasticsearchDataSource{}
	_ datasource.DataSourceWithConfigure = &QueryElasticsearchDataSource{}
)

func NewQueryElasticsearchDataSource() datasource.DataSource {
	return &QueryElasticsearchDataSource{}
}

// QueryElasticsearchDataSource defines the data source implementation.
type QueryElasticsearchDataSource struct{}

type QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings struct {
	Interval    types.String `tfsdk:"interval"`
	MinDocCount types.String `tfsdk:"min_doc_count"`
	TrimEdges   types.String `tfsdk:"trim_edges"`
	Offset      types.String `tfsdk:"offset"`
	TimeZone    types.String `tfsdk:"time_zone"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings struct {
		Interval    *string `json:"interval,omitempty"`
		MinDocCount *string `json:"min_doc_count,omitempty"`
		TrimEdges   *string `json:"trimEdges,omitempty"`
		Offset      *string `json:"offset,omitempty"`
		TimeZone    *string `json:"timeZone,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_interval := m.Interval.ValueString()
	attr_min_doc_count := m.MinDocCount.ValueString()
	attr_trimedges := m.TrimEdges.ValueString()
	attr_offset := m.Offset.ValueString()
	attr_timezone := m.TimeZone.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings{
		Interval:    &attr_interval,
		MinDocCount: &attr_min_doc_count,
		TrimEdges:   &attr_trimedges,
		Offset:      &attr_offset,
		TimeZone:    &attr_timezone,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram struct {
	Field    types.String                                                         `tfsdk:"field"`
	Type     types.String                                                         `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram struct {
		Field    *string     `json:"field,omitempty"`
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram{
		Field:    &attr_field,
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings struct {
	Interval    types.String `tfsdk:"interval"`
	MinDocCount types.String `tfsdk:"min_doc_count"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings struct {
		Interval    *string `json:"interval,omitempty"`
		MinDocCount *string `json:"min_doc_count,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_interval := m.Interval.ValueString()
	attr_min_doc_count := m.MinDocCount.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings{
		Interval:    &attr_interval,
		MinDocCount: &attr_min_doc_count,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Histogram struct {
	Field    types.String                                                     `tfsdk:"field"`
	Type     types.String                                                     `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_Histogram_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Histogram) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Histogram struct {
		Field    *string     `json:"field,omitempty"`
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Histogram{
		Field:    &attr_field,
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Histogram) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Histogram {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings struct {
	Order       types.String `tfsdk:"order"`
	Size        types.String `tfsdk:"size"`
	MinDocCount types.String `tfsdk:"min_doc_count"`
	OrderBy     types.String `tfsdk:"order_by"`
	Missing     types.String `tfsdk:"missing"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings struct {
		Order       *string `json:"order,omitempty"`
		Size        *string `json:"size,omitempty"`
		MinDocCount *string `json:"min_doc_count,omitempty"`
		OrderBy     *string `json:"orderBy,omitempty"`
		Missing     *string `json:"missing,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_order := m.Order.ValueString()
	attr_size := m.Size.ValueString()
	attr_min_doc_count := m.MinDocCount.ValueString()
	attr_orderby := m.OrderBy.ValueString()
	attr_missing := m.Missing.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings{
		Order:       &attr_order,
		Size:        &attr_size,
		MinDocCount: &attr_min_doc_count,
		OrderBy:     &attr_orderby,
		Missing:     &attr_missing,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Terms struct {
	Field    types.String                                                 `tfsdk:"field"`
	Type     types.String                                                 `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_Terms_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Terms) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Terms struct {
		Field    *string     `json:"field,omitempty"`
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Terms{
		Field:    &attr_field,
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Terms) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Terms {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters struct {
	Query types.String `tfsdk:"query"`
	Label types.String `tfsdk:"label"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters struct {
		Query string `json:"query"`
		Label string `json:"label"`
	}

	m = m.ApplyDefaults()
	attr_query := m.Query.ValueString()
	attr_label := m.Label.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters{
		Query: attr_query,
		Label: attr_label,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings struct {
	Filters []QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings_Filters `tfsdk:"filters"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings struct {
		Filters []interface{} `json:"filters,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_filters := []interface{}{}
	for _, v := range m.Filters {
		attr_filters = append(attr_filters, v)
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings{
		Filters: attr_filters,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Filters struct {
	Type     types.String                                                   `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_Filters_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Filters) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Filters struct {
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Filters{
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Filters) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Filters {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings struct {
	Precision types.String `tfsdk:"precision"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings struct {
		Precision *string `json:"precision,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_precision := m.Precision.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings{
		Precision: &attr_precision,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid struct {
	Field    types.String                                                       `tfsdk:"field"`
	Type     types.String                                                       `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid struct {
		Field    *string     `json:"field,omitempty"`
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid{
		Field:    &attr_field,
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings struct {
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_Nested struct {
	Field    types.String                                                  `tfsdk:"field"`
	Type     types.String                                                  `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_Nested_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Nested) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_Nested struct {
		Field    *string     `json:"field,omitempty"`
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_Nested{
		Field:    &attr_field,
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_Nested) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_Nested {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs struct {
	DateHistogram *QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram `tfsdk:"date_histogram"`
	Histogram     *QueryElasticsearchDataSourceModel_BucketAggs_Histogram     `tfsdk:"histogram"`
	Terms         *QueryElasticsearchDataSourceModel_BucketAggs_Terms         `tfsdk:"terms"`
	Filters       *QueryElasticsearchDataSourceModel_BucketAggs_Filters       `tfsdk:"filters"`
	GeoHashGrid   *QueryElasticsearchDataSourceModel_BucketAggs_GeoHashGrid   `tfsdk:"geo_hash_grid"`
	Nested        *QueryElasticsearchDataSourceModel_BucketAggs_Nested        `tfsdk:"nested"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_BucketAggs interface{}
	m = m.ApplyDefaults()
	if m.DateHistogram != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.DateHistogram
	}
	if m.Histogram != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.Histogram
	}
	if m.Terms != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.Terms
	}
	if m.Filters != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.Filters
	}
	if m.GeoHashGrid != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.GeoHashGrid
	}
	if m.Nested != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.Nested
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_BucketAggs)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_Count struct {
	Type types.String `tfsdk:"type"`
	Hide types.Bool   `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_Count) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_Count struct {
		Type string `json:"type"`
		Hide *bool  `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_Count{
		Type: attr_type,
		Hide: &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_Count) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_Count {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings struct {
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage struct {
	PipelineAgg types.String                                                                                `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                `tfsdk:"field"`
	Type        types.String                                                                                `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                  `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings struct {
	Unit types.String `tfsdk:"unit"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings struct {
		Unit *string `json:"unit,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_unit := m.Unit.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings{
		Unit: &attr_unit,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative struct {
	PipelineAgg types.String                                                                             `tfsdk:"pipeline_agg"`
	Field       types.String                                                                             `tfsdk:"field"`
	Type        types.String                                                                             `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                               `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings struct {
	Format types.String `tfsdk:"format"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings struct {
		Format *string `json:"format,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_format := m.Format.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings{
		Format: &attr_format,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum struct {
	PipelineAgg types.String                                                                                `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                `tfsdk:"field"`
	Type        types.String                                                                                `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                  `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables struct {
	Name        types.String `tfsdk:"name"`
	PipelineAgg types.String `tfsdk:"pipeline_agg"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables struct {
		Name        string `json:"name"`
		PipelineAgg string `json:"pipelineAgg"`
	}

	m = m.ApplyDefaults()
	attr_name := m.Name.ValueString()
	attr_pipelineagg := m.PipelineAgg.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables{
		Name:        attr_name,
		PipelineAgg: attr_pipelineagg,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings struct {
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript struct {
	Type              types.String                                                                                         `tfsdk:"type"`
	PipelineVariables []QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_PipelineVariables `tfsdk:"pipeline_variables"`
	Settings          *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript_Settings           `tfsdk:"settings"`
	Hide              types.Bool                                                                                           `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript struct {
		Type              string        `json:"type"`
		PipelineVariables []interface{} `json:"pipelineVariables,omitempty"`
		Settings          interface{}   `json:"settings,omitempty"`
		Hide              *bool         `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_pipelinevariables := []interface{}{}
	for _, v := range m.PipelineVariables {
		attr_pipelinevariables = append(attr_pipelinevariables, v)
	}
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript{
		Type:              attr_type,
		PipelineVariables: attr_pipelinevariables,
		Settings:          attr_settings,
		Hide:              &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation struct {
	MovingAverage *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage `tfsdk:"moving_average"`
	Derivative    *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_Derivative    `tfsdk:"derivative"`
	CumulativeSum *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_CumulativeSum `tfsdk:"cumulative_sum"`
	BucketScript  *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_BucketScript  `tfsdk:"bucket_script"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation interface{}
	m = m.ApplyDefaults()
	if m.MovingAverage != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation = m.MovingAverage
	}
	if m.Derivative != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation = m.Derivative
	}
	if m.CumulativeSum != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation = m.CumulativeSum
	}
	if m.BucketScript != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation = m.BucketScript
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables struct {
	Name        types.String `tfsdk:"name"`
	PipelineAgg types.String `tfsdk:"pipeline_agg"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables struct {
		Name        string `json:"name"`
		PipelineAgg string `json:"pipelineAgg"`
	}

	m = m.ApplyDefaults()
	attr_name := m.Name.ValueString()
	attr_pipelineagg := m.PipelineAgg.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables{
		Name:        attr_name,
		PipelineAgg: attr_pipelineagg,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings struct {
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript struct {
	Type              types.String                                                                                             `tfsdk:"type"`
	PipelineVariables []QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables `tfsdk:"pipeline_variables"`
	Settings          *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings           `tfsdk:"settings"`
	Hide              types.Bool                                                                                               `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript struct {
		Type              string        `json:"type"`
		PipelineVariables []interface{} `json:"pipelineVariables,omitempty"`
		Settings          interface{}   `json:"settings,omitempty"`
		Hide              *bool         `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_pipelinevariables := []interface{}{}
	for _, v := range m.PipelineVariables {
		attr_pipelinevariables = append(attr_pipelinevariables, v)
	}
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript{
		Type:              attr_type,
		PipelineVariables: attr_pipelinevariables,
		Settings:          attr_settings,
		Hide:              &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings struct {
	Format types.String `tfsdk:"format"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings struct {
		Format *string `json:"format,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_format := m.Format.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings{
		Format: &attr_format,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum struct {
	PipelineAgg types.String                                                                                    `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                    `tfsdk:"field"`
	Type        types.String                                                                                    `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                      `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings struct {
	Unit types.String `tfsdk:"unit"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings struct {
		Unit *string `json:"unit,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_unit := m.Unit.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings{
		Unit: &attr_unit,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative struct {
	PipelineAgg types.String                                                                                 `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                 `tfsdk:"field"`
	Type        types.String                                                                                 `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                   `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings struct {
	Lag types.String `tfsdk:"lag"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings struct {
		Lag *string `json:"lag,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_lag := m.Lag.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings{
		Lag: &attr_lag,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff struct {
	PipelineAgg types.String                                                                                 `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                 `tfsdk:"field"`
	Type        types.String                                                                                 `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                   `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings struct {
	Size types.String `tfsdk:"size"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings struct {
		Size *string `json:"size,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_size := m.Size.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings{
		Size: &attr_size,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData struct {
	Type     types.String                                                                              `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                                `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData struct {
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData{
		Type:     attr_type,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings struct {
	Size types.String `tfsdk:"size"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings struct {
		Size *string `json:"size,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_size := m.Size.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings{
		Size: &attr_size,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument struct {
	Type     types.String                                                                                  `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                                    `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument struct {
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument{
		Type:     attr_type,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings struct {
	PrecisionThreshold types.String `tfsdk:"precision_threshold"`
	Missing            types.String `tfsdk:"missing"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings struct {
		PrecisionThreshold *string `json:"precision_threshold,omitempty"`
		Missing            *string `json:"missing,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_precision_threshold := m.PrecisionThreshold.ValueString()
	attr_missing := m.Missing.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings{
		PrecisionThreshold: &attr_precision_threshold,
		Missing:            &attr_missing,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount struct {
	Type     types.String                                                                                  `tfsdk:"type"`
	Field    types.String                                                                                  `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                                    `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings struct {
	Missing  types.String `tfsdk:"missing"`
	Percents types.List   `tfsdk:"percents"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings struct {
		Missing  *string  `json:"missing,omitempty"`
		Percents []string `json:"percents,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_missing := m.Missing.ValueString()
	attr_percents := []string{}
	for _, v := range m.Percents.Elements() {
		attr_percents = append(attr_percents, v.(types.String).ValueString())
	}

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings{
		Missing:  &attr_missing,
		Percents: attr_percents,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings {
	if len(m.Percents.Elements()) == 0 {
		m.Percents, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles struct {
	Type     types.String                                                                                  `tfsdk:"type"`
	Field    types.String                                                                                  `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                                    `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings struct {
	Missing types.String `tfsdk:"missing"`
	Sigma   types.String `tfsdk:"sigma"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings struct {
		Missing *string `json:"missing,omitempty"`
		Sigma   *string `json:"sigma,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_missing := m.Missing.ValueString()
	attr_sigma := m.Sigma.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings{
		Missing: &attr_missing,
		Sigma:   &attr_sigma,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta struct {
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats struct {
	Type     types.String                                                                                    `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Settings `tfsdk:"settings"`
	Field    types.String                                                                                    `tfsdk:"field"`
	Meta     *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats_Meta     `tfsdk:"meta"`
	Hide     types.Bool                                                                                      `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats struct {
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
		Field    *string     `json:"field,omitempty"`
		Meta     interface{} `json:"meta,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_field := m.Field.ValueString()
	var attr_meta interface{}
	if m.Meta != nil {
		attr_meta = m.Meta
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats{
		Type:     attr_type,
		Settings: attr_settings,
		Field:    &attr_field,
		Meta:     attr_meta,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings struct {
	Missing types.String `tfsdk:"missing"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings struct {
		Missing *string `json:"missing,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_missing := m.Missing.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings{
		Missing: &attr_missing,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min struct {
	Type     types.String                                                                          `tfsdk:"type"`
	Field    types.String                                                                          `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                            `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings struct {
	Missing types.String `tfsdk:"missing"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings struct {
		Missing *string `json:"missing,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_missing := m.Missing.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings{
		Missing: &attr_missing,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max struct {
	Type     types.String                                                                          `tfsdk:"type"`
	Field    types.String                                                                          `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                            `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings struct {
	Missing types.String `tfsdk:"missing"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings struct {
		Missing *string `json:"missing,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_missing := m.Missing.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings{
		Missing: &attr_missing,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum struct {
	Type     types.String                                                                          `tfsdk:"type"`
	Field    types.String                                                                          `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                            `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings struct {
	Missing types.String `tfsdk:"missing"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings struct {
		Missing *string `json:"missing,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_missing := m.Missing.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings{
		Missing: &attr_missing,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average struct {
	Type     types.String                                                                              `tfsdk:"type"`
	Field    types.String                                                                              `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                                `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings struct {
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage struct {
	PipelineAgg types.String                                                                                    `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                    `tfsdk:"field"`
	Type        types.String                                                                                    `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                      `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings struct {
	Window types.String `tfsdk:"window"`
	Shift  types.String `tfsdk:"shift"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings struct {
		Window *string `json:"window,omitempty"`
		Shift  *string `json:"shift,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_window := m.Window.ValueString()
	attr_shift := m.Shift.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings{
		Window: &attr_window,
		Shift:  &attr_shift,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction struct {
	PipelineAgg types.String                                                                                     `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                     `tfsdk:"field"`
	Type        types.String                                                                                     `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                       `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings struct {
	Limit types.String `tfsdk:"limit"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings struct {
		Limit *string `json:"limit,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_limit := m.Limit.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings{
		Limit: &attr_limit,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs struct {
	Type     types.String                                                                           `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                             `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs struct {
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs{
		Type:     attr_type,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings struct {
	Unit types.String `tfsdk:"unit"`
	Mode types.String `tfsdk:"mode"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings struct {
		Unit *string `json:"unit,omitempty"`
		Mode *string `json:"mode,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_unit := m.Unit.ValueString()
	attr_mode := m.Mode.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings{
		Unit: &attr_unit,
		Mode: &attr_mode,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate struct {
	Type     types.String                                                                           `tfsdk:"type"`
	Field    types.String                                                                           `tfsdk:"field"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                             `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate struct {
		Type     string      `json:"type"`
		Field    *string     `json:"field,omitempty"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_field := m.Field.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate{
		Type:     attr_type,
		Field:    &attr_field,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings struct {
	Order   types.String `tfsdk:"order"`
	OrderBy types.String `tfsdk:"order_by"`
	Metrics types.List   `tfsdk:"metrics"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings struct {
		Order   *string  `json:"order,omitempty"`
		OrderBy *string  `json:"orderBy,omitempty"`
		Metrics []string `json:"metrics,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_order := m.Order.ValueString()
	attr_orderby := m.OrderBy.ValueString()
	attr_metrics := []string{}
	for _, v := range m.Metrics.Elements() {
		attr_metrics = append(attr_metrics, v.(types.String).ValueString())
	}

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings{
		Order:   &attr_order,
		OrderBy: &attr_orderby,
		Metrics: attr_metrics,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings {
	if len(m.Metrics.Elements()) == 0 {
		m.Metrics, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics struct {
	Type     types.String                                                                                 `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics_Settings `tfsdk:"settings"`
	Hide     types.Bool                                                                                   `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics struct {
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
		Hide     *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics{
		Type:     attr_type,
		Settings: attr_settings,
		Hide:     &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings struct {
	BucketScript   *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript   `tfsdk:"bucket_script"`
	CumulativeSum  *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_CumulativeSum  `tfsdk:"cumulative_sum"`
	Derivative     *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Derivative     `tfsdk:"derivative"`
	SerialDiff     *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_SerialDiff     `tfsdk:"serial_diff"`
	RawData        *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawData        `tfsdk:"raw_data"`
	RawDocument    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_RawDocument    `tfsdk:"raw_document"`
	UniqueCount    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_UniqueCount    `tfsdk:"unique_count"`
	Percentiles    *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Percentiles    `tfsdk:"percentiles"`
	ExtendedStats  *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_ExtendedStats  `tfsdk:"extended_stats"`
	Min            *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Min            `tfsdk:"min"`
	Max            *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Max            `tfsdk:"max"`
	Sum            *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Sum            `tfsdk:"sum"`
	Average        *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Average        `tfsdk:"average"`
	MovingAverage  *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingAverage  `tfsdk:"moving_average"`
	MovingFunction *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_MovingFunction `tfsdk:"moving_function"`
	Logs           *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Logs           `tfsdk:"logs"`
	Rate           *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_Rate           `tfsdk:"rate"`
	TopMetrics     *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_TopMetrics     `tfsdk:"top_metrics"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings interface{}
	m = m.ApplyDefaults()
	if m.BucketScript != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.BucketScript
	}
	if m.CumulativeSum != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.CumulativeSum
	}
	if m.Derivative != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Derivative
	}
	if m.SerialDiff != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.SerialDiff
	}
	if m.RawData != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.RawData
	}
	if m.RawDocument != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.RawDocument
	}
	if m.UniqueCount != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.UniqueCount
	}
	if m.Percentiles != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Percentiles
	}
	if m.ExtendedStats != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.ExtendedStats
	}
	if m.Min != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Min
	}
	if m.Max != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Max
	}
	if m.Sum != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Sum
	}
	if m.Average != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Average
	}
	if m.MovingAverage != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.MovingAverage
	}
	if m.MovingFunction != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.MovingFunction
	}
	if m.Logs != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Logs
	}
	if m.Rate != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.Rate
	}
	if m.TopMetrics != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.TopMetrics
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics struct {
	Count                         *QueryElasticsearchDataSourceModel_Metrics_Count                         `tfsdk:"count"`
	PipelineMetricAggregation     *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation     `tfsdk:"pipeline_metric_aggregation"`
	MetricAggregationWithSettings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings `tfsdk:"metric_aggregation_with_settings"`
}

func (m QueryElasticsearchDataSourceModel_Metrics) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_Metrics interface{}
	m = m.ApplyDefaults()
	if m.Count != nil {
		json_QueryElasticsearchDataSourceModel_Metrics = m.Count
	}
	if m.PipelineMetricAggregation != nil {
		json_QueryElasticsearchDataSourceModel_Metrics = m.PipelineMetricAggregation
	}
	if m.MetricAggregationWithSettings != nil {
		json_QueryElasticsearchDataSourceModel_Metrics = m.MetricAggregationWithSettings
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_Metrics)
}

func (m QueryElasticsearchDataSourceModel_Metrics) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics {

	return m
}

type QueryElasticsearchDataSourceModel struct {
	RenderedJSON types.String                                   `tfsdk:"rendered_json"`
	Alias        types.String                                   `tfsdk:"alias"`
	Query        types.String                                   `tfsdk:"query"`
	TimeField    types.String                                   `tfsdk:"time_field"`
	BucketAggs   []QueryElasticsearchDataSourceModel_BucketAggs `tfsdk:"bucket_aggs"`
	Metrics      []QueryElasticsearchDataSourceModel_Metrics    `tfsdk:"metrics"`
	RefId        types.String                                   `tfsdk:"ref_id"`
	Hide         types.Bool                                     `tfsdk:"hide"`
	QueryType    types.String                                   `tfsdk:"query_type"`
}

func (m QueryElasticsearchDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel struct {
		Alias      *string       `json:"alias,omitempty"`
		Query      *string       `json:"query,omitempty"`
		TimeField  *string       `json:"timeField,omitempty"`
		BucketAggs []interface{} `json:"bucketAggs,omitempty"`
		Metrics    []interface{} `json:"metrics,omitempty"`
		RefId      string        `json:"refId"`
		Hide       *bool         `json:"hide,omitempty"`
		QueryType  *string       `json:"queryType,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_alias := m.Alias.ValueString()
	attr_query := m.Query.ValueString()
	attr_timefield := m.TimeField.ValueString()
	attr_bucketaggs := []interface{}{}
	for _, v := range m.BucketAggs {
		attr_bucketaggs = append(attr_bucketaggs, v)
	}
	attr_metrics := []interface{}{}
	for _, v := range m.Metrics {
		attr_metrics = append(attr_metrics, v)
	}
	attr_refid := m.RefId.ValueString()
	attr_hide := m.Hide.ValueBool()
	attr_querytype := m.QueryType.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel{
		Alias:      &attr_alias,
		Query:      &attr_query,
		TimeField:  &attr_timefield,
		BucketAggs: attr_bucketaggs,
		Metrics:    attr_metrics,
		RefId:      attr_refid,
		Hide:       &attr_hide,
		QueryType:  &attr_querytype,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel) ApplyDefaults() QueryElasticsearchDataSourceModel {

	return m
}

func (d *QueryElasticsearchDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_query_elasticsearch"
}

func (d *QueryElasticsearchDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"alias": schema.StringAttribute{
				MarkdownDescription: `Alias pattern`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"query": schema.StringAttribute{
				MarkdownDescription: `Lucene query`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"time_field": schema.StringAttribute{
				MarkdownDescription: `Name of time field`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"bucket_aggs": schema.ListNestedAttribute{
				MarkdownDescription: `List of bucket aggregations`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_histogram": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"interval": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"min_doc_count": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"trim_edges": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"offset": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"time_zone": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
						"histogram": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"interval": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"min_doc_count": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
						"terms": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"order": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"size": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"min_doc_count": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"order_by": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"missing": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
						"filters": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"filters": schema.ListNestedAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"query": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
													"label": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
												},
											},
										},
									},
								},
							},
						},
						"geo_hash_grid": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"precision": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
						"nested": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},
			"metrics": schema.ListNestedAttribute{
				MarkdownDescription: `List of metric aggregations`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"count": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"hide": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
						"pipeline_metric_aggregation": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"moving_average": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"derivative": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"unit": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"cumulative_sum": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"format": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"bucket_script": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"pipeline_variables": schema.ListNestedAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
													"pipeline_agg": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
												},
											},
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
						"metric_aggregation_with_settings": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"bucket_script": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"pipeline_variables": schema.ListNestedAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
													"pipeline_agg": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
												},
											},
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"cumulative_sum": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"format": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"derivative": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"unit": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"serial_diff": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"lag": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"raw_data": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"size": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"raw_document": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"size": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"unique_count": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"precision_threshold": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"percentiles": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"percents": schema.ListAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
													ElementType:         types.StringType,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"extended_stats": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"sigma": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"meta": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"min": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"max": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"sum": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"average": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"missing": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"moving_average": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"moving_function": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"window": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"shift": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"logs": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"limit": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"rate": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"unit": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"mode": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"top_metrics": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"order": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"order_by": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
												"metrics": schema.ListAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
													ElementType:         types.StringType,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
					},
				},
			},
			"ref_id": schema.StringAttribute{
				MarkdownDescription: `A unique identifier for the query within the list of targets.
In server side expressions, the refId is used as a variable name to identify results.
By default, the UI will assign A->Z; however setting meaningful names may be useful.`,
				Computed: false,
				Optional: false,
				Required: true,
			},
			"hide": schema.BoolAttribute{
				MarkdownDescription: `true if query is disabled (ie should not be returned to the dashboard)
Note this does not always imply that the query should not be executed since
the results from a hidden query may be used as the input to other queries (SSE etc)`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"query_type": schema.StringAttribute{
				MarkdownDescription: `Specify the query flavor
TODO make this required and give it a default`,
				Computed: false,
				Optional: true,
				Required: false,
			},

			"rendered_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *QueryElasticsearchDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *QueryElasticsearchDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data QueryElasticsearchDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.RenderedJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
