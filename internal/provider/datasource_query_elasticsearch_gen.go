// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &QueryElasticsearchDataSource{}
	_ datasource.DataSourceWithConfigure = &QueryElasticsearchDataSource{}
)

func NewQueryElasticsearchDataSource() datasource.DataSource {
	return &QueryElasticsearchDataSource{}
}

// QueryElasticsearchDataSource defines the data source implementation.
type QueryElasticsearchDataSource struct{}

type QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings struct {
	Interval    types.String `tfsdk:"interval"`
	MinDocCount types.String `tfsdk:"min_doc_count"`
	TrimEdges   types.String `tfsdk:"trim_edges"`
	Offset      types.String `tfsdk:"offset"`
	TimeZone    types.String `tfsdk:"time_zone"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings struct {
		Interval    *string `json:"interval,omitempty"`
		MinDocCount *string `json:"min_doc_count,omitempty"`
		TrimEdges   *string `json:"trimEdges,omitempty"`
		Offset      *string `json:"offset,omitempty"`
		TimeZone    *string `json:"timeZone,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_interval := m.Interval.ValueString()
	attr_min_doc_count := m.MinDocCount.ValueString()
	attr_trimedges := m.TrimEdges.ValueString()
	attr_offset := m.Offset.ValueString()
	attr_timezone := m.TimeZone.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings{
		Interval:    &attr_interval,
		MinDocCount: &attr_min_doc_count,
		TrimEdges:   &attr_trimedges,
		Offset:      &attr_offset,
		TimeZone:    &attr_timezone,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram struct {
	Field    types.String                                                         `tfsdk:"field"`
	Type     types.String                                                         `tfsdk:"type"`
	Settings *QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram_Settings `tfsdk:"settings"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram struct {
		Field    *string     `json:"field,omitempty"`
		Type     string      `json:"type"`
		Settings interface{} `json:"settings,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}

	model := &jsonQueryElasticsearchDataSourceModel_BucketAggs_DateHistogram{
		Field:    &attr_field,
		Type:     attr_type,
		Settings: attr_settings,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram {

	return m
}

type QueryElasticsearchDataSourceModel_BucketAggs struct {
	DateHistogram *QueryElasticsearchDataSourceModel_BucketAggs_DateHistogram `tfsdk:"date_histogram"`
}

func (m QueryElasticsearchDataSourceModel_BucketAggs) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_BucketAggs interface{}
	m = m.ApplyDefaults()
	if m.DateHistogram != nil {
		json_QueryElasticsearchDataSourceModel_BucketAggs = m.DateHistogram
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_BucketAggs)
}

func (m QueryElasticsearchDataSourceModel_BucketAggs) ApplyDefaults() QueryElasticsearchDataSourceModel_BucketAggs {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_Count struct {
	Type types.String `tfsdk:"type"`
	Hide types.Bool   `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_Count) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_Count struct {
		Type string `json:"type"`
		Hide *bool  `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_Count{
		Type: attr_type,
		Hide: &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_Count) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_Count {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings struct {
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings struct {
	}

	m = m.ApplyDefaults()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings{}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage struct {
	PipelineAgg types.String                                                                                `tfsdk:"pipeline_agg"`
	Field       types.String                                                                                `tfsdk:"field"`
	Type        types.String                                                                                `tfsdk:"type"`
	Settings    *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage_Settings `tfsdk:"settings"`
	Hide        types.Bool                                                                                  `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage struct {
		PipelineAgg *string     `json:"pipelineAgg,omitempty"`
		Field       *string     `json:"field,omitempty"`
		Type        string      `json:"type"`
		Settings    interface{} `json:"settings,omitempty"`
		Hide        *bool       `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_pipelineagg := m.PipelineAgg.ValueString()
	attr_field := m.Field.ValueString()
	attr_type := m.Type.ValueString()
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage{
		PipelineAgg: &attr_pipelineagg,
		Field:       &attr_field,
		Type:        attr_type,
		Settings:    attr_settings,
		Hide:        &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation struct {
	MovingAverage *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation_MovingAverage `tfsdk:"moving_average"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation interface{}
	m = m.ApplyDefaults()
	if m.MovingAverage != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation = m.MovingAverage
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation)
}

func (m QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables struct {
	Name        types.String `tfsdk:"name"`
	PipelineAgg types.String `tfsdk:"pipeline_agg"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables struct {
		Name        string `json:"name"`
		PipelineAgg string `json:"pipelineAgg"`
	}

	m = m.ApplyDefaults()
	attr_name := m.Name.ValueString()
	attr_pipelineagg := m.PipelineAgg.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables{
		Name:        attr_name,
		PipelineAgg: attr_pipelineagg,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings struct {
	Script types.String `tfsdk:"script"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings) GetAttrScript() interface{} {
	var attr interface{}
	var err error

	err = json.Unmarshal([]byte(m.Script.ValueString()), &attr)
	if err == nil {
		return attr
	}

	return m.Script.ValueString()
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings struct {
		Script interface{} `json:"script,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_script := m.GetAttrScript()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings{
		Script: attr_script,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript struct {
	Type              types.String                                                                                             `tfsdk:"type"`
	PipelineVariables []QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_PipelineVariables `tfsdk:"pipeline_variables"`
	Settings          *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript_Settings           `tfsdk:"settings"`
	Hide              types.Bool                                                                                               `tfsdk:"hide"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript struct {
		Type              string        `json:"type"`
		PipelineVariables []interface{} `json:"pipelineVariables,omitempty"`
		Settings          interface{}   `json:"settings,omitempty"`
		Hide              *bool         `json:"hide,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_pipelinevariables := []interface{}{}
	for _, v := range m.PipelineVariables {
		attr_pipelinevariables = append(attr_pipelinevariables, v)
	}
	var attr_settings interface{}
	if m.Settings != nil {
		attr_settings = m.Settings
	}
	attr_hide := m.Hide.ValueBool()

	model := &jsonQueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript{
		Type:              attr_type,
		PipelineVariables: attr_pipelinevariables,
		Settings:          attr_settings,
		Hide:              &attr_hide,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings struct {
	BucketScript *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings_BucketScript `tfsdk:"bucket_script"`
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings interface{}
	m = m.ApplyDefaults()
	if m.BucketScript != nil {
		json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings = m.BucketScript
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings)
}

func (m QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings {

	return m
}

type QueryElasticsearchDataSourceModel_Metrics struct {
	Count                         *QueryElasticsearchDataSourceModel_Metrics_Count                         `tfsdk:"count"`
	PipelineMetricAggregation     *QueryElasticsearchDataSourceModel_Metrics_PipelineMetricAggregation     `tfsdk:"pipeline_metric_aggregation"`
	MetricAggregationWithSettings *QueryElasticsearchDataSourceModel_Metrics_MetricAggregationWithSettings `tfsdk:"metric_aggregation_with_settings"`
}

func (m QueryElasticsearchDataSourceModel_Metrics) MarshalJSON() ([]byte, error) {
	var json_QueryElasticsearchDataSourceModel_Metrics interface{}
	m = m.ApplyDefaults()
	if m.Count != nil {
		json_QueryElasticsearchDataSourceModel_Metrics = m.Count
	}
	if m.PipelineMetricAggregation != nil {
		json_QueryElasticsearchDataSourceModel_Metrics = m.PipelineMetricAggregation
	}
	if m.MetricAggregationWithSettings != nil {
		json_QueryElasticsearchDataSourceModel_Metrics = m.MetricAggregationWithSettings
	}

	return json.Marshal(json_QueryElasticsearchDataSourceModel_Metrics)
}

func (m QueryElasticsearchDataSourceModel_Metrics) ApplyDefaults() QueryElasticsearchDataSourceModel_Metrics {

	return m
}

type QueryElasticsearchDataSourceModel struct {
	RenderedJSON types.String                                   `tfsdk:"rendered_json"`
	Alias        types.String                                   `tfsdk:"alias"`
	Query        types.String                                   `tfsdk:"query"`
	TimeField    types.String                                   `tfsdk:"time_field"`
	BucketAggs   []QueryElasticsearchDataSourceModel_BucketAggs `tfsdk:"bucket_aggs"`
	Metrics      []QueryElasticsearchDataSourceModel_Metrics    `tfsdk:"metrics"`
	RefId        types.String                                   `tfsdk:"ref_id"`
	Hide         types.Bool                                     `tfsdk:"hide"`
	QueryType    types.String                                   `tfsdk:"query_type"`
}

func (m QueryElasticsearchDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonQueryElasticsearchDataSourceModel struct {
		Alias      *string       `json:"alias,omitempty"`
		Query      *string       `json:"query,omitempty"`
		TimeField  *string       `json:"timeField,omitempty"`
		BucketAggs []interface{} `json:"bucketAggs,omitempty"`
		Metrics    []interface{} `json:"metrics,omitempty"`
		RefId      string        `json:"refId"`
		Hide       *bool         `json:"hide,omitempty"`
		QueryType  *string       `json:"queryType,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_alias := m.Alias.ValueString()
	attr_query := m.Query.ValueString()
	attr_timefield := m.TimeField.ValueString()
	attr_bucketaggs := []interface{}{}
	for _, v := range m.BucketAggs {
		attr_bucketaggs = append(attr_bucketaggs, v)
	}
	attr_metrics := []interface{}{}
	for _, v := range m.Metrics {
		attr_metrics = append(attr_metrics, v)
	}
	attr_refid := m.RefId.ValueString()
	attr_hide := m.Hide.ValueBool()
	attr_querytype := m.QueryType.ValueString()

	model := &jsonQueryElasticsearchDataSourceModel{
		Alias:      &attr_alias,
		Query:      &attr_query,
		TimeField:  &attr_timefield,
		BucketAggs: attr_bucketaggs,
		Metrics:    attr_metrics,
		RefId:      attr_refid,
		Hide:       &attr_hide,
		QueryType:  &attr_querytype,
	}
	return json.Marshal(model)
}

func (m QueryElasticsearchDataSourceModel) ApplyDefaults() QueryElasticsearchDataSourceModel {

	return m
}

func (d *QueryElasticsearchDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_query_elasticsearch"
}

func (d *QueryElasticsearchDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"alias": schema.StringAttribute{
				MarkdownDescription: `Alias pattern`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"query": schema.StringAttribute{
				MarkdownDescription: `Lucene query`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"time_field": schema.StringAttribute{
				MarkdownDescription: `Name of time field`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"bucket_aggs": schema.ListNestedAttribute{
				MarkdownDescription: `List of bucket aggregations`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_histogram": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"field": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"settings": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"interval": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"min_doc_count": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"trim_edges": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"offset": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"time_zone": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
					},
				},
			},
			"metrics": schema.ListNestedAttribute{
				MarkdownDescription: `List of metric aggregations`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"count": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"hide": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
						"pipeline_metric_aggregation": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"moving_average": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"pipeline_agg": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
						"metric_aggregation_with_settings": schema.SingleNestedAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"bucket_script": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"pipeline_variables": schema.ListNestedAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"name": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
													"pipeline_agg": schema.StringAttribute{
														MarkdownDescription: ``,
														Computed:            false,
														Optional:            false,
														Required:            true,
													},
												},
											},
										},
										"settings": schema.SingleNestedAttribute{
											MarkdownDescription: ``,
											Computed:            true,
											Optional:            true,
											Required:            false,
											Attributes: map[string]schema.Attribute{
												"script": schema.StringAttribute{
													MarkdownDescription: ``,
													Computed:            false,
													Optional:            true,
													Required:            false,
												},
											},
										},
										"hide": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
					},
				},
			},
			"ref_id": schema.StringAttribute{
				MarkdownDescription: `A unique identifier for the query within the list of targets.
In server side expressions, the refId is used as a variable name to identify results.
By default, the UI will assign A->Z; however setting meaningful names may be useful.`,
				Computed: false,
				Optional: false,
				Required: true,
			},
			"hide": schema.BoolAttribute{
				MarkdownDescription: `true if query is disabled (ie should not be returned to the dashboard)
Note this does not always imply that the query should not be executed since
the results from a hidden query may be used as the input to other queries (SSE etc)`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"query_type": schema.StringAttribute{
				MarkdownDescription: `Specify the query flavor
TODO make this required and give it a default`,
				Computed: false,
				Optional: true,
				Required: false,
			},

			"rendered_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *QueryElasticsearchDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *QueryElasticsearchDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data QueryElasticsearchDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.RenderedJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
