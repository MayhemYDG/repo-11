// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &AnnotationsListPanelCfgDataSource{}
	_ datasource.DataSourceWithConfigure = &AnnotationsListPanelCfgDataSource{}
)

func NewAnnotationsListPanelCfgDataSource() datasource.DataSource {
	return &AnnotationsListPanelCfgDataSource{}
}

// AnnotationsListPanelCfgDataSource defines the data source implementation.
type AnnotationsListPanelCfgDataSource struct{}

// AnnotationsListPanelCfgDataSourceModel describes the data source data model.
type AnnotationsListPanelCfgDataSourceModel struct {
	PanelOptions *struct {
		OnlyFromThisDashboard types.Bool   `tfsdk:"only_from_this_dashboard" json:"onlyFromThisDashboard"`
		OnlyInTimeRange       types.Bool   `tfsdk:"only_in_time_range" json:"onlyInTimeRange"`
		Tags                  types.List   `tfsdk:"tags" json:"tags"`
		Limit                 types.Int64  `tfsdk:"limit" json:"limit"`
		ShowUser              types.Bool   `tfsdk:"show_user" json:"showUser"`
		ShowTime              types.Bool   `tfsdk:"show_time" json:"showTime"`
		ShowTags              types.Bool   `tfsdk:"show_tags" json:"showTags"`
		NavigateToPanel       types.Bool   `tfsdk:"navigate_to_panel" json:"navigateToPanel"`
		NavigateBefore        types.String `tfsdk:"navigate_before" json:"navigateBefore"`
		NavigateAfter         types.String `tfsdk:"navigate_after" json:"navigateAfter"`
	} `tfsdk:"panel_options" json:"PanelOptions"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *AnnotationsListPanelCfgDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_annotationslistpanelcfg"
}

func (d *AnnotationsListPanelCfgDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"panel_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"only_from_this_dashboard": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"only_in_time_range": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"tags": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						ElementType:         types.StringType,
					},

					"limit": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_user": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_time": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_tags": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"navigate_to_panel": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"navigate_before": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"navigate_after": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *AnnotationsListPanelCfgDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *AnnotationsListPanelCfgDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data AnnotationsListPanelCfgDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
