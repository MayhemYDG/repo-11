// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &BarChartPanelCfgDataSource{}
	_ datasource.DataSourceWithConfigure = &BarChartPanelCfgDataSource{}
)

func NewBarChartPanelCfgDataSource() datasource.DataSource {
	return &BarChartPanelCfgDataSource{}
}

// BarChartPanelCfgDataSource defines the data source implementation.
type BarChartPanelCfgDataSource struct{}

// BarChartPanelCfgDataSourceModel describes the data source data model.
type BarChartPanelCfgDataSourceModel struct {
	PanelOptions *struct {
		XField              types.String `tfsdk:"x_field" json:"xField"`
		ColorByField        types.String `tfsdk:"color_by_field" json:"colorByField"`
		Orientation         types.String `tfsdk:"orientation" json:"orientation"`
		BarRadius           types.Number `tfsdk:"bar_radius" json:"barRadius"`
		XTickLabelRotation  types.Int64  `tfsdk:"x_tick_label_rotation" json:"xTickLabelRotation"`
		XTickLabelMaxLength types.Int64  `tfsdk:"x_tick_label_max_length" json:"xTickLabelMaxLength"`
		XTickLabelSpacing   types.Int64  `tfsdk:"x_tick_label_spacing" json:"xTickLabelSpacing"`
		Stacking            types.String `tfsdk:"stacking" json:"stacking"`
		ShowValue           types.String `tfsdk:"show_value" json:"showValue"`
		BarWidth            types.Number `tfsdk:"bar_width" json:"barWidth"`
		GroupWidth          types.Number `tfsdk:"group_width" json:"groupWidth"`
		Legend              *struct {
			DisplayMode types.String `tfsdk:"display_mode" json:"displayMode"`
			Placement   types.String `tfsdk:"placement" json:"placement"`
			ShowLegend  types.Bool   `tfsdk:"show_legend" json:"showLegend"`
			AsTable     types.Bool   `tfsdk:"as_table" json:"asTable"`
			IsVisible   types.Bool   `tfsdk:"is_visible" json:"isVisible"`
			SortBy      types.String `tfsdk:"sort_by" json:"sortBy"`
			SortDesc    types.Bool   `tfsdk:"sort_desc" json:"sortDesc"`
			Width       types.Number `tfsdk:"width" json:"width"`
			Calcs       types.List   `tfsdk:"calcs" json:"calcs"`
		} `tfsdk:"legend" json:"legend"`
		Tooltip *struct {
			Mode types.String `tfsdk:"mode" json:"mode"`
			Sort types.String `tfsdk:"sort" json:"sort"`
		} `tfsdk:"tooltip" json:"tooltip"`
		Text *struct {
			TitleSize types.Number `tfsdk:"title_size" json:"titleSize"`
			ValueSize types.Number `tfsdk:"value_size" json:"valueSize"`
		} `tfsdk:"text" json:"text"`
		FullHighlight types.Bool `tfsdk:"full_highlight" json:"fullHighlight"`
	} `tfsdk:"panel_options" json:"PanelOptions"`
	PanelFieldConfig *struct {
		LineWidth         types.Int64  `tfsdk:"line_width" json:"lineWidth"`
		FillOpacity       types.Int64  `tfsdk:"fill_opacity" json:"fillOpacity"`
		GradientMode      types.String `tfsdk:"gradient_mode" json:"gradientMode"`
		AxisPlacement     types.String `tfsdk:"axis_placement" json:"axisPlacement"`
		AxisColorMode     types.String `tfsdk:"axis_color_mode" json:"axisColorMode"`
		AxisLabel         types.String `tfsdk:"axis_label" json:"axisLabel"`
		AxisWidth         types.Number `tfsdk:"axis_width" json:"axisWidth"`
		AxisSoftMin       types.Number `tfsdk:"axis_soft_min" json:"axisSoftMin"`
		AxisSoftMax       types.Number `tfsdk:"axis_soft_max" json:"axisSoftMax"`
		AxisGridShow      types.Bool   `tfsdk:"axis_grid_show" json:"axisGridShow"`
		ScaleDistribution *struct {
			Type            types.String `tfsdk:"type" json:"type"`
			Log             types.Number `tfsdk:"log" json:"log"`
			LinearThreshold types.Number `tfsdk:"linear_threshold" json:"linearThreshold"`
		} `tfsdk:"scale_distribution" json:"scaleDistribution"`
		HideFrom *struct {
			Tooltip types.Bool `tfsdk:"tooltip" json:"tooltip"`
			Legend  types.Bool `tfsdk:"legend" json:"legend"`
			Viz     types.Bool `tfsdk:"viz" json:"viz"`
		} `tfsdk:"hide_from" json:"hideFrom"`
		ThresholdsStyle *struct {
			Mode types.String `tfsdk:"mode" json:"mode"`
		} `tfsdk:"thresholds_style" json:"thresholdsStyle"`
		AxisCenteredZero types.Bool `tfsdk:"axis_centered_zero" json:"axisCenteredZero"`
	} `tfsdk:"panel_field_config" json:"PanelFieldConfig"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *BarChartPanelCfgDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_barchartpanelcfg"
}

func (d *BarChartPanelCfgDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"panel_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"x_field": schema.StringAttribute{
						MarkdownDescription: `Manually select which field from the dataset to represent the x field.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"color_by_field": schema.StringAttribute{
						MarkdownDescription: `Use the color value for a sibling field to color each bar value.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"orientation": schema.StringAttribute{
						MarkdownDescription: `Controls the orientation of the bar chart, either vertical or horizontal.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"bar_radius": schema.NumberAttribute{
						MarkdownDescription: `Controls the radius of each bar.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"x_tick_label_rotation": schema.Int64Attribute{
						MarkdownDescription: `Controls the rotation of the x axis labels.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"x_tick_label_max_length": schema.Int64Attribute{
						MarkdownDescription: `Sets the max length that a label can have before it is truncated.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"x_tick_label_spacing": schema.Int64Attribute{
						MarkdownDescription: `Controls the spacing between x axis labels.
negative values indicate backwards skipping behavior`,
						Computed: false,
						Optional: true,
						Required: false,
					},

					"stacking": schema.StringAttribute{
						MarkdownDescription: `Controls whether bars are stacked or not, either normally or in percent mode.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_value": schema.StringAttribute{
						MarkdownDescription: `This controls whether values are shown on top or to the left of bars.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"bar_width": schema.NumberAttribute{
						MarkdownDescription: `Controls the width of bars. 1 = Max width, 0 = Min width.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"group_width": schema.NumberAttribute{
						MarkdownDescription: `Controls the width of groups. 1 = max with, 0 = min width.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"legend": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"display_mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"placement": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"show_legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"as_table": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"is_visible": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"sort_by": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"sort_desc": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"width": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"calcs": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
								ElementType:         types.StringType,
							},
						},
					},

					"tooltip": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"sort": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"text": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"title_size": schema.NumberAttribute{
								MarkdownDescription: `Explicit title text size`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"value_size": schema.NumberAttribute{
								MarkdownDescription: `Explicit value text size`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"full_highlight": schema.BoolAttribute{
						MarkdownDescription: `Enables mode which highlights the entire bar area and shows tooltip when cursor
hovers over highlighted area`,
						Computed: false,
						Optional: false,
						Required: true,
					},
				},
			},

			"panel_field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"line_width": schema.Int64Attribute{
						MarkdownDescription: `Controls line width of the bars.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"fill_opacity": schema.Int64Attribute{
						MarkdownDescription: `Controls the fill opacity of the bars.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"gradient_mode": schema.StringAttribute{
						MarkdownDescription: `Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
Gradient appearance is influenced by the Fill opacity setting.`,
						Computed: false,
						Optional: true,
						Required: false,
					},

					"axis_placement": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_color_mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_label": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_width": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_min": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_max": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_grid_show": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"scale_distribution": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"log": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"linear_threshold": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"hide_from": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"tooltip": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"viz": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"thresholds_style": schema.SingleNestedAttribute{
						MarkdownDescription: `Threshold rendering`,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"axis_centered_zero": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *BarChartPanelCfgDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *BarChartPanelCfgDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data BarChartPanelCfgDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
