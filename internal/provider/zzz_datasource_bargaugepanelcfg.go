// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &BarGaugePanelCfgDataSource{}
	_ datasource.DataSourceWithConfigure = &BarGaugePanelCfgDataSource{}
)

func NewBarGaugePanelCfgDataSource() datasource.DataSource {
	return &BarGaugePanelCfgDataSource{}
}

// BarGaugePanelCfgDataSource defines the data source implementation.
type BarGaugePanelCfgDataSource struct{}

// BarGaugePanelCfgDataSourceModel describes the data source data model.
type BarGaugePanelCfgDataSourceModel struct {
	PanelOptions *struct {
		DisplayMode   types.String `tfsdk:"display_mode" json:"displayMode"`
		ShowUnfilled  types.Bool   `tfsdk:"show_unfilled" json:"showUnfilled"`
		MinVizWidth   types.Int64  `tfsdk:"min_viz_width" json:"minVizWidth"`
		ReduceOptions *struct {
			Values types.Bool   `tfsdk:"values" json:"values"`
			Limit  types.Number `tfsdk:"limit" json:"limit"`
			Calcs  types.List   `tfsdk:"calcs" json:"calcs"`
			Fields types.String `tfsdk:"fields" json:"fields"`
		} `tfsdk:"reduce_options" json:"reduceOptions"`
		Text *struct {
			TitleSize types.Number `tfsdk:"title_size" json:"titleSize"`
			ValueSize types.Number `tfsdk:"value_size" json:"valueSize"`
		} `tfsdk:"text" json:"text"`
		MinVizHeight types.Int64  `tfsdk:"min_viz_height" json:"minVizHeight"`
		Orientation  types.String `tfsdk:"orientation" json:"orientation"`
	} `tfsdk:"panel_options" json:"PanelOptions"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *BarGaugePanelCfgDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bargaugepanelcfg"
}

func (d *BarGaugePanelCfgDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"panel_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"display_mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_unfilled": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"min_viz_width": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"reduce_options": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"values": schema.BoolAttribute{
								MarkdownDescription: `If true show each row value`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"limit": schema.NumberAttribute{
								MarkdownDescription: `if showing all values limit`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"calcs": schema.ListAttribute{
								MarkdownDescription: `When !values, pick one value for the whole field`,
								Computed:            false,
								Optional:            false,
								Required:            true,
								ElementType:         types.StringType,
							},

							"fields": schema.StringAttribute{
								MarkdownDescription: `Which fields to show.  By default this is only numeric fields`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"text": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"title_size": schema.NumberAttribute{
								MarkdownDescription: `Explicit title text size`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"value_size": schema.NumberAttribute{
								MarkdownDescription: `Explicit value text size`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"min_viz_height": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"orientation": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *BarGaugePanelCfgDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *BarGaugePanelCfgDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data BarGaugePanelCfgDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
