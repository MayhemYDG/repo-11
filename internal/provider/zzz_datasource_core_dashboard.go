// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &CoreDashboardDataSource{}
	_ datasource.DataSourceWithConfigure = &CoreDashboardDataSource{}
)

func NewCoreDashboardDataSource() datasource.DataSource {
	return &CoreDashboardDataSource{}
}

// CoreDashboardDataSource defines the data source implementation.
type CoreDashboardDataSource struct{}

// CoreDashboardDataSourceModel describes the data source data model.
type CoreDashboardDataSourceModel struct {
	Id           types.Int64  `tfsdk:"id"`
	Uid          types.String `tfsdk:"uid"`
	Title        types.String `tfsdk:"title"`
	Description  types.String `tfsdk:"description"`
	Revision     types.Int64  `tfsdk:"revision"`
	GnetId       types.String `tfsdk:"gnet_id"`
	Tags         types.List   `tfsdk:"tags"`
	Style        types.String `tfsdk:"style"`
	Timezone     types.String `tfsdk:"timezone"`
	Editable     types.Bool   `tfsdk:"editable"`
	GraphTooltip types.Int64  `tfsdk:"graph_tooltip"`
	Time         *struct {
		From types.String `tfsdk:"from"`
		To   types.String `tfsdk:"to"`
	} `tfsdk:"time"`
	Timepicker *struct {
		Collapse         types.Bool `tfsdk:"collapse"`
		Enable           types.Bool `tfsdk:"enable"`
		Hidden           types.Bool `tfsdk:"hidden"`
		RefreshIntervals types.List `tfsdk:"refresh_intervals"`
		TimeOptions      types.List `tfsdk:"time_options"`
	} `tfsdk:"timepicker"`
	FiscalYearStartMonth types.Int64  `tfsdk:"fiscal_year_start_month"`
	LiveNow              types.Bool   `tfsdk:"live_now"`
	WeekStart            types.String `tfsdk:"week_start"`
	SchemaVersion        types.Int64  `tfsdk:"schema_version"`
	Version              types.Int64  `tfsdk:"version"`
	Panels               types.List   `tfsdk:"panels"`
	Templating           *struct {
		List []struct {
			Id           types.String `tfsdk:"id"`
			Type         types.String `tfsdk:"type"`
			Name         types.String `tfsdk:"name"`
			Label        types.String `tfsdk:"label"`
			RootStateKey types.String `tfsdk:"root_state_key"`
			Global       types.Bool   `tfsdk:"global"`
			Hide         types.Int64  `tfsdk:"hide"`
			SkipUrlSync  types.Bool   `tfsdk:"skip_url_sync"`
			Index        types.Int64  `tfsdk:"index"`
			State        types.String `tfsdk:"state"`
			Error        *struct {
			} `tfsdk:"error"`
			Description types.String `tfsdk:"description"`
			Datasource  *struct {
				Type types.String `tfsdk:"type"`
				Uid  types.String `tfsdk:"uid"`
			} `tfsdk:"datasource"`
		} `tfsdk:"list"`
	} `tfsdk:"templating"`
	Annotations *struct {
		List []struct {
			Datasource struct {
				Type types.String `tfsdk:"type"`
				Uid  types.String `tfsdk:"uid"`
			} `tfsdk:"datasource"`
			Enable    types.Bool   `tfsdk:"enable"`
			Name      types.String `tfsdk:"name"`
			BuiltIn   types.Int64  `tfsdk:"built_in"`
			Hide      types.Bool   `tfsdk:"hide"`
			IconColor types.String `tfsdk:"icon_color"`
			Type      types.String `tfsdk:"type"`
			RawQuery  types.String `tfsdk:"raw_query"`
			ShowIn    types.Int64  `tfsdk:"show_in"`
			Target    *struct {
				Limit    types.Int64  `tfsdk:"limit"`
				MatchAny types.Bool   `tfsdk:"match_any"`
				Tags     types.List   `tfsdk:"tags"`
				Type     types.String `tfsdk:"type"`
			} `tfsdk:"target"`
		} `tfsdk:"list"`
	} `tfsdk:"annotations"`
	Links []struct {
		Title       types.String `tfsdk:"title"`
		Type        types.String `tfsdk:"type"`
		Icon        types.String `tfsdk:"icon"`
		Tooltip     types.String `tfsdk:"tooltip"`
		Url         types.String `tfsdk:"url"`
		Tags        types.List   `tfsdk:"tags"`
		AsDropdown  types.Bool   `tfsdk:"as_dropdown"`
		TargetBlank types.Bool   `tfsdk:"target_blank"`
		IncludeVars types.Bool   `tfsdk:"include_vars"`
		KeepTime    types.Bool   `tfsdk:"keep_time"`
	} `tfsdk:"links"`
	Snapshot *struct {
		Created     types.String `tfsdk:"created"`
		Expires     types.String `tfsdk:"expires"`
		External    types.Bool   `tfsdk:"external"`
		ExternalUrl types.String `tfsdk:"external_url"`
		Id          types.Int64  `tfsdk:"id"`
		Key         types.String `tfsdk:"key"`
		Name        types.String `tfsdk:"name"`
		OrgId       types.Int64  `tfsdk:"org_id"`
		Updated     types.String `tfsdk:"updated"`
		Url         types.String `tfsdk:"url"`
		UserId      types.Int64  `tfsdk:"user_id"`
	} `tfsdk:"snapshot"`
	ToJSON types.String `tfsdk:"to_json"`
}

// CoreDashboardDataSourceModelJSON describes the data source data model when exported to json.
type CoreDashboardDataSourceModelJSON struct {
	Id           *int64   `json:"id,omitempty"`
	Uid          *string  `json:"uid,omitempty"`
	Title        *string  `json:"title,omitempty"`
	Description  *string  `json:"description,omitempty"`
	Revision     int64    `json:"revision"`
	GnetId       *string  `json:"gnetId,omitempty"`
	Tags         []string `json:"tags,omitempty"`
	Style        string   `json:"style"`
	Timezone     *string  `json:"timezone,omitempty"`
	Editable     bool     `json:"editable"`
	GraphTooltip int64    `json:"graphTooltip"`
	Time         *struct {
		From string `json:"from"`
		To   string `json:"to"`
	} `json:"time,omitempty"`
	Timepicker *struct {
		Collapse         bool     `json:"collapse"`
		Enable           bool     `json:"enable"`
		Hidden           bool     `json:"hidden"`
		RefreshIntervals []string `json:"refresh_intervals"`
		TimeOptions      []string `json:"time_options"`
	} `json:"timepicker,omitempty"`
	FiscalYearStartMonth *int64   `json:"fiscalYearStartMonth,omitempty"`
	LiveNow              *bool    `json:"liveNow,omitempty"`
	WeekStart            *string  `json:"weekStart,omitempty"`
	SchemaVersion        int64    `json:"schemaVersion"`
	Version              *int64   `json:"version,omitempty"`
	Panels               []string `json:"panels,omitempty"`
	Templating           *struct {
		List []struct {
			Id           string  `json:"id"`
			Type         string  `json:"type"`
			Name         string  `json:"name"`
			Label        *string `json:"label,omitempty"`
			RootStateKey *string `json:"rootStateKey,omitempty"`
			Global       bool    `json:"global"`
			Hide         int64   `json:"hide"`
			SkipUrlSync  bool    `json:"skipUrlSync"`
			Index        int64   `json:"index"`
			State        string  `json:"state"`
			Error        *struct {
			} `json:"error,omitempty"`
			Description *string `json:"description,omitempty"`
			Datasource  *struct {
				Type *string `json:"type,omitempty"`
				Uid  *string `json:"uid,omitempty"`
			} `json:"datasource,omitempty"`
		} `json:"list,omitempty"`
	} `json:"templating,omitempty"`
	Annotations *struct {
		List []struct {
			Datasource struct {
				Type *string `json:"type,omitempty"`
				Uid  *string `json:"uid,omitempty"`
			} `json:"datasource"`
			Enable    bool    `json:"enable"`
			Name      *string `json:"name,omitempty"`
			BuiltIn   int64   `json:"builtIn"`
			Hide      *bool   `json:"hide,omitempty"`
			IconColor *string `json:"iconColor,omitempty"`
			Type      string  `json:"type"`
			RawQuery  *string `json:"rawQuery,omitempty"`
			ShowIn    int64   `json:"showIn"`
			Target    *struct {
				Limit    int64    `json:"limit"`
				MatchAny bool     `json:"matchAny"`
				Tags     []string `json:"tags"`
				Type     string   `json:"type"`
			} `json:"target,omitempty"`
		} `json:"list,omitempty"`
	} `json:"annotations,omitempty"`
	Links []struct {
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		Icon        string   `json:"icon"`
		Tooltip     string   `json:"tooltip"`
		Url         string   `json:"url"`
		Tags        []string `json:"tags"`
		AsDropdown  bool     `json:"asDropdown"`
		TargetBlank bool     `json:"targetBlank"`
		IncludeVars bool     `json:"includeVars"`
		KeepTime    bool     `json:"keepTime"`
	} `json:"links,omitempty"`
	Snapshot *struct {
		Created     string  `json:"created"`
		Expires     string  `json:"expires"`
		External    bool    `json:"external"`
		ExternalUrl string  `json:"externalUrl"`
		Id          int64   `json:"id"`
		Key         string  `json:"key"`
		Name        string  `json:"name"`
		OrgId       int64   `json:"orgId"`
		Updated     string  `json:"updated"`
		Url         *string `json:"url,omitempty"`
		UserId      int64   `json:"userId"`
	} `json:"snapshot,omitempty"`
}

func (d *CoreDashboardDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_core_dashboard"
}

func (d *CoreDashboardDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"id": schema.Int64Attribute{
				MarkdownDescription: `Unique numeric identifier for the dashboard.
TODO must isolate or remove identifiers local to a Grafana instance...?`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"uid": schema.StringAttribute{
				MarkdownDescription: `Unique dashboard identifier that can be generated by anyone. string (8-40)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Title of dashboard.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description of dashboard.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"revision": schema.Int64Attribute{
				MarkdownDescription: `Version of the current dashboard data`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"gnet_id": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `Tags associated with dashboard.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"style": schema.StringAttribute{
				MarkdownDescription: `Theme of dashboard.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"timezone": schema.StringAttribute{
				MarkdownDescription: `Timezone of dashboard. Accepts IANA TZDB zone ID or "browser" or "utc".`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"editable": schema.BoolAttribute{
				MarkdownDescription: `Whether a dashboard is editable or not.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"graph_tooltip": schema.Int64Attribute{
				MarkdownDescription: `Configuration of dashboard cursor sync behavior.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"time": schema.SingleNestedAttribute{
				MarkdownDescription: `Time range for dashboard, e.g. last 6 hours, last 7 days, etc`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"from": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"to": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"timepicker": schema.SingleNestedAttribute{
				MarkdownDescription: `TODO docs
TODO this appears to be spread all over in the frontend. Concepts will likely need tidying in tandem with schema changes`,
				Computed: false,
				Optional: true,
				Required: false,
				Attributes: map[string]schema.Attribute{
					"collapse": schema.BoolAttribute{
						MarkdownDescription: `Whether timepicker is collapsed or not.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"enable": schema.BoolAttribute{
						MarkdownDescription: `Whether timepicker is enabled or not.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"hidden": schema.BoolAttribute{
						MarkdownDescription: `Whether timepicker is visible or not.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"refresh_intervals": schema.ListAttribute{
						MarkdownDescription: `Selectable intervals for auto-refresh.`,
						Computed:            false,
						Optional:            false,
						Required:            true,
						ElementType:         types.StringType,
					},
					"time_options": schema.ListAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
						ElementType:         types.StringType,
					},
				},
			},
			"fiscal_year_start_month": schema.Int64Attribute{
				MarkdownDescription: `The month that the fiscal year starts on.  0 = January, 11 = December`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"live_now": schema.BoolAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"week_start": schema.StringAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"schema_version": schema.Int64Attribute{
				MarkdownDescription: `Version of the JSON schema, incremented each time a Grafana update brings
changes to said schema.
TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion`,
				Computed: true,
				Optional: true,
				Required: false,
			},
			"version": schema.Int64Attribute{
				MarkdownDescription: `Version of the dashboard, incremented each time the dashboard is updated.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"panels": schema.ListAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"templating": schema.SingleNestedAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"list": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"name": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"label": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"root_state_key": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"global": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"hide": schema.Int64Attribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"skip_url_sync": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"index": schema.Int64Attribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"state": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
								},
								"error": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"description": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"datasource": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: `The plugin type-id`,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"uid": schema.StringAttribute{
											MarkdownDescription: `Specific datasource instance`,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
							},
						},
					},
				},
			},
			"annotations": schema.SingleNestedAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"list": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"datasource": schema.SingleNestedAttribute{
									MarkdownDescription: `Datasource to use for annotation.`,
									Computed:            false,
									Optional:            false,
									Required:            true,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"uid": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"enable": schema.BoolAttribute{
									MarkdownDescription: `Whether annotation is enabled.`,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"name": schema.StringAttribute{
									MarkdownDescription: `Name of annotation.`,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"built_in": schema.Int64Attribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"hide": schema.BoolAttribute{
									MarkdownDescription: `Whether to hide annotation.`,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"icon_color": schema.StringAttribute{
									MarkdownDescription: `Annotation icon color.`,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"type": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"raw_query": schema.StringAttribute{
									MarkdownDescription: `Query for annotation data.`,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"show_in": schema.Int64Attribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"target": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"limit": schema.Int64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"match_any": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"tags": schema.ListAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
											ElementType:         types.StringType,
										},
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
									},
								},
							},
						},
					},
				},
			},
			"links": schema.ListNestedAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"icon": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tooltip": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"url": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tags": schema.ListAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
							ElementType:         types.StringType,
						},
						"as_dropdown": schema.BoolAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"target_blank": schema.BoolAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"include_vars": schema.BoolAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"keep_time": schema.BoolAttribute{
							MarkdownDescription: ``,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"snapshot": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"created": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"expires": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"external": schema.BoolAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"external_url": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"id": schema.Int64Attribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"key": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"name": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"org_id": schema.Int64Attribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"updated": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"url": schema.StringAttribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"user_id": schema.Int64Attribute{
						MarkdownDescription: `TODO docs`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *CoreDashboardDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *CoreDashboardDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data CoreDashboardDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	d.applyDefaults(&data)
	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// fix up the panel Attribute
	// Read into a map[string]interface{} and then marshal it back to JSON
	// This is a workaround for the fact that the panel attribute should be a list of maps but is a list of json strings
	dataMap := make(map[string]interface{})
	err = json.Unmarshal(JSONConfig, &dataMap)
	if err != nil {
		resp.Diagnostics.AddError("error unmarshalling config into Go map", err.Error())
		return
	}
	panels := data.Panels.Elements()
	panelsMaps := make([]map[string]interface{}, len(panels))
	for i, panel := range panels {
		panelMap := make(map[string]interface{})
		err = json.Unmarshal([]byte(panel.(types.String).ValueString()), &panelMap)
		if err != nil {
			resp.Diagnostics.AddError("error unmarshalling panel into go map", err.Error())
			return
		}
		panelsMaps[i] = panelMap
	}

	dataMap["panels"] = panelsMaps
	JSONConfig, err = json.MarshalIndent(dataMap, "", "  ")
	if err != nil {
		resp.Diagnostics.AddError("error marshalling go map into json", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (d *CoreDashboardDataSource) applyDefaults(data *CoreDashboardDataSourceModel) {
	if data.Revision.IsNull() {
		data.Revision = types.Int64Value(-1)
	}
	if data.Style.IsNull() {
		data.Style = types.StringValue(`dark`)
	}
	if data.Timezone.IsNull() {
		data.Timezone = types.StringValue(`browser`)
	}
	if data.Editable.IsNull() {
		data.Editable = types.BoolValue(true)
	}
	if data.GraphTooltip.IsNull() {
		data.GraphTooltip = types.Int64Value(0)
	}
	if data.Time != nil && data.Time.From.IsNull() {
		data.Time.From = types.StringValue(`now-6h`)
	}
	if data.Time != nil && data.Time.To.IsNull() {
		data.Time.To = types.StringValue(`now`)
	}
	if data.Timepicker != nil && data.Timepicker.Collapse.IsNull() {
		data.Timepicker.Collapse = types.BoolValue(false)
	}
	if data.Timepicker != nil && data.Timepicker.Enable.IsNull() {
		data.Timepicker.Enable = types.BoolValue(true)
	}
	if data.Timepicker != nil && data.Timepicker.Hidden.IsNull() {
		data.Timepicker.Hidden = types.BoolValue(false)
	}
	if data.FiscalYearStartMonth.IsNull() {
		data.FiscalYearStartMonth = types.Int64Value(0)
	}
	if data.SchemaVersion.IsNull() {
		data.SchemaVersion = types.Int64Value(36)
	}
}

func (d CoreDashboardDataSourceModel) MarshalJSON() ([]byte, error) {
	attr_id := d.Id.ValueInt64()
	attr_uid := d.Uid.ValueString()
	attr_title := d.Title.ValueString()
	attr_description := d.Description.ValueString()
	attr_revision := d.Revision.ValueInt64()
	attr_gnetid := d.GnetId.ValueString()
	attr_style := d.Style.ValueString()
	attr_timezone := d.Timezone.ValueString()
	attr_editable := d.Editable.ValueBool()
	attr_graphtooltip := d.GraphTooltip.ValueInt64()
	attr_fiscalyearstartmonth := d.FiscalYearStartMonth.ValueInt64()
	attr_livenow := d.LiveNow.ValueBool()
	attr_weekstart := d.WeekStart.ValueString()
	attr_schemaversion := d.SchemaVersion.ValueInt64()
	attr_version := d.Version.ValueInt64()

	model := &CoreDashboardDataSourceModelJSON{
		Id:                   &attr_id,
		Uid:                  &attr_uid,
		Title:                &attr_title,
		Description:          &attr_description,
		Revision:             attr_revision,
		GnetId:               &attr_gnetid,
		Style:                attr_style,
		Timezone:             &attr_timezone,
		Editable:             attr_editable,
		GraphTooltip:         attr_graphtooltip,
		FiscalYearStartMonth: &attr_fiscalyearstartmonth,
		LiveNow:              &attr_livenow,
		WeekStart:            &attr_weekstart,
		SchemaVersion:        attr_schemaversion,
		Version:              &attr_version,
	}
	return json.Marshal(model)
}
