// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &CorePreferencesDataSource{}
	_ datasource.DataSourceWithConfigure = &CorePreferencesDataSource{}
)

func NewCorePreferencesDataSource() datasource.DataSource {
	return &CorePreferencesDataSource{}
}

// CorePreferencesDataSource defines the data source implementation.
type CorePreferencesDataSource struct{}

type CorePreferencesDataSourceModel_QueryHistory struct {
	HomeTab types.String `tfsdk:"home_tab"`
}

func (m CorePreferencesDataSourceModel_QueryHistory) MarshalJSON() ([]byte, error) {
	type jsonCorePreferencesDataSourceModel_QueryHistory struct {
		HomeTab *string `json:"homeTab,omitempty"`
	}

	attr_hometab := m.HomeTab.ValueString()

	model := &jsonCorePreferencesDataSourceModel_QueryHistory{
		HomeTab: &attr_hometab,
	}
	return json.Marshal(model)
}

type CorePreferencesDataSourceModel struct {
	ToJSON           types.String                                 `tfsdk:"to_json"`
	HomeDashboardUID types.String                                 `tfsdk:"home_dashboard_uid"`
	Timezone         types.String                                 `tfsdk:"timezone"`
	WeekStart        types.String                                 `tfsdk:"week_start"`
	Theme            types.String                                 `tfsdk:"theme"`
	Language         types.String                                 `tfsdk:"language"`
	QueryHistory     *CorePreferencesDataSourceModel_QueryHistory `tfsdk:"query_history"`
}

func (m CorePreferencesDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonCorePreferencesDataSourceModel struct {
		HomeDashboardUID *string     `json:"homeDashboardUID,omitempty"`
		Timezone         *string     `json:"timezone,omitempty"`
		WeekStart        *string     `json:"weekStart,omitempty"`
		Theme            *string     `json:"theme,omitempty"`
		Language         *string     `json:"language,omitempty"`
		QueryHistory     interface{} `json:"queryHistory,omitempty"`
	}

	attr_homedashboarduid := m.HomeDashboardUID.ValueString()
	attr_timezone := m.Timezone.ValueString()
	attr_weekstart := m.WeekStart.ValueString()
	attr_theme := m.Theme.ValueString()
	attr_language := m.Language.ValueString()
	var attr_queryhistory interface{}
	if m.QueryHistory != nil {
		attr_queryhistory = m.QueryHistory
	}

	model := &jsonCorePreferencesDataSourceModel{
		HomeDashboardUID: &attr_homedashboarduid,
		Timezone:         &attr_timezone,
		WeekStart:        &attr_weekstart,
		Theme:            &attr_theme,
		Language:         &attr_language,
		QueryHistory:     attr_queryhistory,
	}
	return json.Marshal(model)
}

func (d *CorePreferencesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_core_preferences"
}

func (d *CorePreferencesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"home_dashboard_uid": schema.StringAttribute{
				MarkdownDescription: `UID for the home dashboard`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"timezone": schema.StringAttribute{
				MarkdownDescription: `The timezone selection
TODO: this should use the timezone defined in common`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"week_start": schema.StringAttribute{
				MarkdownDescription: `day of the week (sunday, monday, etc)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"theme": schema.StringAttribute{
				MarkdownDescription: `light, dark, empty is default`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"language": schema.StringAttribute{
				MarkdownDescription: `Selected language (beta)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"query_history": schema.SingleNestedAttribute{
				MarkdownDescription: `Explore query history preferences`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"home_tab": schema.StringAttribute{
						MarkdownDescription: `one of: '' | 'query' | 'starred';`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *CorePreferencesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *CorePreferencesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data CorePreferencesDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	d.applyDefaults(&data)
	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (d *CorePreferencesDataSource) applyDefaults(data *CorePreferencesDataSourceModel) {
	if data.QueryHistory == nil {
		data.QueryHistory = &CorePreferencesDataSourceModel_QueryHistory{}
	}
}
