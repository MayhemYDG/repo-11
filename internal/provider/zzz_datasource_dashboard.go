// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &dashboardDataSource{}
	_ datasource.DataSourceWithConfigure = &dashboardDataSource{}
)

func NewdashboardDataSource() datasource.DataSource {
	return &dashboardDataSource{}
}

// dashboardDataSource defines the data source implementation.
type dashboardDataSource struct {
}

// dashboardDataSourceModel describes the data source data model.
type dashboardDataSourceModel struct {
	Id                   types.Int64  `tfsdk:"id" json:"id"`
	Uid                  types.String `tfsdk:"uid" json:"uid"`
	Title                types.String `tfsdk:"title" json:"title"`
	Description          types.String `tfsdk:"description" json:"description"`
	Revision             types.Int64  `tfsdk:"revision" json:"revision"`
	GnetId               types.String `tfsdk:"gnet_id" json:"gnetId"`
	Style                types.String `tfsdk:"style" json:"style"`
	Timezone             types.String `tfsdk:"timezone" json:"timezone"`
	Editable             types.Bool   `tfsdk:"editable" json:"editable"`
	GraphTooltip         types.Int64  `tfsdk:"graph_tooltip" json:"graphTooltip"`
	FiscalYearStartMonth types.Int64  `tfsdk:"fiscal_year_start_month" json:"fiscalYearStartMonth"`
	LiveNow              types.Bool   `tfsdk:"live_now" json:"liveNow"`
	WeekStart            types.String `tfsdk:"week_start" json:"weekStart"`
	SchemaVersion        types.Int64  `tfsdk:"schema_version" json:"schemaVersion"`
	Version              types.Int64  `tfsdk:"version" json:"version"`
	ToJSON               types.String `tfsdk:"to_json"`
}

func (d *dashboardDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dashboard"
}

func (d *dashboardDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"id": schema.Int64Attribute{
				MarkdownDescription: `Unique numeric identifier for the dashboard.
TODO must isolate or remove identifiers local to a Grafana instance...?`,
				Computed: false,
				Optional: true,
				Required: false,
			},

			"uid": schema.StringAttribute{
				MarkdownDescription: `Unique dashboard identifier that can be generated by anyone. string (8-40)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"title": schema.StringAttribute{
				MarkdownDescription: `Title of dashboard.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: `Description of dashboard.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"revision": schema.Int64Attribute{
				MarkdownDescription: `Version of the current dashboard data`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"gnet_id": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"style": schema.StringAttribute{
				MarkdownDescription: `Theme of dashboard.`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"timezone": schema.StringAttribute{
				MarkdownDescription: `Timezone of dashboard. Accepts IANA TZDB zone ID or "browser" or "utc".`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"editable": schema.BoolAttribute{
				MarkdownDescription: `Whether a dashboard is editable or not.`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"graph_tooltip": schema.Int64Attribute{
				MarkdownDescription: `Configuration of dashboard cursor sync behavior.`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"fiscal_year_start_month": schema.Int64Attribute{
				MarkdownDescription: `The month that the fiscal year starts on.  0 = January, 11 = December`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"live_now": schema.BoolAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"week_start": schema.StringAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"schema_version": schema.Int64Attribute{
				MarkdownDescription: `Version of the JSON schema, incremented each time a Grafana update brings
changes to said schema.
TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion`,
				Computed: false,
				Optional: false,
				Required: true,
			},

			"version": schema.Int64Attribute{
				MarkdownDescription: `Version of the dashboard, incremented each time the dashboard is updated.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *dashboardDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *dashboardDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data dashboardDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
