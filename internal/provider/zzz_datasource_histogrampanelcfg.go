// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &HistogramPanelCfgDataSource{}
	_ datasource.DataSourceWithConfigure = &HistogramPanelCfgDataSource{}
)

func NewHistogramPanelCfgDataSource() datasource.DataSource {
	return &HistogramPanelCfgDataSource{}
}

// HistogramPanelCfgDataSource defines the data source implementation.
type HistogramPanelCfgDataSource struct{}

// HistogramPanelCfgDataSourceModel describes the data source data model.
type HistogramPanelCfgDataSourceModel struct {
	PanelOptions *struct {
		BucketSize   types.Int64 `tfsdk:"bucket_size" json:"bucketSize"`
		BucketOffset types.Int64 `tfsdk:"bucket_offset" json:"bucketOffset"`
		Legend       *struct {
			DisplayMode types.String `tfsdk:"display_mode" json:"displayMode"`
			Placement   types.String `tfsdk:"placement" json:"placement"`
			ShowLegend  types.Bool   `tfsdk:"show_legend" json:"showLegend"`
			AsTable     types.Bool   `tfsdk:"as_table" json:"asTable"`
			IsVisible   types.Bool   `tfsdk:"is_visible" json:"isVisible"`
			SortBy      types.String `tfsdk:"sort_by" json:"sortBy"`
			SortDesc    types.Bool   `tfsdk:"sort_desc" json:"sortDesc"`
			Width       types.Number `tfsdk:"width" json:"width"`
			Calcs       types.List   `tfsdk:"calcs" json:"calcs"`
		} `tfsdk:"legend" json:"legend"`
		Tooltip *struct {
			Mode types.String `tfsdk:"mode" json:"mode"`
			Sort types.String `tfsdk:"sort" json:"sort"`
		} `tfsdk:"tooltip" json:"tooltip"`
		Combine types.Bool `tfsdk:"combine" json:"combine"`
	} `tfsdk:"panel_options" json:"PanelOptions"`
	PanelFieldConfig *struct {
		LineWidth         types.Int64  `tfsdk:"line_width" json:"lineWidth"`
		FillOpacity       types.Int64  `tfsdk:"fill_opacity" json:"fillOpacity"`
		AxisPlacement     types.String `tfsdk:"axis_placement" json:"axisPlacement"`
		AxisColorMode     types.String `tfsdk:"axis_color_mode" json:"axisColorMode"`
		AxisLabel         types.String `tfsdk:"axis_label" json:"axisLabel"`
		AxisWidth         types.Number `tfsdk:"axis_width" json:"axisWidth"`
		AxisSoftMin       types.Number `tfsdk:"axis_soft_min" json:"axisSoftMin"`
		AxisSoftMax       types.Number `tfsdk:"axis_soft_max" json:"axisSoftMax"`
		AxisGridShow      types.Bool   `tfsdk:"axis_grid_show" json:"axisGridShow"`
		ScaleDistribution *struct {
			Type            types.String `tfsdk:"type" json:"type"`
			Log             types.Number `tfsdk:"log" json:"log"`
			LinearThreshold types.Number `tfsdk:"linear_threshold" json:"linearThreshold"`
		} `tfsdk:"scale_distribution" json:"scaleDistribution"`
		HideFrom *struct {
			Tooltip types.Bool `tfsdk:"tooltip" json:"tooltip"`
			Legend  types.Bool `tfsdk:"legend" json:"legend"`
			Viz     types.Bool `tfsdk:"viz" json:"viz"`
		} `tfsdk:"hide_from" json:"hideFrom"`
		GradientMode     types.String `tfsdk:"gradient_mode" json:"gradientMode"`
		AxisCenteredZero types.Bool   `tfsdk:"axis_centered_zero" json:"axisCenteredZero"`
	} `tfsdk:"panel_field_config" json:"PanelFieldConfig"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *HistogramPanelCfgDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_histogrampanelcfg"
}

func (d *HistogramPanelCfgDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"panel_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"bucket_size": schema.Int64Attribute{
						MarkdownDescription: `Size of each bucket`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"bucket_offset": schema.Int64Attribute{
						MarkdownDescription: `Offset buckets by this amount`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"legend": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"display_mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"placement": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"show_legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"as_table": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"is_visible": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"sort_by": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"sort_desc": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"width": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"calcs": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
								ElementType:         types.StringType,
							},
						},
					},

					"tooltip": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"sort": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"combine": schema.BoolAttribute{
						MarkdownDescription: `Combines multiple series into a single histogram`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"panel_field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"line_width": schema.Int64Attribute{
						MarkdownDescription: `Controls line width of the bars.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"fill_opacity": schema.Int64Attribute{
						MarkdownDescription: `Controls the fill opacity of the bars.`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_placement": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_color_mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_label": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_width": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_min": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_max": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_grid_show": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"scale_distribution": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"log": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"linear_threshold": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"hide_from": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"tooltip": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"viz": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"gradient_mode": schema.StringAttribute{
						MarkdownDescription: `Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
Gradient appearance is influenced by the Fill opacity setting.`,
						Computed: false,
						Optional: true,
						Required: false,
					},

					"axis_centered_zero": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *HistogramPanelCfgDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *HistogramPanelCfgDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data HistogramPanelCfgDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
