// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &PanelDashboardListDataSource{}
	_ datasource.DataSourceWithConfigure = &PanelDashboardListDataSource{}
)

func NewPanelDashboardListDataSource() datasource.DataSource {
	return &PanelDashboardListDataSource{}
}

// PanelDashboardListDataSource defines the data source implementation.
type PanelDashboardListDataSource struct{}

type PanelDashboardListDataSourceModel_Options struct {
	Layout             types.String `tfsdk:"layout"`
	ShowStarred        types.Bool   `tfsdk:"show_starred"`
	ShowRecentlyViewed types.Bool   `tfsdk:"show_recently_viewed"`
	ShowSearch         types.Bool   `tfsdk:"show_search"`
	ShowHeadings       types.Bool   `tfsdk:"show_headings"`
	MaxItems           types.Int64  `tfsdk:"max_items"`
	Query              types.String `tfsdk:"query"`
	FolderId           types.Int64  `tfsdk:"folder_id"`
	Tags               types.List   `tfsdk:"tags"`
}

func (m PanelDashboardListDataSourceModel_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_Options struct {
		Layout             *string  `json:"layout,omitempty"`
		ShowStarred        bool     `json:"showStarred"`
		ShowRecentlyViewed bool     `json:"showRecentlyViewed"`
		ShowSearch         bool     `json:"showSearch"`
		ShowHeadings       bool     `json:"showHeadings"`
		MaxItems           int64    `json:"maxItems"`
		Query              string   `json:"query"`
		FolderId           *int64   `json:"folderId,omitempty"`
		Tags               []string `json:"tags"`
	}
	attr_layout := m.Layout.ValueString()
	attr_showstarred := m.ShowStarred.ValueBool()
	attr_showrecentlyviewed := m.ShowRecentlyViewed.ValueBool()
	attr_showsearch := m.ShowSearch.ValueBool()
	attr_showheadings := m.ShowHeadings.ValueBool()
	attr_maxitems := m.MaxItems.ValueInt64()
	attr_query := m.Query.ValueString()
	attr_folderid := m.FolderId.ValueInt64()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}

	model := &jsonPanelDashboardListDataSourceModel_Options{
		Layout:             &attr_layout,
		ShowStarred:        attr_showstarred,
		ShowRecentlyViewed: attr_showrecentlyviewed,
		ShowSearch:         attr_showsearch,
		ShowHeadings:       attr_showheadings,
		MaxItems:           attr_maxitems,
		Query:              attr_query,
		FolderId:           &attr_folderid,
		Tags:               attr_tags,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_Targets struct {
}

func (m PanelDashboardListDataSourceModel_Targets) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_Targets struct {
	}

	model := &jsonPanelDashboardListDataSourceModel_Targets{}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_Datasource struct {
	Type types.String `tfsdk:"type"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelDashboardListDataSourceModel_Datasource) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_Datasource struct {
		Type *string `json:"type,omitempty"`
		Uid  *string `json:"uid,omitempty"`
	}
	attr_type := m.Type.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_Datasource{
		Type: &attr_type,
		Uid:  &attr_uid,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_GridPos struct {
	H      types.Int64 `tfsdk:"h"`
	W      types.Int64 `tfsdk:"w"`
	X      types.Int64 `tfsdk:"x"`
	Y      types.Int64 `tfsdk:"y"`
	Static types.Bool  `tfsdk:"static"`
}

func (m PanelDashboardListDataSourceModel_GridPos) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_GridPos struct {
		H      int64 `json:"h"`
		W      int64 `json:"w"`
		X      int64 `json:"x"`
		Y      int64 `json:"y"`
		Static *bool `json:"static,omitempty"`
	}
	attr_h := m.H.ValueInt64()
	attr_w := m.W.ValueInt64()
	attr_x := m.X.ValueInt64()
	attr_y := m.Y.ValueInt64()
	attr_static := m.Static.ValueBool()

	model := &jsonPanelDashboardListDataSourceModel_GridPos{
		H:      attr_h,
		W:      attr_w,
		X:      attr_x,
		Y:      attr_y,
		Static: &attr_static,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_Links struct {
	Title       types.String `tfsdk:"title"`
	Type        types.String `tfsdk:"type"`
	Icon        types.String `tfsdk:"icon"`
	Tooltip     types.String `tfsdk:"tooltip"`
	Url         types.String `tfsdk:"url"`
	Tags        types.List   `tfsdk:"tags"`
	AsDropdown  types.Bool   `tfsdk:"as_dropdown"`
	TargetBlank types.Bool   `tfsdk:"target_blank"`
	IncludeVars types.Bool   `tfsdk:"include_vars"`
	KeepTime    types.Bool   `tfsdk:"keep_time"`
}

func (m PanelDashboardListDataSourceModel_Links) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_Links struct {
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		Icon        string   `json:"icon"`
		Tooltip     string   `json:"tooltip"`
		Url         string   `json:"url"`
		Tags        []string `json:"tags"`
		AsDropdown  bool     `json:"asDropdown"`
		TargetBlank bool     `json:"targetBlank"`
		IncludeVars bool     `json:"includeVars"`
		KeepTime    bool     `json:"keepTime"`
	}
	attr_title := m.Title.ValueString()
	attr_type := m.Type.ValueString()
	attr_icon := m.Icon.ValueString()
	attr_tooltip := m.Tooltip.ValueString()
	attr_url := m.Url.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_asdropdown := m.AsDropdown.ValueBool()
	attr_targetblank := m.TargetBlank.ValueBool()
	attr_includevars := m.IncludeVars.ValueBool()
	attr_keeptime := m.KeepTime.ValueBool()

	model := &jsonPanelDashboardListDataSourceModel_Links{
		Title:       attr_title,
		Type:        attr_type,
		Icon:        attr_icon,
		Tooltip:     attr_tooltip,
		Url:         attr_url,
		Tags:        attr_tags,
		AsDropdown:  attr_asdropdown,
		TargetBlank: attr_targetblank,
		IncludeVars: attr_includevars,
		KeepTime:    attr_keeptime,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_Transformations_Filter struct {
	Id types.String `tfsdk:"id"`
}

func (m PanelDashboardListDataSourceModel_Transformations_Filter) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_Transformations_Filter struct {
		Id string `json:"id"`
	}
	attr_id := m.Id.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_Transformations_Filter{
		Id: attr_id,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_Transformations struct {
	Id       types.String                                              `tfsdk:"id"`
	Disabled types.Bool                                                `tfsdk:"disabled"`
	Filter   *PanelDashboardListDataSourceModel_Transformations_Filter `tfsdk:"filter"`
}

func (m PanelDashboardListDataSourceModel_Transformations) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_Transformations struct {
		Id       string      `json:"id"`
		Disabled *bool       `json:"disabled,omitempty"`
		Filter   interface{} `json:"filter,omitempty"`
	}
	attr_id := m.Id.ValueString()
	attr_disabled := m.Disabled.ValueBool()
	var attr_filter interface{}
	if m.Filter != nil {
		attr_filter = m.Filter
	}

	model := &jsonPanelDashboardListDataSourceModel_Transformations{
		Id:       attr_id,
		Disabled: &attr_disabled,
		Filter:   attr_filter,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_LibraryPanel struct {
	Name types.String `tfsdk:"name"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelDashboardListDataSourceModel_LibraryPanel) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_LibraryPanel struct {
		Name string `json:"name"`
		Uid  string `json:"uid"`
	}
	attr_name := m.Name.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_LibraryPanel{
		Name: attr_name,
		Uid:  attr_uid,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
	Value types.Float64 `tfsdk:"value"`
	Color types.String  `tfsdk:"color"`
	State types.String  `tfsdk:"state"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
		Value *float64 `json:"value,omitempty"`
		Color string   `json:"color"`
		State *string  `json:"state,omitempty"`
	}
	attr_value := m.Value.ValueFloat64()
	attr_color := m.Color.ValueString()
	attr_state := m.State.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds_Steps{
		Value: &attr_value,
		Color: attr_color,
		State: &attr_state,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds struct {
	Mode  types.String                                                              `tfsdk:"mode"`
	Steps []PanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds_Steps `tfsdk:"steps"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds struct {
		Mode  string        `json:"mode"`
		Steps []interface{} `json:"steps"`
	}
	attr_mode := m.Mode.ValueString()
	attr_steps := []interface{}{}
	for _, v := range m.Steps {
		attr_steps = append(attr_steps, v)
	}

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds{
		Mode:  attr_mode,
		Steps: attr_steps,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Defaults_Color struct {
	Mode       types.String `tfsdk:"mode"`
	FixedColor types.String `tfsdk:"fixed_color"`
	SeriesBy   types.String `tfsdk:"series_by"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Defaults_Color) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Color struct {
		Mode       string  `json:"mode"`
		FixedColor *string `json:"fixedColor,omitempty"`
		SeriesBy   *string `json:"seriesBy,omitempty"`
	}
	attr_mode := m.Mode.ValueString()
	attr_fixedcolor := m.FixedColor.ValueString()
	attr_seriesby := m.SeriesBy.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Color{
		Mode:       attr_mode,
		FixedColor: &attr_fixedcolor,
		SeriesBy:   &attr_seriesby,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Defaults_Custom struct {
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Defaults_Custom) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Custom struct {
	}

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults_Custom{}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Defaults struct {
	DisplayName       types.String                                                       `tfsdk:"display_name"`
	DisplayNameFromDS types.String                                                       `tfsdk:"display_name_from_ds"`
	Description       types.String                                                       `tfsdk:"description"`
	Path              types.String                                                       `tfsdk:"path"`
	Writeable         types.Bool                                                         `tfsdk:"writeable"`
	Filterable        types.Bool                                                         `tfsdk:"filterable"`
	Unit              types.String                                                       `tfsdk:"unit"`
	Decimals          types.Float64                                                      `tfsdk:"decimals"`
	Min               types.Float64                                                      `tfsdk:"min"`
	Max               types.Float64                                                      `tfsdk:"max"`
	Thresholds        *PanelDashboardListDataSourceModel_FieldConfig_Defaults_Thresholds `tfsdk:"thresholds"`
	Color             *PanelDashboardListDataSourceModel_FieldConfig_Defaults_Color      `tfsdk:"color"`
	NoValue           types.String                                                       `tfsdk:"no_value"`
	Custom            *PanelDashboardListDataSourceModel_FieldConfig_Defaults_Custom     `tfsdk:"custom"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Defaults) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults struct {
		DisplayName       *string     `json:"displayName,omitempty"`
		DisplayNameFromDS *string     `json:"displayNameFromDS,omitempty"`
		Description       *string     `json:"description,omitempty"`
		Path              *string     `json:"path,omitempty"`
		Writeable         *bool       `json:"writeable,omitempty"`
		Filterable        *bool       `json:"filterable,omitempty"`
		Unit              *string     `json:"unit,omitempty"`
		Decimals          *float64    `json:"decimals,omitempty"`
		Min               *float64    `json:"min,omitempty"`
		Max               *float64    `json:"max,omitempty"`
		Thresholds        interface{} `json:"thresholds,omitempty"`
		Color             interface{} `json:"color,omitempty"`
		NoValue           *string     `json:"noValue,omitempty"`
		Custom            interface{} `json:"custom,omitempty"`
	}
	attr_displayname := m.DisplayName.ValueString()
	attr_displaynamefromds := m.DisplayNameFromDS.ValueString()
	attr_description := m.Description.ValueString()
	attr_path := m.Path.ValueString()
	attr_writeable := m.Writeable.ValueBool()
	attr_filterable := m.Filterable.ValueBool()
	attr_unit := m.Unit.ValueString()
	attr_decimals := m.Decimals.ValueFloat64()
	attr_min := m.Min.ValueFloat64()
	attr_max := m.Max.ValueFloat64()
	var attr_thresholds interface{}
	if m.Thresholds != nil {
		attr_thresholds = m.Thresholds
	}
	var attr_color interface{}
	if m.Color != nil {
		attr_color = m.Color
	}
	attr_novalue := m.NoValue.ValueString()
	var attr_custom interface{}
	if m.Custom != nil {
		attr_custom = m.Custom
	}

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Defaults{
		DisplayName:       &attr_displayname,
		DisplayNameFromDS: &attr_displaynamefromds,
		Description:       &attr_description,
		Path:              &attr_path,
		Writeable:         &attr_writeable,
		Filterable:        &attr_filterable,
		Unit:              &attr_unit,
		Decimals:          &attr_decimals,
		Min:               &attr_min,
		Max:               &attr_max,
		Thresholds:        attr_thresholds,
		Color:             attr_color,
		NoValue:           &attr_novalue,
		Custom:            attr_custom,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Overrides_Matcher struct {
	Id types.String `tfsdk:"id"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Overrides_Matcher) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Overrides_Matcher struct {
		Id string `json:"id"`
	}
	attr_id := m.Id.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Overrides_Matcher{
		Id: attr_id,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Overrides_Properties struct {
	Id types.String `tfsdk:"id"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Overrides_Properties) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Overrides_Properties struct {
		Id string `json:"id"`
	}
	attr_id := m.Id.ValueString()

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Overrides_Properties{
		Id: attr_id,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig_Overrides struct {
	Matcher    PanelDashboardListDataSourceModel_FieldConfig_Overrides_Matcher      `tfsdk:"matcher"`
	Properties []PanelDashboardListDataSourceModel_FieldConfig_Overrides_Properties `tfsdk:"properties"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig_Overrides) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig_Overrides struct {
		Matcher    interface{}   `json:"matcher"`
		Properties []interface{} `json:"properties"`
	}
	var attr_matcher interface{} = m.Matcher
	attr_properties := []interface{}{}
	for _, v := range m.Properties {
		attr_properties = append(attr_properties, v)
	}

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig_Overrides{
		Matcher:    attr_matcher,
		Properties: attr_properties,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel_FieldConfig struct {
	Defaults  PanelDashboardListDataSourceModel_FieldConfig_Defaults    `tfsdk:"defaults"`
	Overrides []PanelDashboardListDataSourceModel_FieldConfig_Overrides `tfsdk:"overrides"`
}

func (m PanelDashboardListDataSourceModel_FieldConfig) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel_FieldConfig struct {
		Defaults  interface{}   `json:"defaults"`
		Overrides []interface{} `json:"overrides"`
	}
	var attr_defaults interface{} = m.Defaults
	attr_overrides := []interface{}{}
	for _, v := range m.Overrides {
		attr_overrides = append(attr_overrides, v)
	}

	model := &jsonPanelDashboardListDataSourceModel_FieldConfig{
		Defaults:  attr_defaults,
		Overrides: attr_overrides,
	}
	return json.Marshal(model)
}

type PanelDashboardListDataSourceModel struct {
	ToJSON          types.String                                        `tfsdk:"to_json"`
	PanelLayout     types.String                                        `tfsdk:"panel_layout"`
	Options         PanelDashboardListDataSourceModel_Options           `tfsdk:"options"`
	Type            types.String                                        `tfsdk:"type"`
	Id              types.Int64                                         `tfsdk:"id"`
	PluginVersion   types.String                                        `tfsdk:"plugin_version"`
	Tags            types.List                                          `tfsdk:"tags"`
	Targets         []PanelDashboardListDataSourceModel_Targets         `tfsdk:"targets"`
	Title           types.String                                        `tfsdk:"title"`
	Description     types.String                                        `tfsdk:"description"`
	Transparent     types.Bool                                          `tfsdk:"transparent"`
	Datasource      *PanelDashboardListDataSourceModel_Datasource       `tfsdk:"datasource"`
	GridPos         *PanelDashboardListDataSourceModel_GridPos          `tfsdk:"grid_pos"`
	Links           []PanelDashboardListDataSourceModel_Links           `tfsdk:"links"`
	Repeat          types.String                                        `tfsdk:"repeat"`
	RepeatDirection types.String                                        `tfsdk:"repeat_direction"`
	RepeatPanelId   types.Int64                                         `tfsdk:"repeat_panel_id"`
	MaxDataPoints   types.Float64                                       `tfsdk:"max_data_points"`
	Transformations []PanelDashboardListDataSourceModel_Transformations `tfsdk:"transformations"`
	Interval        types.String                                        `tfsdk:"interval"`
	TimeFrom        types.String                                        `tfsdk:"time_from"`
	TimeShift       types.String                                        `tfsdk:"time_shift"`
	LibraryPanel    *PanelDashboardListDataSourceModel_LibraryPanel     `tfsdk:"library_panel"`
	FieldConfig     PanelDashboardListDataSourceModel_FieldConfig       `tfsdk:"field_config"`
}

func (m PanelDashboardListDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonPanelDashboardListDataSourceModel struct {
		PanelLayout     string        `json:"PanelLayout"`
		Options         interface{}   `json:"options"`
		Type            string        `json:"type"`
		Id              *int64        `json:"id,omitempty"`
		PluginVersion   *string       `json:"pluginVersion,omitempty"`
		Tags            []string      `json:"tags,omitempty"`
		Targets         []interface{} `json:"targets,omitempty"`
		Title           *string       `json:"title,omitempty"`
		Description     *string       `json:"description,omitempty"`
		Transparent     bool          `json:"transparent"`
		Datasource      interface{}   `json:"datasource,omitempty"`
		GridPos         interface{}   `json:"gridPos,omitempty"`
		Links           []interface{} `json:"links,omitempty"`
		Repeat          *string       `json:"repeat,omitempty"`
		RepeatDirection string        `json:"repeatDirection"`
		RepeatPanelId   *int64        `json:"repeatPanelId,omitempty"`
		MaxDataPoints   *float64      `json:"maxDataPoints,omitempty"`
		Transformations []interface{} `json:"transformations"`
		Interval        *string       `json:"interval,omitempty"`
		TimeFrom        *string       `json:"timeFrom,omitempty"`
		TimeShift       *string       `json:"timeShift,omitempty"`
		LibraryPanel    interface{}   `json:"libraryPanel,omitempty"`
		FieldConfig     interface{}   `json:"fieldConfig"`
	}
	attr_panellayout := m.PanelLayout.ValueString()
	var attr_options interface{} = m.Options
	attr_type := m.Type.ValueString()
	attr_id := m.Id.ValueInt64()
	attr_pluginversion := m.PluginVersion.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_targets := []interface{}{}
	for _, v := range m.Targets {
		attr_targets = append(attr_targets, v)
	}
	attr_title := m.Title.ValueString()
	attr_description := m.Description.ValueString()
	attr_transparent := m.Transparent.ValueBool()
	var attr_datasource interface{}
	if m.Datasource != nil {
		attr_datasource = m.Datasource
	}
	var attr_gridpos interface{}
	if m.GridPos != nil {
		attr_gridpos = m.GridPos
	}
	attr_links := []interface{}{}
	for _, v := range m.Links {
		attr_links = append(attr_links, v)
	}
	attr_repeat := m.Repeat.ValueString()
	attr_repeatdirection := m.RepeatDirection.ValueString()
	attr_repeatpanelid := m.RepeatPanelId.ValueInt64()
	attr_maxdatapoints := m.MaxDataPoints.ValueFloat64()
	attr_transformations := []interface{}{}
	for _, v := range m.Transformations {
		attr_transformations = append(attr_transformations, v)
	}
	attr_interval := m.Interval.ValueString()
	attr_timefrom := m.TimeFrom.ValueString()
	attr_timeshift := m.TimeShift.ValueString()
	var attr_librarypanel interface{}
	if m.LibraryPanel != nil {
		attr_librarypanel = m.LibraryPanel
	}
	var attr_fieldconfig interface{} = m.FieldConfig

	model := &jsonPanelDashboardListDataSourceModel{
		PanelLayout:     attr_panellayout,
		Options:         attr_options,
		Type:            attr_type,
		Id:              &attr_id,
		PluginVersion:   &attr_pluginversion,
		Tags:            attr_tags,
		Targets:         attr_targets,
		Title:           &attr_title,
		Description:     &attr_description,
		Transparent:     attr_transparent,
		Datasource:      attr_datasource,
		GridPos:         attr_gridpos,
		Links:           attr_links,
		Repeat:          &attr_repeat,
		RepeatDirection: attr_repeatdirection,
		RepeatPanelId:   &attr_repeatpanelid,
		MaxDataPoints:   &attr_maxdatapoints,
		Transformations: attr_transformations,
		Interval:        &attr_interval,
		TimeFrom:        &attr_timefrom,
		TimeShift:       &attr_timeshift,
		LibraryPanel:    attr_librarypanel,
		FieldConfig:     attr_fieldconfig,
	}
	return json.Marshal(model)
}

func (d *PanelDashboardListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_panel_dashboard_list"
}

func (d *PanelDashboardListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"panel_layout": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},
			"options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"layout": schema.StringAttribute{
						MarkdownDescription: ` Defaults to "list".`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"show_starred": schema.BoolAttribute{
						MarkdownDescription: ` Defaults to true.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"show_recently_viewed": schema.BoolAttribute{
						MarkdownDescription: ` Defaults to false.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"show_search": schema.BoolAttribute{
						MarkdownDescription: ` Defaults to false.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"show_headings": schema.BoolAttribute{
						MarkdownDescription: ` Defaults to true.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"max_items": schema.Int64Attribute{
						MarkdownDescription: ` Defaults to 10.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"query": schema.StringAttribute{
						MarkdownDescription: ` Defaults to "".`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"folder_id": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"tags": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						ElementType:         types.StringType,
					},
				},
			},
			"type": schema.StringAttribute{
				MarkdownDescription: `The panel plugin type id. May not be empty. Defaults to "dashboardlist".`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"id": schema.Int64Attribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"plugin_version": schema.StringAttribute{
				MarkdownDescription: `FIXME this almost certainly has to be changed in favor of scuemata versions`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"targets": schema.ListNestedAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Panel title.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transparent": schema.BoolAttribute{
				MarkdownDescription: `Whether to display the panel without a background. Defaults to false.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"datasource": schema.SingleNestedAttribute{
				MarkdownDescription: `The datasource used in all targets.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"grid_pos": schema.SingleNestedAttribute{
				MarkdownDescription: `Grid position.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"h": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 9.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"w": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 12.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"x": schema.Int64Attribute{
						MarkdownDescription: `Panel x. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"y": schema.Int64Attribute{
						MarkdownDescription: `Panel y. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"static": schema.BoolAttribute{
						MarkdownDescription: `true if fixed`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"links": schema.ListNestedAttribute{
				MarkdownDescription: `Panel links.
TODO fill this out - seems there are a couple variants?`,
				Computed: false,
				Optional: true,
				Required: false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"icon": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tooltip": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"url": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tags": schema.ListAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
							ElementType:         types.StringType,
						},
						"as_dropdown": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"target_blank": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"include_vars": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"keep_time": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"repeat": schema.StringAttribute{
				MarkdownDescription: `Name of template variable to repeat for.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"repeat_direction": schema.StringAttribute{
				MarkdownDescription: `Direction to repeat in if 'repeat' is set.
"h" for horizontal, "v" for vertical.
TODO this is probably optional. Defaults to "h".`,
				Computed: true,
				Optional: true,
				Required: false,
			},
			"repeat_panel_id": schema.Int64Attribute{
				MarkdownDescription: `Id of the repeating panel.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"max_data_points": schema.Float64Attribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transformations": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							MarkdownDescription: `Unique identifier of transformer`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"disabled": schema.BoolAttribute{
							MarkdownDescription: `Disabled transformations are skipped`,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"filter": schema.SingleNestedAttribute{
							MarkdownDescription: `Optional frame matcher.  When missing it will be applied to all results`,
							Computed:            false,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									MarkdownDescription: ` Defaults to "".`,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},
			"interval": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_from": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_shift": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"library_panel": schema.SingleNestedAttribute{
				MarkdownDescription: `Dynamically load the panel`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"defaults": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								MarkdownDescription: `The display value for this field.  This supports template variables blank is auto`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"display_name_from_ds": schema.StringAttribute{
								MarkdownDescription: `This can be used by data sources that return and explicit naming structure for values and labels
When this property is configured, this value is used rather than the default naming strategy.`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"description": schema.StringAttribute{
								MarkdownDescription: `Human readable field metadata`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"path": schema.StringAttribute{
								MarkdownDescription: `An explicit path to the field in the datasource.  When the frame meta includes a path,
This will default to ${frame.meta.path}/${field.name}

When defined, this value can be used as an identifier within the datasource scope, and
may be used to update the results`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"writeable": schema.BoolAttribute{
								MarkdownDescription: `True if data source can write a value to the path.  Auth/authz are supported separately`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"filterable": schema.BoolAttribute{
								MarkdownDescription: `True if data source field supports ad-hoc filters`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"unit": schema.StringAttribute{
								MarkdownDescription: `Numeric Options`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"decimals": schema.Float64Attribute{
								MarkdownDescription: `Significant digits (for display)`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"min": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"max": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"thresholds": schema.SingleNestedAttribute{
								MarkdownDescription: `Map numeric values to states`,
								Computed:            false,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"steps": schema.ListNestedAttribute{
										MarkdownDescription: `Must be sorted by 'value', first value is always -Infinity`,
										Computed:            false,
										Optional:            false,
										Required:            true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"value": schema.Float64Attribute{
													MarkdownDescription: `TODO docs
FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON`,
													Computed: false,
													Optional: true,
													Required: false,
												},
												"color": schema.StringAttribute{
													MarkdownDescription: `TODO docs`,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"state": schema.StringAttribute{
													MarkdownDescription: `TODO docs
TODO are the values here enumerable into a disjunction?
Some seem to be listed in typescript comment`,
													Computed: false,
													Optional: true,
													Required: false,
												},
											},
										},
									},
								},
							},
							"color": schema.SingleNestedAttribute{
								MarkdownDescription: `Map values to a display color`,
								Computed:            false,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: `The main color scheme mode`,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"fixed_color": schema.StringAttribute{
										MarkdownDescription: `Stores the fixed color value if mode is fixed`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"series_by": schema.StringAttribute{
										MarkdownDescription: `Some visualizations need to know how to assign a series color from by value color schemes`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
							"no_value": schema.StringAttribute{
								MarkdownDescription: `Alternative to empty string`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"custom": schema.SingleNestedAttribute{
								MarkdownDescription: `custom is specified by the PanelFieldConfig field
in panel plugin schemas.`,
								Computed: false,
								Optional: true,
								Required: false,
							},
						},
					},
					"overrides": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"matcher": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											MarkdownDescription: ` Defaults to "".`,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"properties": schema.ListNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												MarkdownDescription: ` Defaults to "".`,
												Computed:            true,
												Optional:            true,
												Required:            false,
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *PanelDashboardListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *PanelDashboardListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data PanelDashboardListDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	d.applyDefaults(&data)
	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (d *PanelDashboardListDataSource) applyDefaults(data *PanelDashboardListDataSourceModel) {
	if data.Options.Layout.IsNull() {
		data.Options.Layout = types.StringValue(`list`)
	}
	if data.Options.ShowStarred.IsNull() {
		data.Options.ShowStarred = types.BoolValue(true)
	}
	if data.Options.ShowRecentlyViewed.IsNull() {
		data.Options.ShowRecentlyViewed = types.BoolValue(false)
	}
	if data.Options.ShowSearch.IsNull() {
		data.Options.ShowSearch = types.BoolValue(false)
	}
	if data.Options.ShowHeadings.IsNull() {
		data.Options.ShowHeadings = types.BoolValue(true)
	}
	if data.Options.MaxItems.IsNull() {
		data.Options.MaxItems = types.Int64Value(10)
	}
	if data.Options.Query.IsNull() {
		data.Options.Query = types.StringValue(``)
	}
	if data.Type.IsNull() {
		data.Type = types.StringValue(`dashboardlist`)
	}
	if data.Transparent.IsNull() {
		data.Transparent = types.BoolValue(false)
	}
	if data.GridPos != nil && data.GridPos.H.IsNull() {
		data.GridPos.H = types.Int64Value(9)
	}
	if data.GridPos != nil && data.GridPos.W.IsNull() {
		data.GridPos.W = types.Int64Value(12)
	}
	if data.GridPos != nil && data.GridPos.X.IsNull() {
		data.GridPos.X = types.Int64Value(0)
	}
	if data.GridPos != nil && data.GridPos.Y.IsNull() {
		data.GridPos.Y = types.Int64Value(0)
	}
	if data.RepeatDirection.IsNull() {
		data.RepeatDirection = types.StringValue(`h`)
	}
}
