// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &PanelDebugDataSource{}
	_ datasource.DataSourceWithConfigure = &PanelDebugDataSource{}
)

func NewPanelDebugDataSource() datasource.DataSource {
	return &PanelDebugDataSource{}
}

// PanelDebugDataSource defines the data source implementation.
type PanelDebugDataSource struct{}

type PanelDebugDataSourceModel_Targets struct {
}

func (m PanelDebugDataSourceModel_Targets) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Targets struct {
	}

	model := &jsonPanelDebugDataSourceModel_Targets{}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_Datasource struct {
	Type types.String `tfsdk:"type"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelDebugDataSourceModel_Datasource) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Datasource struct {
		Type *string `json:"type,omitempty"`
		Uid  *string `json:"uid,omitempty"`
	}
	attr_type := m.Type.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelDebugDataSourceModel_Datasource{
		Type: &attr_type,
		Uid:  &attr_uid,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_GridPos struct {
	H      types.Int64 `tfsdk:"h"`
	W      types.Int64 `tfsdk:"w"`
	X      types.Int64 `tfsdk:"x"`
	Y      types.Int64 `tfsdk:"y"`
	Static types.Bool  `tfsdk:"static"`
}

func (m PanelDebugDataSourceModel_GridPos) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_GridPos struct {
		H      int64 `json:"h"`
		W      int64 `json:"w"`
		X      int64 `json:"x"`
		Y      int64 `json:"y"`
		Static *bool `json:"static,omitempty"`
	}
	attr_h := m.H.ValueInt64()
	attr_w := m.W.ValueInt64()
	attr_x := m.X.ValueInt64()
	attr_y := m.Y.ValueInt64()
	attr_static := m.Static.ValueBool()

	model := &jsonPanelDebugDataSourceModel_GridPos{
		H:      attr_h,
		W:      attr_w,
		X:      attr_x,
		Y:      attr_y,
		Static: &attr_static,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_Links struct {
	Title       types.String `tfsdk:"title"`
	Type        types.String `tfsdk:"type"`
	Icon        types.String `tfsdk:"icon"`
	Tooltip     types.String `tfsdk:"tooltip"`
	Url         types.String `tfsdk:"url"`
	Tags        types.List   `tfsdk:"tags"`
	AsDropdown  types.Bool   `tfsdk:"as_dropdown"`
	TargetBlank types.Bool   `tfsdk:"target_blank"`
	IncludeVars types.Bool   `tfsdk:"include_vars"`
	KeepTime    types.Bool   `tfsdk:"keep_time"`
}

func (m PanelDebugDataSourceModel_Links) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Links struct {
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		Icon        string   `json:"icon"`
		Tooltip     string   `json:"tooltip"`
		Url         string   `json:"url"`
		Tags        []string `json:"tags"`
		AsDropdown  bool     `json:"asDropdown"`
		TargetBlank bool     `json:"targetBlank"`
		IncludeVars bool     `json:"includeVars"`
		KeepTime    bool     `json:"keepTime"`
	}
	attr_title := m.Title.ValueString()
	attr_type := m.Type.ValueString()
	attr_icon := m.Icon.ValueString()
	attr_tooltip := m.Tooltip.ValueString()
	attr_url := m.Url.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_asdropdown := m.AsDropdown.ValueBool()
	attr_targetblank := m.TargetBlank.ValueBool()
	attr_includevars := m.IncludeVars.ValueBool()
	attr_keeptime := m.KeepTime.ValueBool()

	model := &jsonPanelDebugDataSourceModel_Links{
		Title:       attr_title,
		Type:        attr_type,
		Icon:        attr_icon,
		Tooltip:     attr_tooltip,
		Url:         attr_url,
		Tags:        attr_tags,
		AsDropdown:  attr_asdropdown,
		TargetBlank: attr_targetblank,
		IncludeVars: attr_includevars,
		KeepTime:    attr_keeptime,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_Transformations_Filter struct {
	Id types.String `tfsdk:"id"`
}

func (m PanelDebugDataSourceModel_Transformations_Filter) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Transformations_Filter struct {
		Id string `json:"id"`
	}
	attr_id := m.Id.ValueString()

	model := &jsonPanelDebugDataSourceModel_Transformations_Filter{
		Id: attr_id,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_Transformations struct {
	Id       types.String                                      `tfsdk:"id"`
	Disabled types.Bool                                        `tfsdk:"disabled"`
	Filter   *PanelDebugDataSourceModel_Transformations_Filter `tfsdk:"filter"`
}

func (m PanelDebugDataSourceModel_Transformations) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Transformations struct {
		Id       string      `json:"id"`
		Disabled *bool       `json:"disabled,omitempty"`
		Filter   interface{} `json:"filter,omitempty"`
	}
	attr_id := m.Id.ValueString()
	attr_disabled := m.Disabled.ValueBool()
	var attr_filter interface{}
	if m.Filter != nil {
		attr_filter = m.Filter
	}

	model := &jsonPanelDebugDataSourceModel_Transformations{
		Id:       attr_id,
		Disabled: &attr_disabled,
		Filter:   attr_filter,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_LibraryPanel struct {
	Name types.String `tfsdk:"name"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelDebugDataSourceModel_LibraryPanel) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_LibraryPanel struct {
		Name string `json:"name"`
		Uid  string `json:"uid"`
	}
	attr_name := m.Name.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelDebugDataSourceModel_LibraryPanel{
		Name: attr_name,
		Uid:  attr_uid,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_Options_Counters struct {
	Render        types.Bool `tfsdk:"render"`
	DataChanged   types.Bool `tfsdk:"data_changed"`
	SchemaChanged types.Bool `tfsdk:"schema_changed"`
}

func (m PanelDebugDataSourceModel_Options_Counters) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Options_Counters struct {
		Render        bool `json:"render"`
		DataChanged   bool `json:"dataChanged"`
		SchemaChanged bool `json:"schemaChanged"`
	}
	attr_render := m.Render.ValueBool()
	attr_datachanged := m.DataChanged.ValueBool()
	attr_schemachanged := m.SchemaChanged.ValueBool()

	model := &jsonPanelDebugDataSourceModel_Options_Counters{
		Render:        attr_render,
		DataChanged:   attr_datachanged,
		SchemaChanged: attr_schemachanged,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_Options struct {
	Mode     types.String                                `tfsdk:"mode"`
	Counters *PanelDebugDataSourceModel_Options_Counters `tfsdk:"counters"`
}

func (m PanelDebugDataSourceModel_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_Options struct {
		Mode     string      `json:"mode"`
		Counters interface{} `json:"counters,omitempty"`
	}
	attr_mode := m.Mode.ValueString()
	var attr_counters interface{}
	if m.Counters != nil {
		attr_counters = m.Counters
	}

	model := &jsonPanelDebugDataSourceModel_Options{
		Mode:     attr_mode,
		Counters: attr_counters,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
	Value types.Float64 `tfsdk:"value"`
	Color types.String  `tfsdk:"color"`
	State types.String  `tfsdk:"state"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
		Value *float64 `json:"value,omitempty"`
		Color string   `json:"color"`
		State *string  `json:"state,omitempty"`
	}
	attr_value := m.Value.ValueFloat64()
	attr_color := m.Color.ValueString()
	attr_state := m.State.ValueString()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds_Steps{
		Value: &attr_value,
		Color: attr_color,
		State: &attr_state,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds struct {
	Mode  types.String                                                      `tfsdk:"mode"`
	Steps []PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds_Steps `tfsdk:"steps"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds struct {
		Mode  string        `json:"mode"`
		Steps []interface{} `json:"steps"`
	}
	attr_mode := m.Mode.ValueString()
	attr_steps := []interface{}{}
	for _, v := range m.Steps {
		attr_steps = append(attr_steps, v)
	}

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds{
		Mode:  attr_mode,
		Steps: attr_steps,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Color struct {
	Mode       types.String `tfsdk:"mode"`
	FixedColor types.String `tfsdk:"fixed_color"`
	SeriesBy   types.String `tfsdk:"series_by"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Color) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Color struct {
		Mode       string  `json:"mode"`
		FixedColor *string `json:"fixedColor,omitempty"`
		SeriesBy   *string `json:"seriesBy,omitempty"`
	}
	attr_mode := m.Mode.ValueString()
	attr_fixedcolor := m.FixedColor.ValueString()
	attr_seriesby := m.SeriesBy.ValueString()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Color{
		Mode:       attr_mode,
		FixedColor: &attr_fixedcolor,
		SeriesBy:   &attr_seriesby,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution struct {
	Type            types.String  `tfsdk:"type"`
	Log             types.Float64 `tfsdk:"log"`
	LinearThreshold types.Float64 `tfsdk:"linear_threshold"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution struct {
		Type            string   `json:"type"`
		Log             *float64 `json:"log,omitempty"`
		LinearThreshold *float64 `json:"linearThreshold,omitempty"`
	}
	attr_type := m.Type.ValueString()
	attr_log := m.Log.ValueFloat64()
	attr_linearthreshold := m.LinearThreshold.ValueFloat64()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution{
		Type:            attr_type,
		Log:             &attr_log,
		LinearThreshold: &attr_linearthreshold,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
	Tooltip types.Bool `tfsdk:"tooltip"`
	Legend  types.Bool `tfsdk:"legend"`
	Viz     types.Bool `tfsdk:"viz"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
		Tooltip bool `json:"tooltip"`
		Legend  bool `json:"legend"`
		Viz     bool `json:"viz"`
	}
	attr_tooltip := m.Tooltip.ValueBool()
	attr_legend := m.Legend.ValueBool()
	attr_viz := m.Viz.ValueBool()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom_HideFrom{
		Tooltip: attr_tooltip,
		Legend:  attr_legend,
		Viz:     attr_viz,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle struct {
	Mode types.String `tfsdk:"mode"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle struct {
		Mode string `json:"mode"`
	}
	attr_mode := m.Mode.ValueString()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle{
		Mode: attr_mode,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults_Custom struct {
	LineWidth         types.Int64                                                              `tfsdk:"line_width"`
	FillOpacity       types.Int64                                                              `tfsdk:"fill_opacity"`
	GradientMode      types.String                                                             `tfsdk:"gradient_mode"`
	AxisPlacement     types.String                                                             `tfsdk:"axis_placement"`
	AxisColorMode     types.String                                                             `tfsdk:"axis_color_mode"`
	AxisLabel         types.String                                                             `tfsdk:"axis_label"`
	AxisWidth         types.Float64                                                            `tfsdk:"axis_width"`
	AxisSoftMin       types.Float64                                                            `tfsdk:"axis_soft_min"`
	AxisSoftMax       types.Float64                                                            `tfsdk:"axis_soft_max"`
	AxisGridShow      types.Bool                                                               `tfsdk:"axis_grid_show"`
	ScaleDistribution *PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution `tfsdk:"scale_distribution"`
	HideFrom          *PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_HideFrom          `tfsdk:"hide_from"`
	ThresholdsStyle   *PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle   `tfsdk:"thresholds_style"`
	AxisCenteredZero  types.Bool                                                               `tfsdk:"axis_centered_zero"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults_Custom) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom struct {
		LineWidth         *int64      `json:"lineWidth,omitempty"`
		FillOpacity       *int64      `json:"fillOpacity,omitempty"`
		GradientMode      *string     `json:"gradientMode,omitempty"`
		AxisPlacement     *string     `json:"axisPlacement,omitempty"`
		AxisColorMode     *string     `json:"axisColorMode,omitempty"`
		AxisLabel         *string     `json:"axisLabel,omitempty"`
		AxisWidth         *float64    `json:"axisWidth,omitempty"`
		AxisSoftMin       *float64    `json:"axisSoftMin,omitempty"`
		AxisSoftMax       *float64    `json:"axisSoftMax,omitempty"`
		AxisGridShow      *bool       `json:"axisGridShow,omitempty"`
		ScaleDistribution interface{} `json:"scaleDistribution,omitempty"`
		HideFrom          interface{} `json:"hideFrom,omitempty"`
		ThresholdsStyle   interface{} `json:"thresholdsStyle,omitempty"`
		AxisCenteredZero  *bool       `json:"axisCenteredZero,omitempty"`
	}
	attr_linewidth := m.LineWidth.ValueInt64()
	attr_fillopacity := m.FillOpacity.ValueInt64()
	attr_gradientmode := m.GradientMode.ValueString()
	attr_axisplacement := m.AxisPlacement.ValueString()
	attr_axiscolormode := m.AxisColorMode.ValueString()
	attr_axislabel := m.AxisLabel.ValueString()
	attr_axiswidth := m.AxisWidth.ValueFloat64()
	attr_axissoftmin := m.AxisSoftMin.ValueFloat64()
	attr_axissoftmax := m.AxisSoftMax.ValueFloat64()
	attr_axisgridshow := m.AxisGridShow.ValueBool()
	var attr_scaledistribution interface{}
	if m.ScaleDistribution != nil {
		attr_scaledistribution = m.ScaleDistribution
	}
	var attr_hidefrom interface{}
	if m.HideFrom != nil {
		attr_hidefrom = m.HideFrom
	}
	var attr_thresholdsstyle interface{}
	if m.ThresholdsStyle != nil {
		attr_thresholdsstyle = m.ThresholdsStyle
	}
	attr_axiscenteredzero := m.AxisCenteredZero.ValueBool()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults_Custom{
		LineWidth:         &attr_linewidth,
		FillOpacity:       &attr_fillopacity,
		GradientMode:      &attr_gradientmode,
		AxisPlacement:     &attr_axisplacement,
		AxisColorMode:     &attr_axiscolormode,
		AxisLabel:         &attr_axislabel,
		AxisWidth:         &attr_axiswidth,
		AxisSoftMin:       &attr_axissoftmin,
		AxisSoftMax:       &attr_axissoftmax,
		AxisGridShow:      &attr_axisgridshow,
		ScaleDistribution: attr_scaledistribution,
		HideFrom:          attr_hidefrom,
		ThresholdsStyle:   attr_thresholdsstyle,
		AxisCenteredZero:  &attr_axiscenteredzero,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Defaults struct {
	DisplayName       types.String                                               `tfsdk:"display_name"`
	DisplayNameFromDS types.String                                               `tfsdk:"display_name_from_ds"`
	Description       types.String                                               `tfsdk:"description"`
	Path              types.String                                               `tfsdk:"path"`
	Writeable         types.Bool                                                 `tfsdk:"writeable"`
	Filterable        types.Bool                                                 `tfsdk:"filterable"`
	Unit              types.String                                               `tfsdk:"unit"`
	Decimals          types.Float64                                              `tfsdk:"decimals"`
	Min               types.Float64                                              `tfsdk:"min"`
	Max               types.Float64                                              `tfsdk:"max"`
	Thresholds        *PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds `tfsdk:"thresholds"`
	Color             *PanelDebugDataSourceModel_FieldConfig_Defaults_Color      `tfsdk:"color"`
	NoValue           types.String                                               `tfsdk:"no_value"`
	Custom            *PanelDebugDataSourceModel_FieldConfig_Defaults_Custom     `tfsdk:"custom"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Defaults) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Defaults struct {
		DisplayName       *string     `json:"displayName,omitempty"`
		DisplayNameFromDS *string     `json:"displayNameFromDS,omitempty"`
		Description       *string     `json:"description,omitempty"`
		Path              *string     `json:"path,omitempty"`
		Writeable         *bool       `json:"writeable,omitempty"`
		Filterable        *bool       `json:"filterable,omitempty"`
		Unit              *string     `json:"unit,omitempty"`
		Decimals          *float64    `json:"decimals,omitempty"`
		Min               *float64    `json:"min,omitempty"`
		Max               *float64    `json:"max,omitempty"`
		Thresholds        interface{} `json:"thresholds,omitempty"`
		Color             interface{} `json:"color,omitempty"`
		NoValue           *string     `json:"noValue,omitempty"`
		Custom            interface{} `json:"custom,omitempty"`
	}
	attr_displayname := m.DisplayName.ValueString()
	attr_displaynamefromds := m.DisplayNameFromDS.ValueString()
	attr_description := m.Description.ValueString()
	attr_path := m.Path.ValueString()
	attr_writeable := m.Writeable.ValueBool()
	attr_filterable := m.Filterable.ValueBool()
	attr_unit := m.Unit.ValueString()
	attr_decimals := m.Decimals.ValueFloat64()
	attr_min := m.Min.ValueFloat64()
	attr_max := m.Max.ValueFloat64()
	var attr_thresholds interface{}
	if m.Thresholds != nil {
		attr_thresholds = m.Thresholds
	}
	var attr_color interface{}
	if m.Color != nil {
		attr_color = m.Color
	}
	attr_novalue := m.NoValue.ValueString()
	var attr_custom interface{}
	if m.Custom != nil {
		attr_custom = m.Custom
	}

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Defaults{
		DisplayName:       &attr_displayname,
		DisplayNameFromDS: &attr_displaynamefromds,
		Description:       &attr_description,
		Path:              &attr_path,
		Writeable:         &attr_writeable,
		Filterable:        &attr_filterable,
		Unit:              &attr_unit,
		Decimals:          &attr_decimals,
		Min:               &attr_min,
		Max:               &attr_max,
		Thresholds:        attr_thresholds,
		Color:             attr_color,
		NoValue:           &attr_novalue,
		Custom:            attr_custom,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Overrides_Matcher struct {
	Id types.String `tfsdk:"id"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Overrides_Matcher) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Overrides_Matcher struct {
		Id string `json:"id"`
	}
	attr_id := m.Id.ValueString()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Overrides_Matcher{
		Id: attr_id,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Overrides_Properties struct {
	Id types.String `tfsdk:"id"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Overrides_Properties) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Overrides_Properties struct {
		Id string `json:"id"`
	}
	attr_id := m.Id.ValueString()

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Overrides_Properties{
		Id: attr_id,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig_Overrides struct {
	Matcher    *PanelDebugDataSourceModel_FieldConfig_Overrides_Matcher     `tfsdk:"matcher"`
	Properties []PanelDebugDataSourceModel_FieldConfig_Overrides_Properties `tfsdk:"properties"`
}

func (m PanelDebugDataSourceModel_FieldConfig_Overrides) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig_Overrides struct {
		Matcher    interface{}   `json:"matcher,omitempty"`
		Properties []interface{} `json:"properties"`
	}
	var attr_matcher interface{}
	if m.Matcher != nil {
		attr_matcher = m.Matcher
	}
	attr_properties := []interface{}{}
	for _, v := range m.Properties {
		attr_properties = append(attr_properties, v)
	}

	model := &jsonPanelDebugDataSourceModel_FieldConfig_Overrides{
		Matcher:    attr_matcher,
		Properties: attr_properties,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel_FieldConfig struct {
	Defaults  *PanelDebugDataSourceModel_FieldConfig_Defaults   `tfsdk:"defaults"`
	Overrides []PanelDebugDataSourceModel_FieldConfig_Overrides `tfsdk:"overrides"`
}

func (m PanelDebugDataSourceModel_FieldConfig) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel_FieldConfig struct {
		Defaults  interface{}   `json:"defaults,omitempty"`
		Overrides []interface{} `json:"overrides"`
	}
	var attr_defaults interface{}
	if m.Defaults != nil {
		attr_defaults = m.Defaults
	}
	attr_overrides := []interface{}{}
	for _, v := range m.Overrides {
		attr_overrides = append(attr_overrides, v)
	}

	model := &jsonPanelDebugDataSourceModel_FieldConfig{
		Defaults:  attr_defaults,
		Overrides: attr_overrides,
	}
	return json.Marshal(model)
}

type PanelDebugDataSourceModel struct {
	ToJSON          types.String                                `tfsdk:"to_json"`
	Type            types.String                                `tfsdk:"type"`
	Id              types.Int64                                 `tfsdk:"id"`
	PluginVersion   types.String                                `tfsdk:"plugin_version"`
	Tags            types.List                                  `tfsdk:"tags"`
	Targets         []PanelDebugDataSourceModel_Targets         `tfsdk:"targets"`
	Title           types.String                                `tfsdk:"title"`
	Description     types.String                                `tfsdk:"description"`
	Transparent     types.Bool                                  `tfsdk:"transparent"`
	Datasource      *PanelDebugDataSourceModel_Datasource       `tfsdk:"datasource"`
	GridPos         *PanelDebugDataSourceModel_GridPos          `tfsdk:"grid_pos"`
	Links           []PanelDebugDataSourceModel_Links           `tfsdk:"links"`
	Repeat          types.String                                `tfsdk:"repeat"`
	RepeatDirection types.String                                `tfsdk:"repeat_direction"`
	RepeatPanelId   types.Int64                                 `tfsdk:"repeat_panel_id"`
	MaxDataPoints   types.Float64                               `tfsdk:"max_data_points"`
	Transformations []PanelDebugDataSourceModel_Transformations `tfsdk:"transformations"`
	Interval        types.String                                `tfsdk:"interval"`
	TimeFrom        types.String                                `tfsdk:"time_from"`
	TimeShift       types.String                                `tfsdk:"time_shift"`
	LibraryPanel    *PanelDebugDataSourceModel_LibraryPanel     `tfsdk:"library_panel"`
	Options         *PanelDebugDataSourceModel_Options          `tfsdk:"options"`
	FieldConfig     *PanelDebugDataSourceModel_FieldConfig      `tfsdk:"field_config"`
}

func (m PanelDebugDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonPanelDebugDataSourceModel struct {
		Type            string        `json:"type"`
		Id              *int64        `json:"id,omitempty"`
		PluginVersion   *string       `json:"pluginVersion,omitempty"`
		Tags            []string      `json:"tags,omitempty"`
		Targets         []interface{} `json:"targets,omitempty"`
		Title           *string       `json:"title,omitempty"`
		Description     *string       `json:"description,omitempty"`
		Transparent     bool          `json:"transparent"`
		Datasource      interface{}   `json:"datasource,omitempty"`
		GridPos         interface{}   `json:"gridPos,omitempty"`
		Links           []interface{} `json:"links,omitempty"`
		Repeat          *string       `json:"repeat,omitempty"`
		RepeatDirection string        `json:"repeatDirection"`
		RepeatPanelId   *int64        `json:"repeatPanelId,omitempty"`
		MaxDataPoints   *float64      `json:"maxDataPoints,omitempty"`
		Transformations []interface{} `json:"transformations"`
		Interval        *string       `json:"interval,omitempty"`
		TimeFrom        *string       `json:"timeFrom,omitempty"`
		TimeShift       *string       `json:"timeShift,omitempty"`
		LibraryPanel    interface{}   `json:"libraryPanel,omitempty"`
		Options         interface{}   `json:"options,omitempty"`
		FieldConfig     interface{}   `json:"fieldConfig,omitempty"`
	}
	attr_type := m.Type.ValueString()
	attr_id := m.Id.ValueInt64()
	attr_pluginversion := m.PluginVersion.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_targets := []interface{}{}
	for _, v := range m.Targets {
		attr_targets = append(attr_targets, v)
	}
	attr_title := m.Title.ValueString()
	attr_description := m.Description.ValueString()
	attr_transparent := m.Transparent.ValueBool()
	var attr_datasource interface{}
	if m.Datasource != nil {
		attr_datasource = m.Datasource
	}
	var attr_gridpos interface{}
	if m.GridPos != nil {
		attr_gridpos = m.GridPos
	}
	attr_links := []interface{}{}
	for _, v := range m.Links {
		attr_links = append(attr_links, v)
	}
	attr_repeat := m.Repeat.ValueString()
	attr_repeatdirection := m.RepeatDirection.ValueString()
	attr_repeatpanelid := m.RepeatPanelId.ValueInt64()
	attr_maxdatapoints := m.MaxDataPoints.ValueFloat64()
	attr_transformations := []interface{}{}
	for _, v := range m.Transformations {
		attr_transformations = append(attr_transformations, v)
	}
	attr_interval := m.Interval.ValueString()
	attr_timefrom := m.TimeFrom.ValueString()
	attr_timeshift := m.TimeShift.ValueString()
	var attr_librarypanel interface{}
	if m.LibraryPanel != nil {
		attr_librarypanel = m.LibraryPanel
	}
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}
	var attr_fieldconfig interface{}
	if m.FieldConfig != nil {
		attr_fieldconfig = m.FieldConfig
	}

	model := &jsonPanelDebugDataSourceModel{
		Type:            attr_type,
		Id:              &attr_id,
		PluginVersion:   &attr_pluginversion,
		Tags:            attr_tags,
		Targets:         attr_targets,
		Title:           &attr_title,
		Description:     &attr_description,
		Transparent:     attr_transparent,
		Datasource:      attr_datasource,
		GridPos:         attr_gridpos,
		Links:           attr_links,
		Repeat:          &attr_repeat,
		RepeatDirection: attr_repeatdirection,
		RepeatPanelId:   &attr_repeatpanelid,
		MaxDataPoints:   &attr_maxdatapoints,
		Transformations: attr_transformations,
		Interval:        &attr_interval,
		TimeFrom:        &attr_timefrom,
		TimeShift:       &attr_timeshift,
		LibraryPanel:    attr_librarypanel,
		Options:         attr_options,
		FieldConfig:     attr_fieldconfig,
	}
	return json.Marshal(model)
}

func (d *PanelDebugDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_panel_debug"
}

func (d *PanelDebugDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"type": schema.StringAttribute{
				MarkdownDescription: `The panel plugin type id. May not be empty. Defaults to "debug".`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"id": schema.Int64Attribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"plugin_version": schema.StringAttribute{
				MarkdownDescription: `FIXME this almost certainly has to be changed in favor of scuemata versions`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"targets": schema.ListNestedAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Panel title.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transparent": schema.BoolAttribute{
				MarkdownDescription: `Whether to display the panel without a background. Defaults to false.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"datasource": schema.SingleNestedAttribute{
				MarkdownDescription: `The datasource used in all targets.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"grid_pos": schema.SingleNestedAttribute{
				MarkdownDescription: `Grid position.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"h": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 9.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"w": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 12.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"x": schema.Int64Attribute{
						MarkdownDescription: `Panel x. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"y": schema.Int64Attribute{
						MarkdownDescription: `Panel y. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"static": schema.BoolAttribute{
						MarkdownDescription: `true if fixed`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"links": schema.ListNestedAttribute{
				MarkdownDescription: `Panel links.
TODO fill this out - seems there are a couple variants?`,
				Computed: false,
				Optional: true,
				Required: false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"icon": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tooltip": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"url": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tags": schema.ListAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
							ElementType:         types.StringType,
						},
						"as_dropdown": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"target_blank": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"include_vars": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"keep_time": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"repeat": schema.StringAttribute{
				MarkdownDescription: `Name of template variable to repeat for.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"repeat_direction": schema.StringAttribute{
				MarkdownDescription: `Direction to repeat in if 'repeat' is set.
"h" for horizontal, "v" for vertical.
TODO this is probably optional. Defaults to "h".`,
				Computed: true,
				Optional: true,
				Required: false,
			},
			"repeat_panel_id": schema.Int64Attribute{
				MarkdownDescription: `Id of the repeating panel.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"max_data_points": schema.Float64Attribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transformations": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							MarkdownDescription: `Unique identifier of transformer`,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"disabled": schema.BoolAttribute{
							MarkdownDescription: `Disabled transformations are skipped`,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"filter": schema.SingleNestedAttribute{
							MarkdownDescription: `Optional frame matcher.  When missing it will be applied to all results`,
							Computed:            true,
							Optional:            true,
							Required:            false,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									MarkdownDescription: ` Defaults to "".`,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},
			"interval": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_from": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_shift": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"library_panel": schema.SingleNestedAttribute{
				MarkdownDescription: `Dynamically load the panel`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"counters": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"render": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"data_changed": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"schema_changed": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},
				},
			},
			"field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"defaults": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								MarkdownDescription: `The display value for this field.  This supports template variables blank is auto`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"display_name_from_ds": schema.StringAttribute{
								MarkdownDescription: `This can be used by data sources that return and explicit naming structure for values and labels
When this property is configured, this value is used rather than the default naming strategy.`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"description": schema.StringAttribute{
								MarkdownDescription: `Human readable field metadata`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"path": schema.StringAttribute{
								MarkdownDescription: `An explicit path to the field in the datasource.  When the frame meta includes a path,
This will default to ${frame.meta.path}/${field.name}

When defined, this value can be used as an identifier within the datasource scope, and
may be used to update the results`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"writeable": schema.BoolAttribute{
								MarkdownDescription: `True if data source can write a value to the path.  Auth/authz are supported separately`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"filterable": schema.BoolAttribute{
								MarkdownDescription: `True if data source field supports ad-hoc filters`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"unit": schema.StringAttribute{
								MarkdownDescription: `Numeric Options`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"decimals": schema.Float64Attribute{
								MarkdownDescription: `Significant digits (for display)`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"min": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"max": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"thresholds": schema.SingleNestedAttribute{
								MarkdownDescription: `Map numeric values to states`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"steps": schema.ListNestedAttribute{
										MarkdownDescription: `Must be sorted by 'value', first value is always -Infinity`,
										Computed:            false,
										Optional:            false,
										Required:            true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"value": schema.Float64Attribute{
													MarkdownDescription: `TODO docs
FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON`,
													Computed: false,
													Optional: true,
													Required: false,
												},
												"color": schema.StringAttribute{
													MarkdownDescription: `TODO docs`,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"state": schema.StringAttribute{
													MarkdownDescription: `TODO docs
TODO are the values here enumerable into a disjunction?
Some seem to be listed in typescript comment`,
													Computed: false,
													Optional: true,
													Required: false,
												},
											},
										},
									},
								},
							},
							"color": schema.SingleNestedAttribute{
								MarkdownDescription: `Map values to a display color`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: `The main color scheme mode`,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"fixed_color": schema.StringAttribute{
										MarkdownDescription: `Stores the fixed color value if mode is fixed`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"series_by": schema.StringAttribute{
										MarkdownDescription: `Some visualizations need to know how to assign a series color from by value color schemes`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
							"no_value": schema.StringAttribute{
								MarkdownDescription: `Alternative to empty string`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"custom": schema.SingleNestedAttribute{
								MarkdownDescription: ``,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"line_width": schema.Int64Attribute{
										MarkdownDescription: `Controls line width of the bars. Defaults to 1.`,
										Computed:            true,
										Optional:            true,
										Required:            false,
									},
									"fill_opacity": schema.Int64Attribute{
										MarkdownDescription: `Controls the fill opacity of the bars. Defaults to 80.`,
										Computed:            true,
										Optional:            true,
										Required:            false,
									},
									"gradient_mode": schema.StringAttribute{
										MarkdownDescription: `Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.
Gradient appearance is influenced by the Fill opacity setting. Defaults to "none".`,
										Computed: true,
										Optional: true,
										Required: false,
									},
									"axis_placement": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_color_mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_label": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_width": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_soft_min": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_soft_max": schema.Float64Attribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"axis_grid_show": schema.BoolAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"scale_distribution": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"type": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"log": schema.Float64Attribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
											"linear_threshold": schema.Float64Attribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            true,
												Required:            false,
											},
										},
									},
									"hide_from": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"tooltip": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"legend": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"viz": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
										},
									},
									"thresholds_style": schema.SingleNestedAttribute{
										MarkdownDescription: `Threshold rendering`,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"mode": schema.StringAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
										},
									},
									"axis_centered_zero": schema.BoolAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
						},
					},
					"overrides": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"matcher": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											MarkdownDescription: ` Defaults to "".`,
											Computed:            true,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"properties": schema.ListNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            false,
									Required:            true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												MarkdownDescription: ` Defaults to "".`,
												Computed:            true,
												Optional:            true,
												Required:            false,
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *PanelDebugDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *PanelDebugDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data PanelDebugDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	d.applyDefaults(&data)
	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (d *PanelDebugDataSource) applyDefaults(data *PanelDebugDataSourceModel) {
	if data.Datasource == nil {
		data.Datasource = &PanelDebugDataSourceModel_Datasource{}
	}
	if data.GridPos == nil {
		data.GridPos = &PanelDebugDataSourceModel_GridPos{}
	}
	if data.LibraryPanel == nil {
		data.LibraryPanel = &PanelDebugDataSourceModel_LibraryPanel{}
	}
	if data.Options == nil {
		data.Options = &PanelDebugDataSourceModel_Options{}
	}
	if data.Options.Counters == nil {
		data.Options.Counters = &PanelDebugDataSourceModel_Options_Counters{}
	}
	if data.FieldConfig == nil {
		data.FieldConfig = &PanelDebugDataSourceModel_FieldConfig{}
	}
	if data.FieldConfig.Defaults == nil {
		data.FieldConfig.Defaults = &PanelDebugDataSourceModel_FieldConfig_Defaults{}
	}
	if data.FieldConfig.Defaults.Thresholds == nil {
		data.FieldConfig.Defaults.Thresholds = &PanelDebugDataSourceModel_FieldConfig_Defaults_Thresholds{}
	}
	if data.FieldConfig.Defaults.Color == nil {
		data.FieldConfig.Defaults.Color = &PanelDebugDataSourceModel_FieldConfig_Defaults_Color{}
	}
	if data.FieldConfig.Defaults.Custom == nil {
		data.FieldConfig.Defaults.Custom = &PanelDebugDataSourceModel_FieldConfig_Defaults_Custom{}
	}
	if data.FieldConfig.Defaults.Custom.ScaleDistribution == nil {
		data.FieldConfig.Defaults.Custom.ScaleDistribution = &PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ScaleDistribution{}
	}
	if data.FieldConfig.Defaults.Custom.HideFrom == nil {
		data.FieldConfig.Defaults.Custom.HideFrom = &PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_HideFrom{}
	}
	if data.FieldConfig.Defaults.Custom.ThresholdsStyle == nil {
		data.FieldConfig.Defaults.Custom.ThresholdsStyle = &PanelDebugDataSourceModel_FieldConfig_Defaults_Custom_ThresholdsStyle{}
	}
	if data.Type.IsNull() {
		data.Type = types.StringValue(`debug`)
	}
	if data.Transparent.IsNull() {
		data.Transparent = types.BoolValue(false)
	}
	if data.GridPos != nil && data.GridPos.H.IsNull() {
		data.GridPos.H = types.Int64Value(9)
	}
	if data.GridPos != nil && data.GridPos.W.IsNull() {
		data.GridPos.W = types.Int64Value(12)
	}
	if data.GridPos != nil && data.GridPos.X.IsNull() {
		data.GridPos.X = types.Int64Value(0)
	}
	if data.GridPos != nil && data.GridPos.Y.IsNull() {
		data.GridPos.Y = types.Int64Value(0)
	}
	if data.RepeatDirection.IsNull() {
		data.RepeatDirection = types.StringValue(`h`)
	}
	if data.FieldConfig != nil && data.FieldConfig.Defaults != nil && data.FieldConfig.Defaults.Custom != nil && data.FieldConfig.Defaults.Custom.LineWidth.IsNull() {
		data.FieldConfig.Defaults.Custom.LineWidth = types.Int64Value(1)
	}
	if data.FieldConfig != nil && data.FieldConfig.Defaults != nil && data.FieldConfig.Defaults.Custom != nil && data.FieldConfig.Defaults.Custom.FillOpacity.IsNull() {
		data.FieldConfig.Defaults.Custom.FillOpacity = types.Int64Value(80)
	}
	if data.FieldConfig != nil && data.FieldConfig.Defaults != nil && data.FieldConfig.Defaults.Custom != nil && data.FieldConfig.Defaults.Custom.GradientMode.IsNull() {
		data.FieldConfig.Defaults.Custom.GradientMode = types.StringValue(`none`)
	}
}
