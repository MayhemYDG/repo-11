// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &PanelStatDataSource{}
	_ datasource.DataSourceWithConfigure = &PanelStatDataSource{}
)

func NewPanelStatDataSource() datasource.DataSource {
	return &PanelStatDataSource{}
}

// PanelStatDataSource defines the data source implementation.
type PanelStatDataSource struct{}

type PanelStatDataSourceModel_Datasource struct {
	Type types.String `tfsdk:"type"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelStatDataSourceModel_Datasource) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Datasource struct {
		Type *string `json:"type,omitempty"`
		Uid  *string `json:"uid,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelStatDataSourceModel_Datasource{
		Type: &attr_type,
		Uid:  &attr_uid,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Datasource) ApplyDefaults() PanelStatDataSourceModel_Datasource {

	return m
}

type PanelStatDataSourceModel_GridPos struct {
	H      types.Int64 `tfsdk:"h"`
	W      types.Int64 `tfsdk:"w"`
	X      types.Int64 `tfsdk:"x"`
	Y      types.Int64 `tfsdk:"y"`
	Static types.Bool  `tfsdk:"static"`
}

func (m PanelStatDataSourceModel_GridPos) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_GridPos struct {
		H      int64 `json:"h"`
		W      int64 `json:"w"`
		X      int64 `json:"x"`
		Y      int64 `json:"y"`
		Static *bool `json:"static,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_h := m.H.ValueInt64()
	attr_w := m.W.ValueInt64()
	attr_x := m.X.ValueInt64()
	attr_y := m.Y.ValueInt64()
	attr_static := m.Static.ValueBool()

	model := &jsonPanelStatDataSourceModel_GridPos{
		H:      attr_h,
		W:      attr_w,
		X:      attr_x,
		Y:      attr_y,
		Static: &attr_static,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_GridPos) ApplyDefaults() PanelStatDataSourceModel_GridPos {
	if m.H.IsNull() {
		m.H = types.Int64Value(9)
	}
	if m.W.IsNull() {
		m.W = types.Int64Value(12)
	}
	if m.X.IsNull() {
		m.X = types.Int64Value(0)
	}
	if m.Y.IsNull() {
		m.Y = types.Int64Value(0)
	}
	return m
}

type PanelStatDataSourceModel_Links struct {
	Title       types.String `tfsdk:"title"`
	Type        types.String `tfsdk:"type"`
	Icon        types.String `tfsdk:"icon"`
	Tooltip     types.String `tfsdk:"tooltip"`
	Url         types.String `tfsdk:"url"`
	Tags        types.List   `tfsdk:"tags"`
	AsDropdown  types.Bool   `tfsdk:"as_dropdown"`
	TargetBlank types.Bool   `tfsdk:"target_blank"`
	IncludeVars types.Bool   `tfsdk:"include_vars"`
	KeepTime    types.Bool   `tfsdk:"keep_time"`
}

func (m PanelStatDataSourceModel_Links) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Links struct {
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		Icon        string   `json:"icon"`
		Tooltip     string   `json:"tooltip"`
		Url         string   `json:"url"`
		Tags        []string `json:"tags,omitempty"`
		AsDropdown  bool     `json:"asDropdown"`
		TargetBlank bool     `json:"targetBlank"`
		IncludeVars bool     `json:"includeVars"`
		KeepTime    bool     `json:"keepTime"`
	}

	m = m.ApplyDefaults()
	attr_title := m.Title.ValueString()
	attr_type := m.Type.ValueString()
	attr_icon := m.Icon.ValueString()
	attr_tooltip := m.Tooltip.ValueString()
	attr_url := m.Url.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_asdropdown := m.AsDropdown.ValueBool()
	attr_targetblank := m.TargetBlank.ValueBool()
	attr_includevars := m.IncludeVars.ValueBool()
	attr_keeptime := m.KeepTime.ValueBool()

	model := &jsonPanelStatDataSourceModel_Links{
		Title:       attr_title,
		Type:        attr_type,
		Icon:        attr_icon,
		Tooltip:     attr_tooltip,
		Url:         attr_url,
		Tags:        attr_tags,
		AsDropdown:  attr_asdropdown,
		TargetBlank: attr_targetblank,
		IncludeVars: attr_includevars,
		KeepTime:    attr_keeptime,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Links) ApplyDefaults() PanelStatDataSourceModel_Links {
	if len(m.Tags.Elements()) == 0 {
		m.Tags, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if m.AsDropdown.IsNull() {
		m.AsDropdown = types.BoolValue(false)
	}
	if m.TargetBlank.IsNull() {
		m.TargetBlank = types.BoolValue(false)
	}
	if m.IncludeVars.IsNull() {
		m.IncludeVars = types.BoolValue(false)
	}
	if m.KeepTime.IsNull() {
		m.KeepTime = types.BoolValue(false)
	}
	return m
}

type PanelStatDataSourceModel_Transformations_Filter struct {
}

func (m PanelStatDataSourceModel_Transformations_Filter) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Transformations_Filter struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelStatDataSourceModel_Transformations_Filter{}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Transformations_Filter) ApplyDefaults() PanelStatDataSourceModel_Transformations_Filter {

	return m
}

type PanelStatDataSourceModel_Transformations struct {
	Disabled types.Bool                                       `tfsdk:"disabled"`
	Filter   *PanelStatDataSourceModel_Transformations_Filter `tfsdk:"filter"`
}

func (m PanelStatDataSourceModel_Transformations) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Transformations struct {
		Disabled *bool       `json:"disabled,omitempty"`
		Filter   interface{} `json:"filter,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_disabled := m.Disabled.ValueBool()
	var attr_filter interface{}
	if m.Filter != nil {
		attr_filter = m.Filter
	}

	model := &jsonPanelStatDataSourceModel_Transformations{
		Disabled: &attr_disabled,
		Filter:   attr_filter,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Transformations) ApplyDefaults() PanelStatDataSourceModel_Transformations {

	return m
}

type PanelStatDataSourceModel_LibraryPanel struct {
	Name types.String `tfsdk:"name"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelStatDataSourceModel_LibraryPanel) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_LibraryPanel struct {
		Name string `json:"name"`
		Uid  string `json:"uid"`
	}

	m = m.ApplyDefaults()
	attr_name := m.Name.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelStatDataSourceModel_LibraryPanel{
		Name: attr_name,
		Uid:  attr_uid,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_LibraryPanel) ApplyDefaults() PanelStatDataSourceModel_LibraryPanel {

	return m
}

type PanelStatDataSourceModel_Options_ReduceOptions struct {
	Values types.Bool    `tfsdk:"values"`
	Limit  types.Float64 `tfsdk:"limit"`
	Calcs  types.List    `tfsdk:"calcs"`
	Fields types.String  `tfsdk:"fields"`
}

func (m PanelStatDataSourceModel_Options_ReduceOptions) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Options_ReduceOptions struct {
		Values *bool    `json:"values,omitempty"`
		Limit  *float64 `json:"limit,omitempty"`
		Calcs  []string `json:"calcs,omitempty"`
		Fields *string  `json:"fields,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_values := m.Values.ValueBool()
	attr_limit := m.Limit.ValueFloat64()
	attr_calcs := []string{}
	for _, v := range m.Calcs.Elements() {
		attr_calcs = append(attr_calcs, v.(types.String).ValueString())
	}
	attr_fields := m.Fields.ValueString()

	model := &jsonPanelStatDataSourceModel_Options_ReduceOptions{
		Values: &attr_values,
		Limit:  &attr_limit,
		Calcs:  attr_calcs,
		Fields: &attr_fields,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Options_ReduceOptions) ApplyDefaults() PanelStatDataSourceModel_Options_ReduceOptions {
	if len(m.Calcs.Elements()) == 0 {
		m.Calcs, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	return m
}

type PanelStatDataSourceModel_Options_Text struct {
	TitleSize types.Float64 `tfsdk:"title_size"`
	ValueSize types.Float64 `tfsdk:"value_size"`
}

func (m PanelStatDataSourceModel_Options_Text) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Options_Text struct {
		TitleSize *float64 `json:"titleSize,omitempty"`
		ValueSize *float64 `json:"valueSize,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_titlesize := m.TitleSize.ValueFloat64()
	attr_valuesize := m.ValueSize.ValueFloat64()

	model := &jsonPanelStatDataSourceModel_Options_Text{
		TitleSize: &attr_titlesize,
		ValueSize: &attr_valuesize,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Options_Text) ApplyDefaults() PanelStatDataSourceModel_Options_Text {

	return m
}

type PanelStatDataSourceModel_Options struct {
	GraphMode     types.String                                    `tfsdk:"graph_mode"`
	ColorMode     types.String                                    `tfsdk:"color_mode"`
	JustifyMode   types.String                                    `tfsdk:"justify_mode"`
	ReduceOptions *PanelStatDataSourceModel_Options_ReduceOptions `tfsdk:"reduce_options"`
	Text          *PanelStatDataSourceModel_Options_Text          `tfsdk:"text"`
	TextMode      types.String                                    `tfsdk:"text_mode"`
	Orientation   types.String                                    `tfsdk:"orientation"`
}

func (m PanelStatDataSourceModel_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_Options struct {
		GraphMode     string      `json:"graphMode"`
		ColorMode     string      `json:"colorMode"`
		JustifyMode   string      `json:"justifyMode"`
		ReduceOptions interface{} `json:"reduceOptions,omitempty"`
		Text          interface{} `json:"text,omitempty"`
		TextMode      string      `json:"textMode"`
		Orientation   string      `json:"orientation"`
	}

	m = m.ApplyDefaults()
	attr_graphmode := m.GraphMode.ValueString()
	attr_colormode := m.ColorMode.ValueString()
	attr_justifymode := m.JustifyMode.ValueString()
	var attr_reduceoptions interface{}
	if m.ReduceOptions != nil {
		attr_reduceoptions = m.ReduceOptions
	}
	var attr_text interface{}
	if m.Text != nil {
		attr_text = m.Text
	}
	attr_textmode := m.TextMode.ValueString()
	attr_orientation := m.Orientation.ValueString()

	model := &jsonPanelStatDataSourceModel_Options{
		GraphMode:     attr_graphmode,
		ColorMode:     attr_colormode,
		JustifyMode:   attr_justifymode,
		ReduceOptions: attr_reduceoptions,
		Text:          attr_text,
		TextMode:      attr_textmode,
		Orientation:   attr_orientation,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_Options) ApplyDefaults() PanelStatDataSourceModel_Options {
	if m.GraphMode.IsNull() {
		m.GraphMode = types.StringValue(`area`)
	}
	if m.ColorMode.IsNull() {
		m.ColorMode = types.StringValue(`value`)
	}
	if m.JustifyMode.IsNull() {
		m.JustifyMode = types.StringValue(`auto`)
	}
	if m.TextMode.IsNull() {
		m.TextMode = types.StringValue(`auto`)
	}
	return m
}

type PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
	Value types.Float64 `tfsdk:"value"`
	Color types.String  `tfsdk:"color"`
	State types.String  `tfsdk:"state"`
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
		Value *float64 `json:"value,omitempty"`
		Color string   `json:"color"`
		State *string  `json:"state,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_value := m.Value.ValueFloat64()
	attr_color := m.Color.ValueString()
	attr_state := m.State.ValueString()

	model := &jsonPanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps{
		Value: &attr_value,
		Color: attr_color,
		State: &attr_state,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds struct {
	Mode  types.String                                                     `tfsdk:"mode"`
	Steps []PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds_Steps `tfsdk:"steps"`
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Defaults_Thresholds struct {
		Mode  string        `json:"mode"`
		Steps []interface{} `json:"steps,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_steps := []interface{}{}
	for _, v := range m.Steps {
		attr_steps = append(attr_steps, v)
	}

	model := &jsonPanelStatDataSourceModel_FieldConfig_Defaults_Thresholds{
		Mode:  attr_mode,
		Steps: attr_steps,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Defaults_Color struct {
	Mode       types.String `tfsdk:"mode"`
	FixedColor types.String `tfsdk:"fixed_color"`
	SeriesBy   types.String `tfsdk:"series_by"`
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Color) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Defaults_Color struct {
		Mode       string  `json:"mode"`
		FixedColor *string `json:"fixedColor,omitempty"`
		SeriesBy   *string `json:"seriesBy,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_fixedcolor := m.FixedColor.ValueString()
	attr_seriesby := m.SeriesBy.ValueString()

	model := &jsonPanelStatDataSourceModel_FieldConfig_Defaults_Color{
		Mode:       attr_mode,
		FixedColor: &attr_fixedcolor,
		SeriesBy:   &attr_seriesby,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Color) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Defaults_Color {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
	Tooltip types.Bool `tfsdk:"tooltip"`
	Legend  types.Bool `tfsdk:"legend"`
	Viz     types.Bool `tfsdk:"viz"`
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
		Tooltip bool `json:"tooltip"`
		Legend  bool `json:"legend"`
		Viz     bool `json:"viz"`
	}

	m = m.ApplyDefaults()
	attr_tooltip := m.Tooltip.ValueBool()
	attr_legend := m.Legend.ValueBool()
	attr_viz := m.Viz.ValueBool()

	model := &jsonPanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom{
		Tooltip: attr_tooltip,
		Legend:  attr_legend,
		Viz:     attr_viz,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Defaults_Custom struct {
	HideFrom *PanelStatDataSourceModel_FieldConfig_Defaults_Custom_HideFrom `tfsdk:"hide_from"`
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Custom) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Defaults_Custom struct {
		HideFrom interface{} `json:"hideFrom,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_hidefrom interface{}
	if m.HideFrom != nil {
		attr_hidefrom = m.HideFrom
	}

	model := &jsonPanelStatDataSourceModel_FieldConfig_Defaults_Custom{
		HideFrom: attr_hidefrom,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults_Custom) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Defaults_Custom {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Defaults struct {
	DisplayName       types.String                                              `tfsdk:"display_name"`
	DisplayNameFromDS types.String                                              `tfsdk:"display_name_from_ds"`
	Description       types.String                                              `tfsdk:"description"`
	Path              types.String                                              `tfsdk:"path"`
	Writeable         types.Bool                                                `tfsdk:"writeable"`
	Filterable        types.Bool                                                `tfsdk:"filterable"`
	Unit              types.String                                              `tfsdk:"unit"`
	Decimals          types.Float64                                             `tfsdk:"decimals"`
	Min               types.Float64                                             `tfsdk:"min"`
	Max               types.Float64                                             `tfsdk:"max"`
	Thresholds        *PanelStatDataSourceModel_FieldConfig_Defaults_Thresholds `tfsdk:"thresholds"`
	Color             *PanelStatDataSourceModel_FieldConfig_Defaults_Color      `tfsdk:"color"`
	NoValue           types.String                                              `tfsdk:"no_value"`
	Custom            *PanelStatDataSourceModel_FieldConfig_Defaults_Custom     `tfsdk:"custom"`
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Defaults struct {
		DisplayName       *string     `json:"displayName,omitempty"`
		DisplayNameFromDS *string     `json:"displayNameFromDS,omitempty"`
		Description       *string     `json:"description,omitempty"`
		Path              *string     `json:"path,omitempty"`
		Writeable         *bool       `json:"writeable,omitempty"`
		Filterable        *bool       `json:"filterable,omitempty"`
		Unit              *string     `json:"unit,omitempty"`
		Decimals          *float64    `json:"decimals,omitempty"`
		Min               *float64    `json:"min,omitempty"`
		Max               *float64    `json:"max,omitempty"`
		Thresholds        interface{} `json:"thresholds,omitempty"`
		Color             interface{} `json:"color,omitempty"`
		NoValue           *string     `json:"noValue,omitempty"`
		Custom            interface{} `json:"custom,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_displayname := m.DisplayName.ValueString()
	attr_displaynamefromds := m.DisplayNameFromDS.ValueString()
	attr_description := m.Description.ValueString()
	attr_path := m.Path.ValueString()
	attr_writeable := m.Writeable.ValueBool()
	attr_filterable := m.Filterable.ValueBool()
	attr_unit := m.Unit.ValueString()
	attr_decimals := m.Decimals.ValueFloat64()
	attr_min := m.Min.ValueFloat64()
	attr_max := m.Max.ValueFloat64()
	var attr_thresholds interface{}
	if m.Thresholds != nil {
		attr_thresholds = m.Thresholds
	}
	var attr_color interface{}
	if m.Color != nil {
		attr_color = m.Color
	}
	attr_novalue := m.NoValue.ValueString()
	var attr_custom interface{}
	if m.Custom != nil {
		attr_custom = m.Custom
	}

	model := &jsonPanelStatDataSourceModel_FieldConfig_Defaults{
		DisplayName:       &attr_displayname,
		DisplayNameFromDS: &attr_displaynamefromds,
		Description:       &attr_description,
		Path:              &attr_path,
		Writeable:         &attr_writeable,
		Filterable:        &attr_filterable,
		Unit:              &attr_unit,
		Decimals:          &attr_decimals,
		Min:               &attr_min,
		Max:               &attr_max,
		Thresholds:        attr_thresholds,
		Color:             attr_color,
		NoValue:           &attr_novalue,
		Custom:            attr_custom,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Defaults) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Defaults {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Overrides_Matcher struct {
}

func (m PanelStatDataSourceModel_FieldConfig_Overrides_Matcher) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Overrides_Matcher struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelStatDataSourceModel_FieldConfig_Overrides_Matcher{}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Overrides_Matcher) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Overrides_Matcher {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Overrides_Properties struct {
}

func (m PanelStatDataSourceModel_FieldConfig_Overrides_Properties) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Overrides_Properties struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelStatDataSourceModel_FieldConfig_Overrides_Properties{}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Overrides_Properties) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Overrides_Properties {

	return m
}

type PanelStatDataSourceModel_FieldConfig_Overrides struct {
	Matcher    *PanelStatDataSourceModel_FieldConfig_Overrides_Matcher     `tfsdk:"matcher"`
	Properties []PanelStatDataSourceModel_FieldConfig_Overrides_Properties `tfsdk:"properties"`
}

func (m PanelStatDataSourceModel_FieldConfig_Overrides) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig_Overrides struct {
		Matcher    interface{}   `json:"matcher,omitempty"`
		Properties []interface{} `json:"properties,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_matcher interface{}
	if m.Matcher != nil {
		attr_matcher = m.Matcher
	}
	attr_properties := []interface{}{}
	for _, v := range m.Properties {
		attr_properties = append(attr_properties, v)
	}

	model := &jsonPanelStatDataSourceModel_FieldConfig_Overrides{
		Matcher:    attr_matcher,
		Properties: attr_properties,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig_Overrides) ApplyDefaults() PanelStatDataSourceModel_FieldConfig_Overrides {

	return m
}

type PanelStatDataSourceModel_FieldConfig struct {
	Defaults  *PanelStatDataSourceModel_FieldConfig_Defaults   `tfsdk:"defaults"`
	Overrides []PanelStatDataSourceModel_FieldConfig_Overrides `tfsdk:"overrides"`
}

func (m PanelStatDataSourceModel_FieldConfig) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel_FieldConfig struct {
		Defaults  interface{}   `json:"defaults,omitempty"`
		Overrides []interface{} `json:"overrides,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_defaults interface{}
	if m.Defaults != nil {
		attr_defaults = m.Defaults
	}
	attr_overrides := []interface{}{}
	for _, v := range m.Overrides {
		attr_overrides = append(attr_overrides, v)
	}

	model := &jsonPanelStatDataSourceModel_FieldConfig{
		Defaults:  attr_defaults,
		Overrides: attr_overrides,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel_FieldConfig) ApplyDefaults() PanelStatDataSourceModel_FieldConfig {

	return m
}

type PanelStatDataSourceModel struct {
	ToJSON          types.String                               `tfsdk:"to_json"`
	Type            types.String                               `tfsdk:"type"`
	PluginVersion   types.String                               `tfsdk:"plugin_version"`
	Tags            types.List                                 `tfsdk:"tags"`
	Targets         types.List                                 `tfsdk:"targets"`
	Title           types.String                               `tfsdk:"title"`
	Description     types.String                               `tfsdk:"description"`
	Transparent     types.Bool                                 `tfsdk:"transparent"`
	Datasource      *PanelStatDataSourceModel_Datasource       `tfsdk:"datasource"`
	GridPos         *PanelStatDataSourceModel_GridPos          `tfsdk:"grid_pos"`
	Links           []PanelStatDataSourceModel_Links           `tfsdk:"links"`
	Repeat          types.String                               `tfsdk:"repeat"`
	RepeatDirection types.String                               `tfsdk:"repeat_direction"`
	RepeatPanelId   types.Int64                                `tfsdk:"repeat_panel_id"`
	MaxDataPoints   types.Float64                              `tfsdk:"max_data_points"`
	Transformations []PanelStatDataSourceModel_Transformations `tfsdk:"transformations"`
	Interval        types.String                               `tfsdk:"interval"`
	TimeFrom        types.String                               `tfsdk:"time_from"`
	TimeShift       types.String                               `tfsdk:"time_shift"`
	LibraryPanel    *PanelStatDataSourceModel_LibraryPanel     `tfsdk:"library_panel"`
	Options         *PanelStatDataSourceModel_Options          `tfsdk:"options"`
	FieldConfig     *PanelStatDataSourceModel_FieldConfig      `tfsdk:"field_config"`
}

func (m PanelStatDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonPanelStatDataSourceModel struct {
		Type            string        `json:"type"`
		PluginVersion   *string       `json:"pluginVersion,omitempty"`
		Tags            []string      `json:"tags,omitempty"`
		Targets         []string      `json:"targets,omitempty"`
		Title           *string       `json:"title,omitempty"`
		Description     *string       `json:"description,omitempty"`
		Transparent     bool          `json:"transparent"`
		Datasource      interface{}   `json:"datasource,omitempty"`
		GridPos         interface{}   `json:"gridPos,omitempty"`
		Links           []interface{} `json:"links,omitempty"`
		Repeat          *string       `json:"repeat,omitempty"`
		RepeatDirection string        `json:"repeatDirection"`
		RepeatPanelId   *int64        `json:"repeatPanelId,omitempty"`
		MaxDataPoints   *float64      `json:"maxDataPoints,omitempty"`
		Transformations []interface{} `json:"transformations,omitempty"`
		Interval        *string       `json:"interval,omitempty"`
		TimeFrom        *string       `json:"timeFrom,omitempty"`
		TimeShift       *string       `json:"timeShift,omitempty"`
		LibraryPanel    interface{}   `json:"libraryPanel,omitempty"`
		Options         interface{}   `json:"options,omitempty"`
		FieldConfig     interface{}   `json:"fieldConfig,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_pluginversion := m.PluginVersion.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_targets := []string{}
	for _, v := range m.Targets.Elements() {
		attr_targets = append(attr_targets, v.(types.String).ValueString())
	}
	attr_title := m.Title.ValueString()
	attr_description := m.Description.ValueString()
	attr_transparent := m.Transparent.ValueBool()
	var attr_datasource interface{}
	if m.Datasource != nil {
		attr_datasource = m.Datasource
	}
	var attr_gridpos interface{}
	if m.GridPos != nil {
		attr_gridpos = m.GridPos
	}
	attr_links := []interface{}{}
	for _, v := range m.Links {
		attr_links = append(attr_links, v)
	}
	attr_repeat := m.Repeat.ValueString()
	attr_repeatdirection := m.RepeatDirection.ValueString()
	attr_repeatpanelid := m.RepeatPanelId.ValueInt64()
	attr_maxdatapoints := m.MaxDataPoints.ValueFloat64()
	attr_transformations := []interface{}{}
	for _, v := range m.Transformations {
		attr_transformations = append(attr_transformations, v)
	}
	attr_interval := m.Interval.ValueString()
	attr_timefrom := m.TimeFrom.ValueString()
	attr_timeshift := m.TimeShift.ValueString()
	var attr_librarypanel interface{}
	if m.LibraryPanel != nil {
		attr_librarypanel = m.LibraryPanel
	}
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options
	}
	var attr_fieldconfig interface{}
	if m.FieldConfig != nil {
		attr_fieldconfig = m.FieldConfig
	}

	model := &jsonPanelStatDataSourceModel{
		Type:            attr_type,
		PluginVersion:   &attr_pluginversion,
		Tags:            attr_tags,
		Targets:         attr_targets,
		Title:           &attr_title,
		Description:     &attr_description,
		Transparent:     attr_transparent,
		Datasource:      attr_datasource,
		GridPos:         attr_gridpos,
		Links:           attr_links,
		Repeat:          &attr_repeat,
		RepeatDirection: attr_repeatdirection,
		RepeatPanelId:   &attr_repeatpanelid,
		MaxDataPoints:   &attr_maxdatapoints,
		Transformations: attr_transformations,
		Interval:        &attr_interval,
		TimeFrom:        &attr_timefrom,
		TimeShift:       &attr_timeshift,
		LibraryPanel:    attr_librarypanel,
		Options:         attr_options,
		FieldConfig:     attr_fieldconfig,
	}
	return json.Marshal(model)
}

func (m PanelStatDataSourceModel) ApplyDefaults() PanelStatDataSourceModel {
	if m.Type.IsNull() {
		m.Type = types.StringValue(`stat`)
	}
	if len(m.Tags.Elements()) == 0 {
		m.Tags, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if len(m.Targets.Elements()) == 0 {
		m.Targets, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if m.Transparent.IsNull() {
		m.Transparent = types.BoolValue(false)
	}
	if m.RepeatDirection.IsNull() {
		m.RepeatDirection = types.StringValue(`h`)
	}
	return m
}

func (d *PanelStatDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_panel_stat"
}

func (d *PanelStatDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"type": schema.StringAttribute{
				MarkdownDescription: `The panel plugin type id. May not be empty. Defaults to "stat".`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"plugin_version": schema.StringAttribute{
				MarkdownDescription: `FIXME this almost certainly has to be changed in favor of scuemata versions`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"targets": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Panel title.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transparent": schema.BoolAttribute{
				MarkdownDescription: `Whether to display the panel without a background. Defaults to false.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"datasource": schema.SingleNestedAttribute{
				MarkdownDescription: `The datasource used in all targets.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"grid_pos": schema.SingleNestedAttribute{
				MarkdownDescription: `Grid position.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"h": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 9.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"w": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 12.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"x": schema.Int64Attribute{
						MarkdownDescription: `Panel x. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"y": schema.Int64Attribute{
						MarkdownDescription: `Panel y. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"static": schema.BoolAttribute{
						MarkdownDescription: `true if fixed`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"links": schema.ListNestedAttribute{
				MarkdownDescription: `Panel links.
TODO fill this out - seems there are a couple variants?`,
				Computed: false,
				Optional: true,
				Required: false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"icon": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tooltip": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"url": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tags": schema.ListAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
							ElementType:         types.StringType,
						},
						"as_dropdown": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"target_blank": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"include_vars": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"keep_time": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"repeat": schema.StringAttribute{
				MarkdownDescription: `Name of template variable to repeat for.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"repeat_direction": schema.StringAttribute{
				MarkdownDescription: `Direction to repeat in if 'repeat' is set.
"h" for horizontal, "v" for vertical.
TODO this is probably optional. Defaults to "h".`,
				Computed: true,
				Optional: true,
				Required: false,
			},
			"repeat_panel_id": schema.Int64Attribute{
				MarkdownDescription: `Id of the repeating panel.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"max_data_points": schema.Float64Attribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transformations": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"disabled": schema.BoolAttribute{
							MarkdownDescription: `Disabled transformations are skipped`,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"filter": schema.SingleNestedAttribute{
							MarkdownDescription: `Optional frame matcher.  When missing it will be applied to all results`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"interval": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_from": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_shift": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"library_panel": schema.SingleNestedAttribute{
				MarkdownDescription: `Dynamically load the panel`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"graph_mode": schema.StringAttribute{
						MarkdownDescription: ` Defaults to "area".`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"color_mode": schema.StringAttribute{
						MarkdownDescription: ` Defaults to "value".`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"justify_mode": schema.StringAttribute{
						MarkdownDescription: ` Defaults to "auto".`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"reduce_options": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"values": schema.BoolAttribute{
								MarkdownDescription: `If true show each row value`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"limit": schema.Float64Attribute{
								MarkdownDescription: `if showing all values limit`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"calcs": schema.ListAttribute{
								MarkdownDescription: `When !values, pick one value for the whole field`,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.StringType,
							},
							"fields": schema.StringAttribute{
								MarkdownDescription: `Which fields to show.  By default this is only numeric fields`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},
					"text": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"title_size": schema.Float64Attribute{
								MarkdownDescription: `Explicit title text size`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"value_size": schema.Float64Attribute{
								MarkdownDescription: `Explicit value text size`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},
					"text_mode": schema.StringAttribute{
						MarkdownDescription: ` Defaults to "auto".`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"orientation": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"defaults": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								MarkdownDescription: `The display value for this field.  This supports template variables blank is auto`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"display_name_from_ds": schema.StringAttribute{
								MarkdownDescription: `This can be used by data sources that return and explicit naming structure for values and labels
When this property is configured, this value is used rather than the default naming strategy.`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"description": schema.StringAttribute{
								MarkdownDescription: `Human readable field metadata`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"path": schema.StringAttribute{
								MarkdownDescription: `An explicit path to the field in the datasource.  When the frame meta includes a path,
This will default to ${frame.meta.path}/${field.name}

When defined, this value can be used as an identifier within the datasource scope, and
may be used to update the results`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"writeable": schema.BoolAttribute{
								MarkdownDescription: `True if data source can write a value to the path.  Auth/authz are supported separately`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"filterable": schema.BoolAttribute{
								MarkdownDescription: `True if data source field supports ad-hoc filters`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"unit": schema.StringAttribute{
								MarkdownDescription: `Numeric Options`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"decimals": schema.Float64Attribute{
								MarkdownDescription: `Significant digits (for display)`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"min": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"max": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"thresholds": schema.SingleNestedAttribute{
								MarkdownDescription: `Map numeric values to states`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"steps": schema.ListNestedAttribute{
										MarkdownDescription: `Must be sorted by 'value', first value is always -Infinity`,
										Computed:            false,
										Optional:            true,
										Required:            false,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"value": schema.Float64Attribute{
													MarkdownDescription: `TODO docs
FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON`,
													Computed: false,
													Optional: true,
													Required: false,
												},
												"color": schema.StringAttribute{
													MarkdownDescription: `TODO docs`,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"state": schema.StringAttribute{
													MarkdownDescription: `TODO docs
TODO are the values here enumerable into a disjunction?
Some seem to be listed in typescript comment`,
													Computed: false,
													Optional: true,
													Required: false,
												},
											},
										},
									},
								},
							},
							"color": schema.SingleNestedAttribute{
								MarkdownDescription: `Map values to a display color`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: `The main color scheme mode`,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"fixed_color": schema.StringAttribute{
										MarkdownDescription: `Stores the fixed color value if mode is fixed`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"series_by": schema.StringAttribute{
										MarkdownDescription: `Some visualizations need to know how to assign a series color from by value color schemes`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
							"no_value": schema.StringAttribute{
								MarkdownDescription: `Alternative to empty string`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"custom": schema.SingleNestedAttribute{
								MarkdownDescription: ``,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"hide_from": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"tooltip": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"legend": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"viz": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
										},
									},
								},
							},
						},
					},
					"overrides": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"matcher": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"properties": schema.ListNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *PanelStatDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *PanelStatDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data PanelStatDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// fix up the targets Attribute
	// Read into a map[string]interface{} and then marshal it back to JSON
	// This is a workaround for the fact that the targets attribute should be a list of maps but is a list of json strings
	dataMap := make(map[string]interface{})
	err = json.Unmarshal(JSONConfig, &dataMap)
	if err != nil {
		resp.Diagnostics.AddError("error unmarshalling config into Go map", err.Error())
		return
	}
	targets := data.Targets.Elements()
	targetsMaps := make([]map[string]interface{}, len(targets))
	for i, target := range targets {
		targetMap := make(map[string]interface{})
		err = json.Unmarshal([]byte(target.(types.String).ValueString()), &targetMap)
		if err != nil {
			resp.Diagnostics.AddError("error unmarshalling target into go map", err.Error())
			return
		}
		targetsMaps[i] = targetMap
	}

	dataMap["targets"] = targetsMaps
	JSONConfig, err = json.MarshalIndent(dataMap, "", "  ")
	if err != nil {
		resp.Diagnostics.AddError("error marshalling go map into json", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
