// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure that the imports are used to avoid compiler errors.
var _ attr.Value
var _ diag.Diagnostic

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &PanelXYChartDataSource{}
	_ datasource.DataSourceWithConfigure = &PanelXYChartDataSource{}
)

func NewPanelXYChartDataSource() datasource.DataSource {
	return &PanelXYChartDataSource{}
}

// PanelXYChartDataSource defines the data source implementation.
type PanelXYChartDataSource struct{}

type PanelXYChartDataSourceModel_Targets struct {
}

func (m PanelXYChartDataSourceModel_Targets) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Targets struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelXYChartDataSourceModel_Targets{}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Targets) ApplyDefaults() PanelXYChartDataSourceModel_Targets {

	return m
}

type PanelXYChartDataSourceModel_Datasource struct {
	Type types.String `tfsdk:"type"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelXYChartDataSourceModel_Datasource) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Datasource struct {
		Type *string `json:"type,omitempty"`
		Uid  *string `json:"uid,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelXYChartDataSourceModel_Datasource{
		Type: &attr_type,
		Uid:  &attr_uid,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Datasource) ApplyDefaults() PanelXYChartDataSourceModel_Datasource {

	return m
}

type PanelXYChartDataSourceModel_GridPos struct {
	H      types.Int64 `tfsdk:"h"`
	W      types.Int64 `tfsdk:"w"`
	X      types.Int64 `tfsdk:"x"`
	Y      types.Int64 `tfsdk:"y"`
	Static types.Bool  `tfsdk:"static"`
}

func (m PanelXYChartDataSourceModel_GridPos) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_GridPos struct {
		H      int64 `json:"h"`
		W      int64 `json:"w"`
		X      int64 `json:"x"`
		Y      int64 `json:"y"`
		Static *bool `json:"static,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_h := m.H.ValueInt64()
	attr_w := m.W.ValueInt64()
	attr_x := m.X.ValueInt64()
	attr_y := m.Y.ValueInt64()
	attr_static := m.Static.ValueBool()

	model := &jsonPanelXYChartDataSourceModel_GridPos{
		H:      attr_h,
		W:      attr_w,
		X:      attr_x,
		Y:      attr_y,
		Static: &attr_static,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_GridPos) ApplyDefaults() PanelXYChartDataSourceModel_GridPos {
	if m.H.IsNull() {
		m.H = types.Int64Value(9)
	}
	if m.W.IsNull() {
		m.W = types.Int64Value(12)
	}
	if m.X.IsNull() {
		m.X = types.Int64Value(0)
	}
	if m.Y.IsNull() {
		m.Y = types.Int64Value(0)
	}
	return m
}

type PanelXYChartDataSourceModel_Links struct {
	Title       types.String `tfsdk:"title"`
	Type        types.String `tfsdk:"type"`
	Icon        types.String `tfsdk:"icon"`
	Tooltip     types.String `tfsdk:"tooltip"`
	Url         types.String `tfsdk:"url"`
	Tags        types.List   `tfsdk:"tags"`
	AsDropdown  types.Bool   `tfsdk:"as_dropdown"`
	TargetBlank types.Bool   `tfsdk:"target_blank"`
	IncludeVars types.Bool   `tfsdk:"include_vars"`
	KeepTime    types.Bool   `tfsdk:"keep_time"`
}

func (m PanelXYChartDataSourceModel_Links) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Links struct {
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		Icon        string   `json:"icon"`
		Tooltip     string   `json:"tooltip"`
		Url         string   `json:"url"`
		Tags        []string `json:"tags,omitempty"`
		AsDropdown  bool     `json:"asDropdown"`
		TargetBlank bool     `json:"targetBlank"`
		IncludeVars bool     `json:"includeVars"`
		KeepTime    bool     `json:"keepTime"`
	}

	m = m.ApplyDefaults()
	attr_title := m.Title.ValueString()
	attr_type := m.Type.ValueString()
	attr_icon := m.Icon.ValueString()
	attr_tooltip := m.Tooltip.ValueString()
	attr_url := m.Url.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_asdropdown := m.AsDropdown.ValueBool()
	attr_targetblank := m.TargetBlank.ValueBool()
	attr_includevars := m.IncludeVars.ValueBool()
	attr_keeptime := m.KeepTime.ValueBool()

	model := &jsonPanelXYChartDataSourceModel_Links{
		Title:       attr_title,
		Type:        attr_type,
		Icon:        attr_icon,
		Tooltip:     attr_tooltip,
		Url:         attr_url,
		Tags:        attr_tags,
		AsDropdown:  attr_asdropdown,
		TargetBlank: attr_targetblank,
		IncludeVars: attr_includevars,
		KeepTime:    attr_keeptime,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Links) ApplyDefaults() PanelXYChartDataSourceModel_Links {
	if len(m.Tags.Elements()) == 0 {
		m.Tags, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if m.AsDropdown.IsNull() {
		m.AsDropdown = types.BoolValue(false)
	}
	if m.TargetBlank.IsNull() {
		m.TargetBlank = types.BoolValue(false)
	}
	if m.IncludeVars.IsNull() {
		m.IncludeVars = types.BoolValue(false)
	}
	if m.KeepTime.IsNull() {
		m.KeepTime = types.BoolValue(false)
	}
	return m
}

type PanelXYChartDataSourceModel_Transformations_Filter struct {
}

func (m PanelXYChartDataSourceModel_Transformations_Filter) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Transformations_Filter struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelXYChartDataSourceModel_Transformations_Filter{}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Transformations_Filter) ApplyDefaults() PanelXYChartDataSourceModel_Transformations_Filter {

	return m
}

type PanelXYChartDataSourceModel_Transformations struct {
	Disabled types.Bool                                          `tfsdk:"disabled"`
	Filter   *PanelXYChartDataSourceModel_Transformations_Filter `tfsdk:"filter"`
}

func (m PanelXYChartDataSourceModel_Transformations) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Transformations struct {
		Disabled *bool       `json:"disabled,omitempty"`
		Filter   interface{} `json:"filter,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_disabled := m.Disabled.ValueBool()
	var attr_filter interface{}
	if m.Filter != nil {
		attr_filter = m.Filter.ApplyDefaults()
	}

	model := &jsonPanelXYChartDataSourceModel_Transformations{
		Disabled: &attr_disabled,
		Filter:   attr_filter,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Transformations) ApplyDefaults() PanelXYChartDataSourceModel_Transformations {

	return m
}

type PanelXYChartDataSourceModel_LibraryPanel struct {
	Name types.String `tfsdk:"name"`
	Uid  types.String `tfsdk:"uid"`
}

func (m PanelXYChartDataSourceModel_LibraryPanel) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_LibraryPanel struct {
		Name string `json:"name"`
		Uid  string `json:"uid"`
	}

	m = m.ApplyDefaults()
	attr_name := m.Name.ValueString()
	attr_uid := m.Uid.ValueString()

	model := &jsonPanelXYChartDataSourceModel_LibraryPanel{
		Name: attr_name,
		Uid:  attr_uid,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_LibraryPanel) ApplyDefaults() PanelXYChartDataSourceModel_LibraryPanel {

	return m
}

type PanelXYChartDataSourceModel_Options_Dims struct {
	Frame   types.Int64  `tfsdk:"frame"`
	X       types.String `tfsdk:"x"`
	Exclude types.List   `tfsdk:"exclude"`
}

func (m PanelXYChartDataSourceModel_Options_Dims) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Dims struct {
		Frame   int64    `json:"frame"`
		X       *string  `json:"x,omitempty"`
		Exclude []string `json:"exclude,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_frame := m.Frame.ValueInt64()
	attr_x := m.X.ValueString()
	attr_exclude := []string{}
	for _, v := range m.Exclude.Elements() {
		attr_exclude = append(attr_exclude, v.(types.String).ValueString())
	}

	model := &jsonPanelXYChartDataSourceModel_Options_Dims{
		Frame:   attr_frame,
		X:       &attr_x,
		Exclude: attr_exclude,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Dims) ApplyDefaults() PanelXYChartDataSourceModel_Options_Dims {
	if len(m.Exclude.Elements()) == 0 {
		m.Exclude, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	return m
}

type PanelXYChartDataSourceModel_Options_Legend struct {
	DisplayMode types.String  `tfsdk:"display_mode"`
	Placement   types.String  `tfsdk:"placement"`
	ShowLegend  types.Bool    `tfsdk:"show_legend"`
	AsTable     types.Bool    `tfsdk:"as_table"`
	IsVisible   types.Bool    `tfsdk:"is_visible"`
	SortBy      types.String  `tfsdk:"sort_by"`
	SortDesc    types.Bool    `tfsdk:"sort_desc"`
	Width       types.Float64 `tfsdk:"width"`
	Calcs       types.List    `tfsdk:"calcs"`
}

func (m PanelXYChartDataSourceModel_Options_Legend) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Legend struct {
		DisplayMode string   `json:"displayMode"`
		Placement   string   `json:"placement"`
		ShowLegend  bool     `json:"showLegend"`
		AsTable     *bool    `json:"asTable,omitempty"`
		IsVisible   *bool    `json:"isVisible,omitempty"`
		SortBy      *string  `json:"sortBy,omitempty"`
		SortDesc    *bool    `json:"sortDesc,omitempty"`
		Width       *float64 `json:"width,omitempty"`
		Calcs       []string `json:"calcs,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_displaymode := m.DisplayMode.ValueString()
	attr_placement := m.Placement.ValueString()
	attr_showlegend := m.ShowLegend.ValueBool()
	attr_astable := m.AsTable.ValueBool()
	attr_isvisible := m.IsVisible.ValueBool()
	attr_sortby := m.SortBy.ValueString()
	attr_sortdesc := m.SortDesc.ValueBool()
	attr_width := m.Width.ValueFloat64()
	attr_calcs := []string{}
	for _, v := range m.Calcs.Elements() {
		attr_calcs = append(attr_calcs, v.(types.String).ValueString())
	}

	model := &jsonPanelXYChartDataSourceModel_Options_Legend{
		DisplayMode: attr_displaymode,
		Placement:   attr_placement,
		ShowLegend:  attr_showlegend,
		AsTable:     &attr_astable,
		IsVisible:   &attr_isvisible,
		SortBy:      &attr_sortby,
		SortDesc:    &attr_sortdesc,
		Width:       &attr_width,
		Calcs:       attr_calcs,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Legend) ApplyDefaults() PanelXYChartDataSourceModel_Options_Legend {
	if len(m.Calcs.Elements()) == 0 {
		m.Calcs, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	return m
}

type PanelXYChartDataSourceModel_Options_Tooltip struct {
	Mode types.String `tfsdk:"mode"`
	Sort types.String `tfsdk:"sort"`
}

func (m PanelXYChartDataSourceModel_Options_Tooltip) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Tooltip struct {
		Mode string `json:"mode"`
		Sort string `json:"sort"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_sort := m.Sort.ValueString()

	model := &jsonPanelXYChartDataSourceModel_Options_Tooltip{
		Mode: attr_mode,
		Sort: attr_sort,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Tooltip) ApplyDefaults() PanelXYChartDataSourceModel_Options_Tooltip {

	return m
}

type PanelXYChartDataSourceModel_Options_Series_PointSize struct {
	Min   types.Int64  `tfsdk:"min"`
	Field types.String `tfsdk:"field"`
	Max   types.Int64  `tfsdk:"max"`
}

func (m PanelXYChartDataSourceModel_Options_Series_PointSize) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_PointSize struct {
		Min   int64   `json:"min"`
		Field *string `json:"field,omitempty"`
		Max   int64   `json:"max"`
	}

	m = m.ApplyDefaults()
	attr_min := m.Min.ValueInt64()
	attr_field := m.Field.ValueString()
	attr_max := m.Max.ValueInt64()

	model := &jsonPanelXYChartDataSourceModel_Options_Series_PointSize{
		Min:   attr_min,
		Field: &attr_field,
		Max:   attr_max,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_PointSize) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_PointSize {

	return m
}

type PanelXYChartDataSourceModel_Options_Series_LineColor struct {
	Field types.String `tfsdk:"field"`
}

func (m PanelXYChartDataSourceModel_Options_Series_LineColor) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_LineColor struct {
		Field *string `json:"field,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()

	model := &jsonPanelXYChartDataSourceModel_Options_Series_LineColor{
		Field: &attr_field,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_LineColor) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_LineColor {

	return m
}

type PanelXYChartDataSourceModel_Options_Series_PointColor struct {
	Field types.String `tfsdk:"field"`
}

func (m PanelXYChartDataSourceModel_Options_Series_PointColor) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_PointColor struct {
		Field *string `json:"field,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_field := m.Field.ValueString()

	model := &jsonPanelXYChartDataSourceModel_Options_Series_PointColor{
		Field: &attr_field,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_PointColor) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_PointColor {

	return m
}

type PanelXYChartDataSourceModel_Options_Series_LabelValue struct {
	Mode  types.String `tfsdk:"mode"`
	Field types.String `tfsdk:"field"`
}

func (m PanelXYChartDataSourceModel_Options_Series_LabelValue) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_LabelValue struct {
		Mode  string  `json:"mode"`
		Field *string `json:"field,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_field := m.Field.ValueString()

	model := &jsonPanelXYChartDataSourceModel_Options_Series_LabelValue{
		Mode:  attr_mode,
		Field: &attr_field,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_LabelValue) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_LabelValue {

	return m
}

type PanelXYChartDataSourceModel_Options_Series_LineStyle struct {
	Fill types.String `tfsdk:"fill"`
	Dash types.List   `tfsdk:"dash"`
}

func (m PanelXYChartDataSourceModel_Options_Series_LineStyle) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_LineStyle struct {
		Fill *string   `json:"fill,omitempty"`
		Dash []float64 `json:"dash,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_fill := m.Fill.ValueString()
	attr_dash := []float64{}
	for _, v := range m.Dash.Elements() {
		attr_dash = append(attr_dash, v.(types.Float64).ValueFloat64())
	}

	model := &jsonPanelXYChartDataSourceModel_Options_Series_LineStyle{
		Fill: &attr_fill,
		Dash: attr_dash,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_LineStyle) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_LineStyle {
	if len(m.Dash.Elements()) == 0 {
		m.Dash, _ = types.ListValue(types.Float64Type, []attr.Value{})
	}
	return m
}

type PanelXYChartDataSourceModel_Options_Series_HideFrom struct {
	Tooltip types.Bool `tfsdk:"tooltip"`
	Legend  types.Bool `tfsdk:"legend"`
	Viz     types.Bool `tfsdk:"viz"`
}

func (m PanelXYChartDataSourceModel_Options_Series_HideFrom) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_HideFrom struct {
		Tooltip bool `json:"tooltip"`
		Legend  bool `json:"legend"`
		Viz     bool `json:"viz"`
	}

	m = m.ApplyDefaults()
	attr_tooltip := m.Tooltip.ValueBool()
	attr_legend := m.Legend.ValueBool()
	attr_viz := m.Viz.ValueBool()

	model := &jsonPanelXYChartDataSourceModel_Options_Series_HideFrom{
		Tooltip: attr_tooltip,
		Legend:  attr_legend,
		Viz:     attr_viz,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_HideFrom) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_HideFrom {

	return m
}

type PanelXYChartDataSourceModel_Options_Series_ScaleDistribution struct {
	Type            types.String  `tfsdk:"type"`
	Log             types.Float64 `tfsdk:"log"`
	LinearThreshold types.Float64 `tfsdk:"linear_threshold"`
}

func (m PanelXYChartDataSourceModel_Options_Series_ScaleDistribution) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series_ScaleDistribution struct {
		Type            string   `json:"type"`
		Log             *float64 `json:"log,omitempty"`
		LinearThreshold *float64 `json:"linearThreshold,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_log := m.Log.ValueFloat64()
	attr_linearthreshold := m.LinearThreshold.ValueFloat64()

	model := &jsonPanelXYChartDataSourceModel_Options_Series_ScaleDistribution{
		Type:            attr_type,
		Log:             &attr_log,
		LinearThreshold: &attr_linearthreshold,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series_ScaleDistribution) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series_ScaleDistribution {

	return m
}

type PanelXYChartDataSourceModel_Options_Series struct {
	X                 types.String                                                  `tfsdk:"x"`
	Y                 types.String                                                  `tfsdk:"y"`
	Show              types.String                                                  `tfsdk:"show"`
	PointSize         *PanelXYChartDataSourceModel_Options_Series_PointSize         `tfsdk:"point_size"`
	LineColor         *PanelXYChartDataSourceModel_Options_Series_LineColor         `tfsdk:"line_color"`
	PointColor        *PanelXYChartDataSourceModel_Options_Series_PointColor        `tfsdk:"point_color"`
	LabelValue        *PanelXYChartDataSourceModel_Options_Series_LabelValue        `tfsdk:"label_value"`
	LineWidth         types.Int64                                                   `tfsdk:"line_width"`
	LineStyle         *PanelXYChartDataSourceModel_Options_Series_LineStyle         `tfsdk:"line_style"`
	HideFrom          *PanelXYChartDataSourceModel_Options_Series_HideFrom          `tfsdk:"hide_from"`
	AxisPlacement     types.String                                                  `tfsdk:"axis_placement"`
	AxisColorMode     types.String                                                  `tfsdk:"axis_color_mode"`
	AxisLabel         types.String                                                  `tfsdk:"axis_label"`
	AxisWidth         types.Float64                                                 `tfsdk:"axis_width"`
	AxisSoftMin       types.Float64                                                 `tfsdk:"axis_soft_min"`
	AxisSoftMax       types.Float64                                                 `tfsdk:"axis_soft_max"`
	AxisGridShow      types.Bool                                                    `tfsdk:"axis_grid_show"`
	ScaleDistribution *PanelXYChartDataSourceModel_Options_Series_ScaleDistribution `tfsdk:"scale_distribution"`
	Name              types.String                                                  `tfsdk:"name"`
	Label             types.String                                                  `tfsdk:"label"`
	AxisCenteredZero  types.Bool                                                    `tfsdk:"axis_centered_zero"`
}

func (m PanelXYChartDataSourceModel_Options_Series) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options_Series struct {
		X                 *string     `json:"x,omitempty"`
		Y                 *string     `json:"y,omitempty"`
		Show              *string     `json:"show,omitempty"`
		PointSize         interface{} `json:"pointSize,omitempty"`
		LineColor         interface{} `json:"lineColor,omitempty"`
		PointColor        interface{} `json:"pointColor,omitempty"`
		LabelValue        interface{} `json:"labelValue,omitempty"`
		LineWidth         *int64      `json:"lineWidth,omitempty"`
		LineStyle         interface{} `json:"lineStyle,omitempty"`
		HideFrom          interface{} `json:"hideFrom,omitempty"`
		AxisPlacement     *string     `json:"axisPlacement,omitempty"`
		AxisColorMode     *string     `json:"axisColorMode,omitempty"`
		AxisLabel         *string     `json:"axisLabel,omitempty"`
		AxisWidth         *float64    `json:"axisWidth,omitempty"`
		AxisSoftMin       *float64    `json:"axisSoftMin,omitempty"`
		AxisSoftMax       *float64    `json:"axisSoftMax,omitempty"`
		AxisGridShow      *bool       `json:"axisGridShow,omitempty"`
		ScaleDistribution interface{} `json:"scaleDistribution,omitempty"`
		Name              *string     `json:"name,omitempty"`
		Label             *string     `json:"label,omitempty"`
		AxisCenteredZero  *bool       `json:"axisCenteredZero,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_x := m.X.ValueString()
	attr_y := m.Y.ValueString()
	attr_show := m.Show.ValueString()
	var attr_pointsize interface{}
	if m.PointSize != nil {
		attr_pointsize = m.PointSize.ApplyDefaults()
	}
	var attr_linecolor interface{}
	if m.LineColor != nil {
		attr_linecolor = m.LineColor.ApplyDefaults()
	}
	var attr_pointcolor interface{}
	if m.PointColor != nil {
		attr_pointcolor = m.PointColor.ApplyDefaults()
	}
	var attr_labelvalue interface{}
	if m.LabelValue != nil {
		attr_labelvalue = m.LabelValue.ApplyDefaults()
	}
	attr_linewidth := m.LineWidth.ValueInt64()
	var attr_linestyle interface{}
	if m.LineStyle != nil {
		attr_linestyle = m.LineStyle.ApplyDefaults()
	}
	var attr_hidefrom interface{}
	if m.HideFrom != nil {
		attr_hidefrom = m.HideFrom.ApplyDefaults()
	}
	attr_axisplacement := m.AxisPlacement.ValueString()
	attr_axiscolormode := m.AxisColorMode.ValueString()
	attr_axislabel := m.AxisLabel.ValueString()
	attr_axiswidth := m.AxisWidth.ValueFloat64()
	attr_axissoftmin := m.AxisSoftMin.ValueFloat64()
	attr_axissoftmax := m.AxisSoftMax.ValueFloat64()
	attr_axisgridshow := m.AxisGridShow.ValueBool()
	var attr_scaledistribution interface{}
	if m.ScaleDistribution != nil {
		attr_scaledistribution = m.ScaleDistribution.ApplyDefaults()
	}
	attr_name := m.Name.ValueString()
	attr_label := m.Label.ValueString()
	attr_axiscenteredzero := m.AxisCenteredZero.ValueBool()

	model := &jsonPanelXYChartDataSourceModel_Options_Series{
		X:                 &attr_x,
		Y:                 &attr_y,
		Show:              &attr_show,
		PointSize:         attr_pointsize,
		LineColor:         attr_linecolor,
		PointColor:        attr_pointcolor,
		LabelValue:        attr_labelvalue,
		LineWidth:         &attr_linewidth,
		LineStyle:         attr_linestyle,
		HideFrom:          attr_hidefrom,
		AxisPlacement:     &attr_axisplacement,
		AxisColorMode:     &attr_axiscolormode,
		AxisLabel:         &attr_axislabel,
		AxisWidth:         &attr_axiswidth,
		AxisSoftMin:       &attr_axissoftmin,
		AxisSoftMax:       &attr_axissoftmax,
		AxisGridShow:      &attr_axisgridshow,
		ScaleDistribution: attr_scaledistribution,
		Name:              &attr_name,
		Label:             &attr_label,
		AxisCenteredZero:  &attr_axiscenteredzero,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options_Series) ApplyDefaults() PanelXYChartDataSourceModel_Options_Series {
	if m.Show.IsNull() {
		m.Show = types.StringValue(`points`)
	}
	if m.Label.IsNull() {
		m.Label = types.StringValue(`auto`)
	}
	return m
}

type PanelXYChartDataSourceModel_Options struct {
	SeriesMapping types.String                                 `tfsdk:"series_mapping"`
	Dims          *PanelXYChartDataSourceModel_Options_Dims    `tfsdk:"dims"`
	Legend        *PanelXYChartDataSourceModel_Options_Legend  `tfsdk:"legend"`
	Tooltip       *PanelXYChartDataSourceModel_Options_Tooltip `tfsdk:"tooltip"`
	Series        []PanelXYChartDataSourceModel_Options_Series `tfsdk:"series"`
}

func (m PanelXYChartDataSourceModel_Options) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_Options struct {
		SeriesMapping *string       `json:"seriesMapping,omitempty"`
		Dims          interface{}   `json:"dims,omitempty"`
		Legend        interface{}   `json:"legend,omitempty"`
		Tooltip       interface{}   `json:"tooltip,omitempty"`
		Series        []interface{} `json:"series,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_seriesmapping := m.SeriesMapping.ValueString()
	var attr_dims interface{}
	if m.Dims != nil {
		attr_dims = m.Dims.ApplyDefaults()
	}
	var attr_legend interface{}
	if m.Legend != nil {
		attr_legend = m.Legend.ApplyDefaults()
	}
	var attr_tooltip interface{}
	if m.Tooltip != nil {
		attr_tooltip = m.Tooltip.ApplyDefaults()
	}
	attr_series := []interface{}{}
	for _, v := range m.Series {
		v := v.ApplyDefaults()
		attr_series = append(attr_series, v)
	}

	model := &jsonPanelXYChartDataSourceModel_Options{
		SeriesMapping: &attr_seriesmapping,
		Dims:          attr_dims,
		Legend:        attr_legend,
		Tooltip:       attr_tooltip,
		Series:        attr_series,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_Options) ApplyDefaults() PanelXYChartDataSourceModel_Options {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
	Value types.Float64 `tfsdk:"value"`
	Color types.String  `tfsdk:"color"`
	State types.String  `tfsdk:"state"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps struct {
		Value *float64 `json:"value,omitempty"`
		Color string   `json:"color"`
		State *string  `json:"state,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_value := m.Value.ValueFloat64()
	attr_color := m.Color.ValueString()
	attr_state := m.State.ValueString()

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps{
		Value: &attr_value,
		Color: attr_color,
		State: &attr_state,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds struct {
	Mode  types.String                                                        `tfsdk:"mode"`
	Steps []PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds_Steps `tfsdk:"steps"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds struct {
		Mode  string        `json:"mode"`
		Steps []interface{} `json:"steps,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_steps := []interface{}{}
	for _, v := range m.Steps {
		v := v.ApplyDefaults()
		attr_steps = append(attr_steps, v)
	}

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds{
		Mode:  attr_mode,
		Steps: attr_steps,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Defaults_Color struct {
	Mode       types.String `tfsdk:"mode"`
	FixedColor types.String `tfsdk:"fixed_color"`
	SeriesBy   types.String `tfsdk:"series_by"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Color) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Color struct {
		Mode       string  `json:"mode"`
		FixedColor *string `json:"fixedColor,omitempty"`
		SeriesBy   *string `json:"seriesBy,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_mode := m.Mode.ValueString()
	attr_fixedcolor := m.FixedColor.ValueString()
	attr_seriesby := m.SeriesBy.ValueString()

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Color{
		Mode:       attr_mode,
		FixedColor: &attr_fixedcolor,
		SeriesBy:   &attr_seriesby,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Color) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Defaults_Color {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
	Tooltip types.Bool `tfsdk:"tooltip"`
	Legend  types.Bool `tfsdk:"legend"`
	Viz     types.Bool `tfsdk:"viz"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom struct {
		Tooltip bool `json:"tooltip"`
		Legend  bool `json:"legend"`
		Viz     bool `json:"viz"`
	}

	m = m.ApplyDefaults()
	attr_tooltip := m.Tooltip.ValueBool()
	attr_legend := m.Legend.ValueBool()
	attr_viz := m.Viz.ValueBool()

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom{
		Tooltip: attr_tooltip,
		Legend:  attr_legend,
		Viz:     attr_viz,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom struct {
	LineWidth   types.Int64                                                       `tfsdk:"line_width"`
	HideFrom    *PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom_HideFrom `tfsdk:"hide_from"`
	FillOpacity types.Int64                                                       `tfsdk:"fill_opacity"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Custom struct {
		LineWidth   *int64      `json:"lineWidth,omitempty"`
		HideFrom    interface{} `json:"hideFrom,omitempty"`
		FillOpacity *int64      `json:"fillOpacity,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_linewidth := m.LineWidth.ValueInt64()
	var attr_hidefrom interface{}
	if m.HideFrom != nil {
		attr_hidefrom = m.HideFrom.ApplyDefaults()
	}
	attr_fillopacity := m.FillOpacity.ValueInt64()

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Defaults_Custom{
		LineWidth:   &attr_linewidth,
		HideFrom:    attr_hidefrom,
		FillOpacity: &attr_fillopacity,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom {
	if m.LineWidth.IsNull() {
		m.LineWidth = types.Int64Value(1)
	}
	if m.FillOpacity.IsNull() {
		m.FillOpacity = types.Int64Value(70)
	}
	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Defaults struct {
	DisplayName       types.String                                                 `tfsdk:"display_name"`
	DisplayNameFromDS types.String                                                 `tfsdk:"display_name_from_ds"`
	Description       types.String                                                 `tfsdk:"description"`
	Path              types.String                                                 `tfsdk:"path"`
	Writeable         types.Bool                                                   `tfsdk:"writeable"`
	Filterable        types.Bool                                                   `tfsdk:"filterable"`
	Unit              types.String                                                 `tfsdk:"unit"`
	Decimals          types.Float64                                                `tfsdk:"decimals"`
	Min               types.Float64                                                `tfsdk:"min"`
	Max               types.Float64                                                `tfsdk:"max"`
	Thresholds        *PanelXYChartDataSourceModel_FieldConfig_Defaults_Thresholds `tfsdk:"thresholds"`
	Color             *PanelXYChartDataSourceModel_FieldConfig_Defaults_Color      `tfsdk:"color"`
	NoValue           types.String                                                 `tfsdk:"no_value"`
	Custom            *PanelXYChartDataSourceModel_FieldConfig_Defaults_Custom     `tfsdk:"custom"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Defaults struct {
		DisplayName       *string     `json:"displayName,omitempty"`
		DisplayNameFromDS *string     `json:"displayNameFromDS,omitempty"`
		Description       *string     `json:"description,omitempty"`
		Path              *string     `json:"path,omitempty"`
		Writeable         *bool       `json:"writeable,omitempty"`
		Filterable        *bool       `json:"filterable,omitempty"`
		Unit              *string     `json:"unit,omitempty"`
		Decimals          *float64    `json:"decimals,omitempty"`
		Min               *float64    `json:"min,omitempty"`
		Max               *float64    `json:"max,omitempty"`
		Thresholds        interface{} `json:"thresholds,omitempty"`
		Color             interface{} `json:"color,omitempty"`
		NoValue           *string     `json:"noValue,omitempty"`
		Custom            interface{} `json:"custom,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_displayname := m.DisplayName.ValueString()
	attr_displaynamefromds := m.DisplayNameFromDS.ValueString()
	attr_description := m.Description.ValueString()
	attr_path := m.Path.ValueString()
	attr_writeable := m.Writeable.ValueBool()
	attr_filterable := m.Filterable.ValueBool()
	attr_unit := m.Unit.ValueString()
	attr_decimals := m.Decimals.ValueFloat64()
	attr_min := m.Min.ValueFloat64()
	attr_max := m.Max.ValueFloat64()
	var attr_thresholds interface{}
	if m.Thresholds != nil {
		attr_thresholds = m.Thresholds.ApplyDefaults()
	}
	var attr_color interface{}
	if m.Color != nil {
		attr_color = m.Color.ApplyDefaults()
	}
	attr_novalue := m.NoValue.ValueString()
	var attr_custom interface{}
	if m.Custom != nil {
		attr_custom = m.Custom.ApplyDefaults()
	}

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Defaults{
		DisplayName:       &attr_displayname,
		DisplayNameFromDS: &attr_displaynamefromds,
		Description:       &attr_description,
		Path:              &attr_path,
		Writeable:         &attr_writeable,
		Filterable:        &attr_filterable,
		Unit:              &attr_unit,
		Decimals:          &attr_decimals,
		Min:               &attr_min,
		Max:               &attr_max,
		Thresholds:        attr_thresholds,
		Color:             attr_color,
		NoValue:           &attr_novalue,
		Custom:            attr_custom,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Defaults) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Defaults {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher struct {
}

func (m PanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher{}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Overrides_Properties struct {
}

func (m PanelXYChartDataSourceModel_FieldConfig_Overrides_Properties) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Overrides_Properties struct {
	}

	m = m.ApplyDefaults()

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Overrides_Properties{}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Overrides_Properties) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Overrides_Properties {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig_Overrides struct {
	Matcher    *PanelXYChartDataSourceModel_FieldConfig_Overrides_Matcher     `tfsdk:"matcher"`
	Properties []PanelXYChartDataSourceModel_FieldConfig_Overrides_Properties `tfsdk:"properties"`
}

func (m PanelXYChartDataSourceModel_FieldConfig_Overrides) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig_Overrides struct {
		Matcher    interface{}   `json:"matcher,omitempty"`
		Properties []interface{} `json:"properties,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_matcher interface{}
	if m.Matcher != nil {
		attr_matcher = m.Matcher.ApplyDefaults()
	}
	attr_properties := []interface{}{}
	for _, v := range m.Properties {
		v := v.ApplyDefaults()
		attr_properties = append(attr_properties, v)
	}

	model := &jsonPanelXYChartDataSourceModel_FieldConfig_Overrides{
		Matcher:    attr_matcher,
		Properties: attr_properties,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig_Overrides) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig_Overrides {

	return m
}

type PanelXYChartDataSourceModel_FieldConfig struct {
	Defaults  *PanelXYChartDataSourceModel_FieldConfig_Defaults   `tfsdk:"defaults"`
	Overrides []PanelXYChartDataSourceModel_FieldConfig_Overrides `tfsdk:"overrides"`
}

func (m PanelXYChartDataSourceModel_FieldConfig) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel_FieldConfig struct {
		Defaults  interface{}   `json:"defaults,omitempty"`
		Overrides []interface{} `json:"overrides,omitempty"`
	}

	m = m.ApplyDefaults()
	var attr_defaults interface{}
	if m.Defaults != nil {
		attr_defaults = m.Defaults.ApplyDefaults()
	}
	attr_overrides := []interface{}{}
	for _, v := range m.Overrides {
		v := v.ApplyDefaults()
		attr_overrides = append(attr_overrides, v)
	}

	model := &jsonPanelXYChartDataSourceModel_FieldConfig{
		Defaults:  attr_defaults,
		Overrides: attr_overrides,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel_FieldConfig) ApplyDefaults() PanelXYChartDataSourceModel_FieldConfig {

	return m
}

type PanelXYChartDataSourceModel struct {
	ToJSON          types.String                                  `tfsdk:"to_json"`
	Type            types.String                                  `tfsdk:"type"`
	PluginVersion   types.String                                  `tfsdk:"plugin_version"`
	Tags            types.List                                    `tfsdk:"tags"`
	Targets         []PanelXYChartDataSourceModel_Targets         `tfsdk:"targets"`
	Title           types.String                                  `tfsdk:"title"`
	Description     types.String                                  `tfsdk:"description"`
	Transparent     types.Bool                                    `tfsdk:"transparent"`
	Datasource      *PanelXYChartDataSourceModel_Datasource       `tfsdk:"datasource"`
	GridPos         *PanelXYChartDataSourceModel_GridPos          `tfsdk:"grid_pos"`
	Links           []PanelXYChartDataSourceModel_Links           `tfsdk:"links"`
	Repeat          types.String                                  `tfsdk:"repeat"`
	RepeatDirection types.String                                  `tfsdk:"repeat_direction"`
	RepeatPanelId   types.Int64                                   `tfsdk:"repeat_panel_id"`
	MaxDataPoints   types.Float64                                 `tfsdk:"max_data_points"`
	Transformations []PanelXYChartDataSourceModel_Transformations `tfsdk:"transformations"`
	Interval        types.String                                  `tfsdk:"interval"`
	TimeFrom        types.String                                  `tfsdk:"time_from"`
	TimeShift       types.String                                  `tfsdk:"time_shift"`
	LibraryPanel    *PanelXYChartDataSourceModel_LibraryPanel     `tfsdk:"library_panel"`
	Options         *PanelXYChartDataSourceModel_Options          `tfsdk:"options"`
	FieldConfig     *PanelXYChartDataSourceModel_FieldConfig      `tfsdk:"field_config"`
}

func (m PanelXYChartDataSourceModel) MarshalJSON() ([]byte, error) {
	type jsonPanelXYChartDataSourceModel struct {
		Type            string        `json:"type"`
		PluginVersion   *string       `json:"pluginVersion,omitempty"`
		Tags            []string      `json:"tags,omitempty"`
		Targets         []interface{} `json:"targets,omitempty"`
		Title           *string       `json:"title,omitempty"`
		Description     *string       `json:"description,omitempty"`
		Transparent     bool          `json:"transparent"`
		Datasource      interface{}   `json:"datasource,omitempty"`
		GridPos         interface{}   `json:"gridPos,omitempty"`
		Links           []interface{} `json:"links,omitempty"`
		Repeat          *string       `json:"repeat,omitempty"`
		RepeatDirection string        `json:"repeatDirection"`
		RepeatPanelId   *int64        `json:"repeatPanelId,omitempty"`
		MaxDataPoints   *float64      `json:"maxDataPoints,omitempty"`
		Transformations []interface{} `json:"transformations,omitempty"`
		Interval        *string       `json:"interval,omitempty"`
		TimeFrom        *string       `json:"timeFrom,omitempty"`
		TimeShift       *string       `json:"timeShift,omitempty"`
		LibraryPanel    interface{}   `json:"libraryPanel,omitempty"`
		Options         interface{}   `json:"options,omitempty"`
		FieldConfig     interface{}   `json:"fieldConfig,omitempty"`
	}

	m = m.ApplyDefaults()
	attr_type := m.Type.ValueString()
	attr_pluginversion := m.PluginVersion.ValueString()
	attr_tags := []string{}
	for _, v := range m.Tags.Elements() {
		attr_tags = append(attr_tags, v.(types.String).ValueString())
	}
	attr_targets := []interface{}{}
	for _, v := range m.Targets {
		v := v.ApplyDefaults()
		attr_targets = append(attr_targets, v)
	}
	attr_title := m.Title.ValueString()
	attr_description := m.Description.ValueString()
	attr_transparent := m.Transparent.ValueBool()
	var attr_datasource interface{}
	if m.Datasource != nil {
		attr_datasource = m.Datasource.ApplyDefaults()
	}
	var attr_gridpos interface{}
	if m.GridPos != nil {
		attr_gridpos = m.GridPos.ApplyDefaults()
	}
	attr_links := []interface{}{}
	for _, v := range m.Links {
		v := v.ApplyDefaults()
		attr_links = append(attr_links, v)
	}
	attr_repeat := m.Repeat.ValueString()
	attr_repeatdirection := m.RepeatDirection.ValueString()
	attr_repeatpanelid := m.RepeatPanelId.ValueInt64()
	attr_maxdatapoints := m.MaxDataPoints.ValueFloat64()
	attr_transformations := []interface{}{}
	for _, v := range m.Transformations {
		v := v.ApplyDefaults()
		attr_transformations = append(attr_transformations, v)
	}
	attr_interval := m.Interval.ValueString()
	attr_timefrom := m.TimeFrom.ValueString()
	attr_timeshift := m.TimeShift.ValueString()
	var attr_librarypanel interface{}
	if m.LibraryPanel != nil {
		attr_librarypanel = m.LibraryPanel.ApplyDefaults()
	}
	var attr_options interface{}
	if m.Options != nil {
		attr_options = m.Options.ApplyDefaults()
	}
	var attr_fieldconfig interface{}
	if m.FieldConfig != nil {
		attr_fieldconfig = m.FieldConfig.ApplyDefaults()
	}

	model := &jsonPanelXYChartDataSourceModel{
		Type:            attr_type,
		PluginVersion:   &attr_pluginversion,
		Tags:            attr_tags,
		Targets:         attr_targets,
		Title:           &attr_title,
		Description:     &attr_description,
		Transparent:     attr_transparent,
		Datasource:      attr_datasource,
		GridPos:         attr_gridpos,
		Links:           attr_links,
		Repeat:          &attr_repeat,
		RepeatDirection: attr_repeatdirection,
		RepeatPanelId:   &attr_repeatpanelid,
		MaxDataPoints:   &attr_maxdatapoints,
		Transformations: attr_transformations,
		Interval:        &attr_interval,
		TimeFrom:        &attr_timefrom,
		TimeShift:       &attr_timeshift,
		LibraryPanel:    attr_librarypanel,
		Options:         attr_options,
		FieldConfig:     attr_fieldconfig,
	}
	return json.Marshal(model)
}

func (m PanelXYChartDataSourceModel) ApplyDefaults() PanelXYChartDataSourceModel {
	if m.Type.IsNull() {
		m.Type = types.StringValue(`xychart`)
	}
	if len(m.Tags.Elements()) == 0 {
		m.Tags, _ = types.ListValue(types.StringType, []attr.Value{})
	}
	if m.Transparent.IsNull() {
		m.Transparent = types.BoolValue(false)
	}
	if m.RepeatDirection.IsNull() {
		m.RepeatDirection = types.StringValue(`h`)
	}
	return m
}

func (d *PanelXYChartDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_panel_xy_chart"
}

func (d *PanelXYChartDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"type": schema.StringAttribute{
				MarkdownDescription: `The panel plugin type id. May not be empty. Defaults to "xychart".`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"plugin_version": schema.StringAttribute{
				MarkdownDescription: `FIXME this almost certainly has to be changed in favor of scuemata versions`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				ElementType:         types.StringType,
			},
			"targets": schema.ListNestedAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Panel title.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transparent": schema.BoolAttribute{
				MarkdownDescription: `Whether to display the panel without a background. Defaults to false.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"datasource": schema.SingleNestedAttribute{
				MarkdownDescription: `The datasource used in all targets.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"grid_pos": schema.SingleNestedAttribute{
				MarkdownDescription: `Grid position.`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"h": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 9.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"w": schema.Int64Attribute{
						MarkdownDescription: `Panel. Defaults to 12.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"x": schema.Int64Attribute{
						MarkdownDescription: `Panel x. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"y": schema.Int64Attribute{
						MarkdownDescription: `Panel y. Defaults to 0.`,
						Computed:            true,
						Optional:            true,
						Required:            false,
					},
					"static": schema.BoolAttribute{
						MarkdownDescription: `true if fixed`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"links": schema.ListNestedAttribute{
				MarkdownDescription: `Panel links.
TODO fill this out - seems there are a couple variants?`,
				Computed: false,
				Optional: true,
				Required: false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"icon": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tooltip": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"url": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            false,
							Required:            true,
						},
						"tags": schema.ListAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
							ElementType:         types.StringType,
						},
						"as_dropdown": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"target_blank": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"include_vars": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
						"keep_time": schema.BoolAttribute{
							MarkdownDescription: ` Defaults to false.`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"repeat": schema.StringAttribute{
				MarkdownDescription: `Name of template variable to repeat for.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"repeat_direction": schema.StringAttribute{
				MarkdownDescription: `Direction to repeat in if 'repeat' is set.
"h" for horizontal, "v" for vertical.
TODO this is probably optional. Defaults to "h".`,
				Computed: true,
				Optional: true,
				Required: false,
			},
			"repeat_panel_id": schema.Int64Attribute{
				MarkdownDescription: `Id of the repeating panel.`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"max_data_points": schema.Float64Attribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"transformations": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"disabled": schema.BoolAttribute{
							MarkdownDescription: `Disabled transformations are skipped`,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"filter": schema.SingleNestedAttribute{
							MarkdownDescription: `Optional frame matcher.  When missing it will be applied to all results`,
							Computed:            true,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"interval": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_from": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"time_shift": schema.StringAttribute{
				MarkdownDescription: `TODO docs
TODO tighter constraint`,
				Computed: false,
				Optional: true,
				Required: false,
			},
			"library_panel": schema.SingleNestedAttribute{
				MarkdownDescription: `Dynamically load the panel`,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"uid": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},
			"options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"series_mapping": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"dims": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"frame": schema.Int64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"x": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"exclude": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.StringType,
							},
						},
					},
					"legend": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"display_mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"placement": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"show_legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"as_table": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"is_visible": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"sort_by": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"sort_desc": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"width": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"calcs": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.StringType,
							},
						},
					},
					"tooltip": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"sort": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},
					"series": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"x": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"y": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"show": schema.StringAttribute{
									MarkdownDescription: ` Defaults to "points".`,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"point_size": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"min": schema.Int64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"max": schema.Int64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
									},
								},
								"line_color": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"point_color": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"label_value": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"mode": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"line_width": schema.Int64Attribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"line_style": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"fill": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"dash": schema.ListAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
											ElementType:         types.Float64Type,
										},
									},
								},
								"hide_from": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"tooltip": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"legend": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"viz": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
									},
								},
								"axis_placement": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"axis_color_mode": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"axis_label": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"axis_width": schema.Float64Attribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"axis_soft_min": schema.Float64Attribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"axis_soft_max": schema.Float64Attribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"axis_grid_show": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"scale_distribution": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
										"log": schema.Float64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
										"linear_threshold": schema.Float64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},
								"name": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
								"label": schema.StringAttribute{
									MarkdownDescription: ` Defaults to "auto".`,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"axis_centered_zero": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},
			"field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"defaults": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            true,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								MarkdownDescription: `The display value for this field.  This supports template variables blank is auto`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"display_name_from_ds": schema.StringAttribute{
								MarkdownDescription: `This can be used by data sources that return and explicit naming structure for values and labels
When this property is configured, this value is used rather than the default naming strategy.`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"description": schema.StringAttribute{
								MarkdownDescription: `Human readable field metadata`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"path": schema.StringAttribute{
								MarkdownDescription: `An explicit path to the field in the datasource.  When the frame meta includes a path,
This will default to ${frame.meta.path}/${field.name}

When defined, this value can be used as an identifier within the datasource scope, and
may be used to update the results`,
								Computed: false,
								Optional: true,
								Required: false,
							},
							"writeable": schema.BoolAttribute{
								MarkdownDescription: `True if data source can write a value to the path.  Auth/authz are supported separately`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"filterable": schema.BoolAttribute{
								MarkdownDescription: `True if data source field supports ad-hoc filters`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"unit": schema.StringAttribute{
								MarkdownDescription: `Numeric Options`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"decimals": schema.Float64Attribute{
								MarkdownDescription: `Significant digits (for display)`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"min": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"max": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"thresholds": schema.SingleNestedAttribute{
								MarkdownDescription: `Map numeric values to states`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: ``,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"steps": schema.ListNestedAttribute{
										MarkdownDescription: `Must be sorted by 'value', first value is always -Infinity`,
										Computed:            false,
										Optional:            true,
										Required:            false,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"value": schema.Float64Attribute{
													MarkdownDescription: `TODO docs
FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON`,
													Computed: false,
													Optional: true,
													Required: false,
												},
												"color": schema.StringAttribute{
													MarkdownDescription: `TODO docs`,
													Computed:            false,
													Optional:            false,
													Required:            true,
												},
												"state": schema.StringAttribute{
													MarkdownDescription: `TODO docs
TODO are the values here enumerable into a disjunction?
Some seem to be listed in typescript comment`,
													Computed: false,
													Optional: true,
													Required: false,
												},
											},
										},
									},
								},
							},
							"color": schema.SingleNestedAttribute{
								MarkdownDescription: `Map values to a display color`,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"mode": schema.StringAttribute{
										MarkdownDescription: `The main color scheme mode`,
										Computed:            false,
										Optional:            false,
										Required:            true,
									},
									"fixed_color": schema.StringAttribute{
										MarkdownDescription: `Stores the fixed color value if mode is fixed`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
									"series_by": schema.StringAttribute{
										MarkdownDescription: `Some visualizations need to know how to assign a series color from by value color schemes`,
										Computed:            false,
										Optional:            true,
										Required:            false,
									},
								},
							},
							"no_value": schema.StringAttribute{
								MarkdownDescription: `Alternative to empty string`,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
							"custom": schema.SingleNestedAttribute{
								MarkdownDescription: ``,
								Computed:            true,
								Optional:            true,
								Required:            false,
								Attributes: map[string]schema.Attribute{
									"line_width": schema.Int64Attribute{
										MarkdownDescription: ` Defaults to 1.`,
										Computed:            true,
										Optional:            true,
										Required:            false,
									},
									"hide_from": schema.SingleNestedAttribute{
										MarkdownDescription: ``,
										Computed:            true,
										Optional:            true,
										Required:            false,
										Attributes: map[string]schema.Attribute{
											"tooltip": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"legend": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
											"viz": schema.BoolAttribute{
												MarkdownDescription: ``,
												Computed:            false,
												Optional:            false,
												Required:            true,
											},
										},
									},
									"fill_opacity": schema.Int64Attribute{
										MarkdownDescription: ` Defaults to 70.`,
										Computed:            true,
										Optional:            true,
										Required:            false,
									},
								},
							},
						},
					},
					"overrides": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"matcher": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            true,
									Optional:            true,
									Required:            false,
								},
								"properties": schema.ListNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *PanelXYChartDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *PanelXYChartDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data PanelXYChartDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
