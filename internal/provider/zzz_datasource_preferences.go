// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &PreferencesDataSource{}
	_ datasource.DataSourceWithConfigure = &PreferencesDataSource{}
)

func NewPreferencesDataSource() datasource.DataSource {
	return &PreferencesDataSource{}
}

// PreferencesDataSource defines the data source implementation.
type PreferencesDataSource struct{}

// PreferencesDataSourceModel describes the data source data model.
type PreferencesDataSourceModel struct {
	HomeDashboardUID types.String `tfsdk:"home_dashboard_uid" json:"homeDashboardUID"`
	Timezone         types.String `tfsdk:"timezone" json:"timezone"`
	WeekStart        types.String `tfsdk:"week_start" json:"weekStart"`
	Theme            types.String `tfsdk:"theme" json:"theme"`
	Language         types.String `tfsdk:"language" json:"language"`
	QueryHistory     *struct {
		HomeTab types.String `tfsdk:"home_tab" json:"homeTab"`
	} `tfsdk:"query_history" json:"queryHistory"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *PreferencesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_preferences"
}

func (d *PreferencesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"home_dashboard_uid": schema.StringAttribute{
				MarkdownDescription: `UID for the home dashboard`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"timezone": schema.StringAttribute{
				MarkdownDescription: `The timezone selection
TODO: this should use the timezone defined in common`,
				Computed: false,
				Optional: true,
				Required: false,
			},

			"week_start": schema.StringAttribute{
				MarkdownDescription: `day of the week (sunday, monday, etc)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"theme": schema.StringAttribute{
				MarkdownDescription: `light, dark, empty is default`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"language": schema.StringAttribute{
				MarkdownDescription: `Selected language (beta)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"query_history": schema.SingleNestedAttribute{
				MarkdownDescription: `Explore query history preferences`,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"home_tab": schema.StringAttribute{
						MarkdownDescription: `one of: '' | 'query' | 'starred';`,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *PreferencesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *PreferencesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data PreferencesDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
