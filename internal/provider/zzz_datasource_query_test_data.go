// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &QueryTestDataDataSource{}
	_ datasource.DataSourceWithConfigure = &QueryTestDataDataSource{}
)

func NewQueryTestDataDataSource() datasource.DataSource {
	return &QueryTestDataDataSource{}
}

// QueryTestDataDataSource defines the data source implementation.
type QueryTestDataDataSource struct{}

// QueryTestDataDataSourceModel describes the data source data model.
type QueryTestDataDataSourceModel struct {
	Alias       types.String `tfsdk:"alias"`
	ScenarioId  types.String `tfsdk:"scenario_id"`
	StringInput types.String `tfsdk:"string_input"`
	Stream      *struct {
		Type   types.String `tfsdk:"type"`
		Speed  types.Int64  `tfsdk:"speed"`
		Spread types.Int64  `tfsdk:"spread"`
		Noise  types.Int64  `tfsdk:"noise"`
		Bands  types.Int64  `tfsdk:"bands"`
		Url    types.String `tfsdk:"url"`
	} `tfsdk:"stream"`
	PulseWave *struct {
		TimeStep types.Int64   `tfsdk:"time_step"`
		OnCount  types.Int64   `tfsdk:"on_count"`
		OffCount types.Int64   `tfsdk:"off_count"`
		OnValue  types.Float64 `tfsdk:"on_value"`
		OffValue types.Float64 `tfsdk:"off_value"`
	} `tfsdk:"pulse_wave"`
	Sim *struct {
		Key struct {
			Type types.String  `tfsdk:"type"`
			Tick types.Float64 `tfsdk:"tick"`
			Uid  types.String  `tfsdk:"uid"`
		} `tfsdk:"key"`
		Config *struct {
		} `tfsdk:"config"`
		Stream types.Bool `tfsdk:"stream"`
		Last   types.Bool `tfsdk:"last"`
	} `tfsdk:"sim"`
	CsvWave []struct {
		TimeStep  types.Int64  `tfsdk:"time_step"`
		Name      types.String `tfsdk:"name"`
		ValuesCSV types.String `tfsdk:"values_csv"`
		Labels    types.String `tfsdk:"labels"`
	} `tfsdk:"csv_wave"`
	Labels      types.String `tfsdk:"labels"`
	Lines       types.Int64  `tfsdk:"lines"`
	LevelColumn types.Bool   `tfsdk:"level_column"`
	Channel     types.String `tfsdk:"channel"`
	Nodes       *struct {
		Type  types.String `tfsdk:"type"`
		Count types.Int64  `tfsdk:"count"`
	} `tfsdk:"nodes"`
	CsvFileName     types.String `tfsdk:"csv_file_name"`
	CsvContent      types.String `tfsdk:"csv_content"`
	RawFrameContent types.String `tfsdk:"raw_frame_content"`
	SeriesCount     types.Int64  `tfsdk:"series_count"`
	Usa             *struct {
		Mode   types.String `tfsdk:"mode"`
		Period types.String `tfsdk:"period"`
		Fields types.List   `tfsdk:"fields"`
		States types.List   `tfsdk:"states"`
	} `tfsdk:"usa"`
	ErrorType types.String `tfsdk:"error_type"`
	SpanCount types.Int64  `tfsdk:"span_count"`
	RefId     types.String `tfsdk:"ref_id"`
	Hide      types.Bool   `tfsdk:"hide"`
	Key       types.String `tfsdk:"key"`
	QueryType types.String `tfsdk:"query_type"`
	ToJSON    types.String `tfsdk:"to_json"`
}

// QueryTestDataDataSourceModelJSON describes the data source data model when exported to json.
type QueryTestDataDataSourceModelJSON struct {
	Alias       *string `json:"alias,omitempty"`
	ScenarioId  *string `json:"scenarioId,omitempty"`
	StringInput *string `json:"stringInput,omitempty"`
	Stream      *struct {
		Type   string  `json:"type"`
		Speed  int64   `json:"speed"`
		Spread int64   `json:"spread"`
		Noise  int64   `json:"noise"`
		Bands  *int64  `json:"bands,omitempty"`
		Url    *string `json:"url,omitempty"`
	} `json:"stream,omitempty"`
	PulseWave *struct {
		TimeStep *int64   `json:"timeStep,omitempty"`
		OnCount  *int64   `json:"onCount,omitempty"`
		OffCount *int64   `json:"offCount,omitempty"`
		OnValue  *float64 `json:"onValue,omitempty"`
		OffValue *float64 `json:"offValue,omitempty"`
	} `json:"pulseWave,omitempty"`
	Sim *struct {
		Key struct {
			Type string  `json:"type"`
			Tick float64 `json:"tick"`
			Uid  *string `json:"uid,omitempty"`
		} `json:"key"`
		Config *struct {
		} `json:"config,omitempty"`
		Stream *bool `json:"stream,omitempty"`
		Last   *bool `json:"last,omitempty"`
	} `json:"sim,omitempty"`
	CsvWave []struct {
		TimeStep  *int64  `json:"timeStep,omitempty"`
		Name      *string `json:"name,omitempty"`
		ValuesCSV *string `json:"valuesCSV,omitempty"`
		Labels    *string `json:"labels,omitempty"`
	} `json:"csvWave,omitempty"`
	Labels      *string `json:"labels,omitempty"`
	Lines       *int64  `json:"lines,omitempty"`
	LevelColumn *bool   `json:"levelColumn,omitempty"`
	Channel     *string `json:"channel,omitempty"`
	Nodes       *struct {
		Type  *string `json:"type,omitempty"`
		Count *int64  `json:"count,omitempty"`
	} `json:"nodes,omitempty"`
	CsvFileName     *string `json:"csvFileName,omitempty"`
	CsvContent      *string `json:"csvContent,omitempty"`
	RawFrameContent *string `json:"rawFrameContent,omitempty"`
	SeriesCount     *int64  `json:"seriesCount,omitempty"`
	Usa             *struct {
		Mode   *string  `json:"mode,omitempty"`
		Period *string  `json:"period,omitempty"`
		Fields []string `json:"fields,omitempty"`
		States []string `json:"states,omitempty"`
	} `json:"usa,omitempty"`
	ErrorType *string `json:"errorType,omitempty"`
	SpanCount *int64  `json:"spanCount,omitempty"`
	RefId     string  `json:"refId"`
	Hide      *bool   `json:"hide,omitempty"`
	Key       *string `json:"key,omitempty"`
	QueryType *string `json:"queryType,omitempty"`
}

func (d *QueryTestDataDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_query_test_data"
}

func (d *QueryTestDataDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",
		Attributes: map[string]schema.Attribute{
			"alias": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"scenario_id": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            true,
				Optional:            true,
				Required:            false,
			},
			"string_input": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"stream": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"speed": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"spread": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"noise": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
					"bands": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"url": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"pulse_wave": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"time_step": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"on_count": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"off_count": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"on_value": schema.Float64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"off_value": schema.Float64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"sim": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"key": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"tick": schema.Float64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
							"uid": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},
					"config": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"stream": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"last": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"csv_wave": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"time_step": schema.Int64Attribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"name": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"values_csv": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
						"labels": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},
			"labels": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"lines": schema.Int64Attribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"level_column": schema.BoolAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"channel": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"nodes": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"count": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},
			"csv_file_name": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"csv_content": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"raw_frame_content": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"series_count": schema.Int64Attribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"usa": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"period": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
					"fields": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						ElementType:         types.StringType,
					},
					"states": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						ElementType:         types.StringType,
					},
				},
			},
			"error_type": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"span_count": schema.Int64Attribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"ref_id": schema.StringAttribute{
				MarkdownDescription: `A - Z`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},
			"hide": schema.BoolAttribute{
				MarkdownDescription: `true if query is disabled (ie should not be returned to the dashboard)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"key": schema.StringAttribute{
				MarkdownDescription: `Unique, guid like, string used in explore mode`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},
			"query_type": schema.StringAttribute{
				MarkdownDescription: `Specify the query flavor
TODO make this required and give it a default`,
				Computed: false,
				Optional: true,
				Required: false,
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *QueryTestDataDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *QueryTestDataDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data QueryTestDataDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	d.applyDefaults(&data)
	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (d *QueryTestDataDataSource) applyDefaults(data *QueryTestDataDataSourceModel) {
	if data.ScenarioId.IsNull() {
		data.ScenarioId = types.StringValue(`random_walk`)
	}
}

func (d QueryTestDataDataSourceModel) MarshalJSON() ([]byte, error) {
	attr_alias := d.Alias.ValueString()
	attr_scenarioid := d.ScenarioId.ValueString()
	attr_stringinput := d.StringInput.ValueString()
	attr_labels := d.Labels.ValueString()
	attr_lines := d.Lines.ValueInt64()
	attr_levelcolumn := d.LevelColumn.ValueBool()
	attr_channel := d.Channel.ValueString()
	attr_csvfilename := d.CsvFileName.ValueString()
	attr_csvcontent := d.CsvContent.ValueString()
	attr_rawframecontent := d.RawFrameContent.ValueString()
	attr_seriescount := d.SeriesCount.ValueInt64()
	attr_errortype := d.ErrorType.ValueString()
	attr_spancount := d.SpanCount.ValueInt64()
	attr_refid := d.RefId.ValueString()
	attr_hide := d.Hide.ValueBool()
	attr_key := d.Key.ValueString()
	attr_querytype := d.QueryType.ValueString()

	model := &QueryTestDataDataSourceModelJSON{
		Alias:           &attr_alias,
		ScenarioId:      &attr_scenarioid,
		StringInput:     &attr_stringinput,
		Labels:          &attr_labels,
		Lines:           &attr_lines,
		LevelColumn:     &attr_levelcolumn,
		Channel:         &attr_channel,
		CsvFileName:     &attr_csvfilename,
		CsvContent:      &attr_csvcontent,
		RawFrameContent: &attr_rawframecontent,
		SeriesCount:     &attr_seriescount,
		ErrorType:       &attr_errortype,
		SpanCount:       &attr_spancount,
		RefId:           attr_refid,
		Hide:            &attr_hide,
		Key:             &attr_key,
		QueryType:       &attr_querytype,
	}
	return json.Marshal(model)
}
