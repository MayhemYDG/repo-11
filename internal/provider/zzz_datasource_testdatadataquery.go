// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &TestDataDataQueryDataSource{}
	_ datasource.DataSourceWithConfigure = &TestDataDataQueryDataSource{}
)

func NewTestDataDataQueryDataSource() datasource.DataSource {
	return &TestDataDataQueryDataSource{}
}

// TestDataDataQueryDataSource defines the data source implementation.
type TestDataDataQueryDataSource struct{}

// TestDataDataQueryDataSourceModel describes the data source data model.
type TestDataDataQueryDataSourceModel struct {
	Alias       types.String `tfsdk:"alias" json:"alias"`
	ScenarioId  types.String `tfsdk:"scenario_id" json:"scenarioId"`
	StringInput types.String `tfsdk:"string_input" json:"stringInput"`
	Stream      *struct {
		Type   types.String `tfsdk:"type" json:"type"`
		Speed  types.Int64  `tfsdk:"speed" json:"speed"`
		Spread types.Int64  `tfsdk:"spread" json:"spread"`
		Noise  types.Int64  `tfsdk:"noise" json:"noise"`
		Bands  types.Int64  `tfsdk:"bands" json:"bands"`
		Url    types.String `tfsdk:"url" json:"url"`
	} `tfsdk:"stream" json:"stream"`
	PulseWave *struct {
		TimeStep types.Int64  `tfsdk:"time_step" json:"timeStep"`
		OnCount  types.Int64  `tfsdk:"on_count" json:"onCount"`
		OffCount types.Int64  `tfsdk:"off_count" json:"offCount"`
		OnValue  types.Number `tfsdk:"on_value" json:"onValue"`
		OffValue types.Number `tfsdk:"off_value" json:"offValue"`
	} `tfsdk:"pulse_wave" json:"pulseWave"`
	Sim *struct {
		Key *struct {
			Type types.String `tfsdk:"type" json:"type"`
			Tick types.Number `tfsdk:"tick" json:"tick"`
			Uid  types.String `tfsdk:"uid" json:"uid"`
		} `tfsdk:"key" json:"key"`
		Config *struct {
		} `tfsdk:"config" json:"config"`
		Stream types.Bool `tfsdk:"stream" json:"stream"`
		Last   types.Bool `tfsdk:"last" json:"last"`
	} `tfsdk:"sim" json:"sim"`
	CsvWave []struct {
		TimeStep  types.Int64  `tfsdk:"time_step" json:"timeStep"`
		Name      types.String `tfsdk:"name" json:"name"`
		ValuesCSV types.String `tfsdk:"values_csv" json:"valuesCSV"`
		Labels    types.String `tfsdk:"labels" json:"labels"`
	} `tfsdk:"csv_wave" json:"csvWave"`
	Labels      types.String `tfsdk:"labels" json:"labels"`
	Lines       types.Int64  `tfsdk:"lines" json:"lines"`
	LevelColumn types.Bool   `tfsdk:"level_column" json:"levelColumn"`
	Channel     types.String `tfsdk:"channel" json:"channel"`
	Nodes       *struct {
		Type  types.String `tfsdk:"type" json:"type"`
		Count types.Int64  `tfsdk:"count" json:"count"`
	} `tfsdk:"nodes" json:"nodes"`
	CsvFileName     types.String `tfsdk:"csv_file_name" json:"csvFileName"`
	CsvContent      types.String `tfsdk:"csv_content" json:"csvContent"`
	RawFrameContent types.String `tfsdk:"raw_frame_content" json:"rawFrameContent"`
	SeriesCount     types.Int64  `tfsdk:"series_count" json:"seriesCount"`
	Usa             *struct {
		Mode   types.String `tfsdk:"mode" json:"mode"`
		Period types.String `tfsdk:"period" json:"period"`
		Fields types.List   `tfsdk:"fields" json:"fields"`
		States types.List   `tfsdk:"states" json:"states"`
	} `tfsdk:"usa" json:"usa"`
	ErrorType types.String `tfsdk:"error_type" json:"errorType"`
	SpanCount types.Int64  `tfsdk:"span_count" json:"spanCount"`
	RefId     types.String `tfsdk:"ref_id" json:"refId"`
	Hide      types.Bool   `tfsdk:"hide" json:"hide"`
	Key       types.String `tfsdk:"key" json:"key"`
	QueryType types.String `tfsdk:"query_type" json:"queryType"`
	ToJSON    types.String `tfsdk:"to_json"`
}

func (d *TestDataDataQueryDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_testdatadataquery"
}

func (d *TestDataDataQueryDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"alias": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"scenario_id": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"string_input": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"stream": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"speed": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"spread": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"noise": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"bands": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"url": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"pulse_wave": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"time_step": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"on_count": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"off_count": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"on_value": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"off_value": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"sim": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"key": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"tick": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"uid": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"config": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"stream": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"last": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"csv_wave": schema.ListNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"time_step": schema.Int64Attribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},

						"name": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},

						"values_csv": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},

						"labels": schema.StringAttribute{
							MarkdownDescription: ``,
							Computed:            false,
							Optional:            true,
							Required:            false,
						},
					},
				},
			},

			"labels": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"lines": schema.Int64Attribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"level_column": schema.BoolAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"channel": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"nodes": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"count": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"csv_file_name": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"csv_content": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"raw_frame_content": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"series_count": schema.Int64Attribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"usa": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
				Attributes: map[string]schema.Attribute{
					"mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"period": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"fields": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						ElementType:         types.StringType,
					},

					"states": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						ElementType:         types.StringType,
					},
				},
			},

			"error_type": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"span_count": schema.Int64Attribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"ref_id": schema.StringAttribute{
				MarkdownDescription: `A - Z`,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"hide": schema.BoolAttribute{
				MarkdownDescription: `true if query is disabled (ie should not be returned to the dashboard)`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"key": schema.StringAttribute{
				MarkdownDescription: `Unique, guid like, string used in explore mode`,
				Computed:            false,
				Optional:            true,
				Required:            false,
			},

			"query_type": schema.StringAttribute{
				MarkdownDescription: `Specify the query flavor
TODO make this required and give it a default`,
				Computed: false,
				Optional: true,
				Required: false,
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *TestDataDataQueryDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *TestDataDataQueryDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data TestDataDataQueryDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
