// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &TextPanelCfgDataSource{}
	_ datasource.DataSourceWithConfigure = &TextPanelCfgDataSource{}
)

func NewTextPanelCfgDataSource() datasource.DataSource {
	return &TextPanelCfgDataSource{}
}

// TextPanelCfgDataSource defines the data source implementation.
type TextPanelCfgDataSource struct{}

// TextPanelCfgDataSourceModel describes the data source data model.
type TextPanelCfgDataSourceModel struct {
	TextMode     types.String `tfsdk:"text_mode" json:"TextMode"`
	CodeLanguage types.String `tfsdk:"code_language" json:"CodeLanguage"`
	CodeOptions  *struct {
		Language        types.String `tfsdk:"language" json:"language"`
		ShowLineNumbers types.Bool   `tfsdk:"show_line_numbers" json:"showLineNumbers"`
		ShowMiniMap     types.Bool   `tfsdk:"show_mini_map" json:"showMiniMap"`
	} `tfsdk:"code_options" json:"CodeOptions"`
	PanelOptions *struct {
		Mode types.String `tfsdk:"mode" json:"mode"`
		Code *struct {
			Language        types.String `tfsdk:"language" json:"language"`
			ShowLineNumbers types.Bool   `tfsdk:"show_line_numbers" json:"showLineNumbers"`
			ShowMiniMap     types.Bool   `tfsdk:"show_mini_map" json:"showMiniMap"`
		} `tfsdk:"code" json:"code"`
		Content types.String `tfsdk:"content" json:"content"`
	} `tfsdk:"panel_options" json:"PanelOptions"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *TextPanelCfgDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_textpanelcfg"
}

func (d *TextPanelCfgDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"text_mode": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"code_language": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"code_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"language": schema.StringAttribute{
						MarkdownDescription: `The language passed to monaco code editor`,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_line_numbers": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"show_mini_map": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},

			"panel_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"code": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"language": schema.StringAttribute{
								MarkdownDescription: `The language passed to monaco code editor`,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"show_line_numbers": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"show_mini_map": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"content": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *TextPanelCfgDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *TextPanelCfgDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data TextPanelCfgDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
