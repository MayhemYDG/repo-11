// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &XYChartPanelCfgDataSource{}
	_ datasource.DataSourceWithConfigure = &XYChartPanelCfgDataSource{}
)

func NewXYChartPanelCfgDataSource() datasource.DataSource {
	return &XYChartPanelCfgDataSource{}
}

// XYChartPanelCfgDataSource defines the data source implementation.
type XYChartPanelCfgDataSource struct{}

// XYChartPanelCfgDataSourceModel describes the data source data model.
type XYChartPanelCfgDataSourceModel struct {
	SeriesMapping     types.String `tfsdk:"series_mapping" json:"SeriesMapping"`
	ScatterShow       types.String `tfsdk:"scatter_show" json:"ScatterShow"`
	XYDimensionConfig *struct {
		Frame   types.Int64  `tfsdk:"frame" json:"frame"`
		X       types.String `tfsdk:"x" json:"x"`
		Exclude types.List   `tfsdk:"exclude" json:"exclude"`
	} `tfsdk:"xy_dimension_config" json:"XYDimensionConfig"`
	ScatterFieldConfig *struct {
		Show      types.String `tfsdk:"show" json:"show"`
		PointSize *struct {
			Min   types.Int64  `tfsdk:"min" json:"min"`
			Field types.String `tfsdk:"field" json:"field"`
			Max   types.Int64  `tfsdk:"max" json:"max"`
		} `tfsdk:"point_size" json:"pointSize"`
		LineColor *struct {
			Field types.String `tfsdk:"field" json:"field"`
		} `tfsdk:"line_color" json:"lineColor"`
		PointColor *struct {
			Field types.String `tfsdk:"field" json:"field"`
		} `tfsdk:"point_color" json:"pointColor"`
		LabelValue *struct {
			Mode  types.String `tfsdk:"mode" json:"mode"`
			Field types.String `tfsdk:"field" json:"field"`
		} `tfsdk:"label_value" json:"labelValue"`
		LineWidth types.Int64 `tfsdk:"line_width" json:"lineWidth"`
		LineStyle *struct {
			Fill types.String `tfsdk:"fill" json:"fill"`
			Dash types.List   `tfsdk:"dash" json:"dash"`
		} `tfsdk:"line_style" json:"lineStyle"`
		HideFrom *struct {
			Tooltip types.Bool `tfsdk:"tooltip" json:"tooltip"`
			Legend  types.Bool `tfsdk:"legend" json:"legend"`
			Viz     types.Bool `tfsdk:"viz" json:"viz"`
		} `tfsdk:"hide_from" json:"hideFrom"`
		AxisPlacement     types.String `tfsdk:"axis_placement" json:"axisPlacement"`
		AxisColorMode     types.String `tfsdk:"axis_color_mode" json:"axisColorMode"`
		AxisLabel         types.String `tfsdk:"axis_label" json:"axisLabel"`
		AxisWidth         types.Number `tfsdk:"axis_width" json:"axisWidth"`
		AxisSoftMin       types.Number `tfsdk:"axis_soft_min" json:"axisSoftMin"`
		AxisSoftMax       types.Number `tfsdk:"axis_soft_max" json:"axisSoftMax"`
		AxisGridShow      types.Bool   `tfsdk:"axis_grid_show" json:"axisGridShow"`
		ScaleDistribution *struct {
			Type            types.String `tfsdk:"type" json:"type"`
			Log             types.Number `tfsdk:"log" json:"log"`
			LinearThreshold types.Number `tfsdk:"linear_threshold" json:"linearThreshold"`
		} `tfsdk:"scale_distribution" json:"scaleDistribution"`
		Label            types.String `tfsdk:"label" json:"label"`
		AxisCenteredZero types.Bool   `tfsdk:"axis_centered_zero" json:"axisCenteredZero"`
	} `tfsdk:"scatter_field_config" json:"ScatterFieldConfig"`
	ScatterSeriesConfig *struct {
		X         types.String `tfsdk:"x" json:"x"`
		Y         types.String `tfsdk:"y" json:"y"`
		Show      types.String `tfsdk:"show" json:"show"`
		PointSize *struct {
			Min   types.Int64  `tfsdk:"min" json:"min"`
			Field types.String `tfsdk:"field" json:"field"`
			Max   types.Int64  `tfsdk:"max" json:"max"`
		} `tfsdk:"point_size" json:"pointSize"`
		LineColor *struct {
			Field types.String `tfsdk:"field" json:"field"`
		} `tfsdk:"line_color" json:"lineColor"`
		PointColor *struct {
			Field types.String `tfsdk:"field" json:"field"`
		} `tfsdk:"point_color" json:"pointColor"`
		LabelValue *struct {
			Mode  types.String `tfsdk:"mode" json:"mode"`
			Field types.String `tfsdk:"field" json:"field"`
		} `tfsdk:"label_value" json:"labelValue"`
		LineWidth types.Int64 `tfsdk:"line_width" json:"lineWidth"`
		LineStyle *struct {
			Fill types.String `tfsdk:"fill" json:"fill"`
			Dash types.List   `tfsdk:"dash" json:"dash"`
		} `tfsdk:"line_style" json:"lineStyle"`
		HideFrom *struct {
			Tooltip types.Bool `tfsdk:"tooltip" json:"tooltip"`
			Legend  types.Bool `tfsdk:"legend" json:"legend"`
			Viz     types.Bool `tfsdk:"viz" json:"viz"`
		} `tfsdk:"hide_from" json:"hideFrom"`
		AxisPlacement     types.String `tfsdk:"axis_placement" json:"axisPlacement"`
		AxisColorMode     types.String `tfsdk:"axis_color_mode" json:"axisColorMode"`
		AxisLabel         types.String `tfsdk:"axis_label" json:"axisLabel"`
		AxisWidth         types.Number `tfsdk:"axis_width" json:"axisWidth"`
		AxisSoftMin       types.Number `tfsdk:"axis_soft_min" json:"axisSoftMin"`
		AxisSoftMax       types.Number `tfsdk:"axis_soft_max" json:"axisSoftMax"`
		AxisGridShow      types.Bool   `tfsdk:"axis_grid_show" json:"axisGridShow"`
		ScaleDistribution *struct {
			Type            types.String `tfsdk:"type" json:"type"`
			Log             types.Number `tfsdk:"log" json:"log"`
			LinearThreshold types.Number `tfsdk:"linear_threshold" json:"linearThreshold"`
		} `tfsdk:"scale_distribution" json:"scaleDistribution"`
		Name             types.String `tfsdk:"name" json:"name"`
		Label            types.String `tfsdk:"label" json:"label"`
		AxisCenteredZero types.Bool   `tfsdk:"axis_centered_zero" json:"axisCenteredZero"`
	} `tfsdk:"scatter_series_config" json:"ScatterSeriesConfig"`
	PanelOptions *struct {
		SeriesMapping types.String `tfsdk:"series_mapping" json:"seriesMapping"`
		Dims          *struct {
			Frame   types.Int64  `tfsdk:"frame" json:"frame"`
			X       types.String `tfsdk:"x" json:"x"`
			Exclude types.List   `tfsdk:"exclude" json:"exclude"`
		} `tfsdk:"dims" json:"dims"`
		Legend *struct {
			DisplayMode types.String `tfsdk:"display_mode" json:"displayMode"`
			Placement   types.String `tfsdk:"placement" json:"placement"`
			ShowLegend  types.Bool   `tfsdk:"show_legend" json:"showLegend"`
			AsTable     types.Bool   `tfsdk:"as_table" json:"asTable"`
			IsVisible   types.Bool   `tfsdk:"is_visible" json:"isVisible"`
			SortBy      types.String `tfsdk:"sort_by" json:"sortBy"`
			SortDesc    types.Bool   `tfsdk:"sort_desc" json:"sortDesc"`
			Width       types.Number `tfsdk:"width" json:"width"`
			Calcs       types.List   `tfsdk:"calcs" json:"calcs"`
		} `tfsdk:"legend" json:"legend"`
		Tooltip *struct {
			Mode types.String `tfsdk:"mode" json:"mode"`
			Sort types.String `tfsdk:"sort" json:"sort"`
		} `tfsdk:"tooltip" json:"tooltip"`
		Series []struct {
			X         types.String `tfsdk:"x" json:"x"`
			Y         types.String `tfsdk:"y" json:"y"`
			Show      types.String `tfsdk:"show" json:"show"`
			PointSize *struct {
				Min   types.Int64  `tfsdk:"min" json:"min"`
				Field types.String `tfsdk:"field" json:"field"`
				Max   types.Int64  `tfsdk:"max" json:"max"`
			} `tfsdk:"point_size" json:"pointSize"`
			LineColor *struct {
				Field types.String `tfsdk:"field" json:"field"`
			} `tfsdk:"line_color" json:"lineColor"`
			PointColor *struct {
				Field types.String `tfsdk:"field" json:"field"`
			} `tfsdk:"point_color" json:"pointColor"`
			LabelValue *struct {
				Mode  types.String `tfsdk:"mode" json:"mode"`
				Field types.String `tfsdk:"field" json:"field"`
			} `tfsdk:"label_value" json:"labelValue"`
			LineWidth types.Int64 `tfsdk:"line_width" json:"lineWidth"`
			LineStyle *struct {
				Fill types.String `tfsdk:"fill" json:"fill"`
				Dash types.List   `tfsdk:"dash" json:"dash"`
			} `tfsdk:"line_style" json:"lineStyle"`
			HideFrom *struct {
				Tooltip types.Bool `tfsdk:"tooltip" json:"tooltip"`
				Legend  types.Bool `tfsdk:"legend" json:"legend"`
				Viz     types.Bool `tfsdk:"viz" json:"viz"`
			} `tfsdk:"hide_from" json:"hideFrom"`
			AxisPlacement     types.String `tfsdk:"axis_placement" json:"axisPlacement"`
			AxisColorMode     types.String `tfsdk:"axis_color_mode" json:"axisColorMode"`
			AxisLabel         types.String `tfsdk:"axis_label" json:"axisLabel"`
			AxisWidth         types.Number `tfsdk:"axis_width" json:"axisWidth"`
			AxisSoftMin       types.Number `tfsdk:"axis_soft_min" json:"axisSoftMin"`
			AxisSoftMax       types.Number `tfsdk:"axis_soft_max" json:"axisSoftMax"`
			AxisGridShow      types.Bool   `tfsdk:"axis_grid_show" json:"axisGridShow"`
			ScaleDistribution *struct {
				Type            types.String `tfsdk:"type" json:"type"`
				Log             types.Number `tfsdk:"log" json:"log"`
				LinearThreshold types.Number `tfsdk:"linear_threshold" json:"linearThreshold"`
			} `tfsdk:"scale_distribution" json:"scaleDistribution"`
			Name             types.String `tfsdk:"name" json:"name"`
			Label            types.String `tfsdk:"label" json:"label"`
			AxisCenteredZero types.Bool   `tfsdk:"axis_centered_zero" json:"axisCenteredZero"`
		} `tfsdk:"series" json:"series"`
	} `tfsdk:"panel_options" json:"PanelOptions"`
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *XYChartPanelCfgDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_xychartpanelcfg"
}

func (d *XYChartPanelCfgDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"series_mapping": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"scatter_show": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
			},

			"xy_dimension_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"frame": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
					},

					"x": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"exclude": schema.ListAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						ElementType:         types.StringType,
					},
				},
			},

			"scatter_field_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"show": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"point_size": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"min": schema.Int64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"max": schema.Int64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"line_color": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"point_color": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"label_value": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"line_width": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"line_style": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"fill": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"dash": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.NumberType,
							},
						},
					},

					"hide_from": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"tooltip": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"viz": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"axis_placement": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_color_mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_label": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_width": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_min": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_max": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_grid_show": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"scale_distribution": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"log": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"linear_threshold": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"label": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_centered_zero": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"scatter_series_config": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"x": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"y": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"show": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"point_size": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"min": schema.Int64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"max": schema.Int64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"line_color": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"point_color": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"label_value": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"field": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"line_width": schema.Int64Attribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"line_style": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"fill": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"dash": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.NumberType,
							},
						},
					},

					"hide_from": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"tooltip": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"viz": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"axis_placement": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_color_mode": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_label": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_width": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_min": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_soft_max": schema.NumberAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_grid_show": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"scale_distribution": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
						Attributes: map[string]schema.Attribute{
							"type": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"log": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"linear_threshold": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},
						},
					},

					"name": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"label": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"axis_centered_zero": schema.BoolAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},
				},
			},

			"panel_options": schema.SingleNestedAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            false,
				Required:            true,
				Attributes: map[string]schema.Attribute{
					"series_mapping": schema.StringAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            true,
						Required:            false,
					},

					"dims": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"frame": schema.Int64Attribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"x": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"exclude": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
								ElementType:         types.StringType,
							},
						},
					},

					"legend": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"display_mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"placement": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"show_legend": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"as_table": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"is_visible": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"sort_by": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"sort_desc": schema.BoolAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"width": schema.NumberAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            true,
								Required:            false,
							},

							"calcs": schema.ListAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
								ElementType:         types.StringType,
							},
						},
					},

					"tooltip": schema.SingleNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},

							"sort": schema.StringAttribute{
								MarkdownDescription: ``,
								Computed:            false,
								Optional:            false,
								Required:            true,
							},
						},
					},

					"series": schema.ListNestedAttribute{
						MarkdownDescription: ``,
						Computed:            false,
						Optional:            false,
						Required:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"x": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"y": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"show": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"point_size": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"min": schema.Int64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},

										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},

										"max": schema.Int64Attribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
									},
								},

								"line_color": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},

								"point_color": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},

								"label_value": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"mode": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},

										"field": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},

								"line_width": schema.Int64Attribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"line_style": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"fill": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},

										"dash": schema.ListAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
											ElementType:         types.NumberType,
										},
									},
								},

								"hide_from": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"tooltip": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},

										"legend": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},

										"viz": schema.BoolAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},
									},
								},

								"axis_placement": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_color_mode": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_label": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_width": schema.NumberAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_soft_min": schema.NumberAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_soft_max": schema.NumberAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_grid_show": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"scale_distribution": schema.SingleNestedAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
									Attributes: map[string]schema.Attribute{
										"type": schema.StringAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            false,
											Required:            true,
										},

										"log": schema.NumberAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},

										"linear_threshold": schema.NumberAttribute{
											MarkdownDescription: ``,
											Computed:            false,
											Optional:            true,
											Required:            false,
										},
									},
								},

								"name": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"label": schema.StringAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},

								"axis_centered_zero": schema.BoolAttribute{
									MarkdownDescription: ``,
									Computed:            false,
									Optional:            true,
									Required:            false,
								},
							},
						},
					},
				},
			},

			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *XYChartPanelCfgDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
}

func (d *XYChartPanelCfgDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data XYChartPanelCfgDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
